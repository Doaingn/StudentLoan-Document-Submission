import { useState, useEffect } from "react";
import { doc, getDoc, onSnapshot, updateDoc } from "firebase/firestore";
import { db, auth } from "../../../database/firebase";

export const useFirebaseData = (
  setAppConfig,
  setAcademicYear,
  setTerm,
  setBirthDate,
  setUserAge,
  setVolunteerHours = () => {}
) => {
  const [configLoaded, setConfigLoaded] = useState(false);

  // Config Listener
  useEffect(() => {
    const configRef = doc(db, "DocumentService", "config");

    const configUnsubscribe = onSnapshot(
      configRef,
      (docSnap) => {
        if (docSnap.exists()) {
          const config = docSnap.data();
          if (config) {
            setAppConfig(config);
            setAcademicYear(config.academicYear);
            setTerm(config.term);
          }
        } else {
          const defaultConfig = { academicYear: "2568", term: "1" };
          setAppConfig(defaultConfig);
          setAcademicYear(defaultConfig.academicYear);
          setTerm(defaultConfig.term);
        }
        setConfigLoaded(true);
      },
      (error) => {
        console.error("Error listening to app config:", error);
        setConfigLoaded(true);
      }
    );

    return () => configUnsubscribe();
  }, []);

  // Initialize loan history if not exists
  const initializeLoanHistory = async (userRef, currentYear, currentTerm) => {
    try {
      await updateDoc(userRef, {
        loanHistory: {
          currentPhase: "initial_application",
          phase1Approved: false,
          phase1ApprovedYear: null,
          disbursementSubmitted: false,
          disbursementApproved: false,
          firstApplicationYear: currentYear,
          firstApplicationTerm: currentTerm,
          lastPhase1ApprovedTerm: null,
          lastDisbursementSubmitTerm: null,
          lastDisbursementApprovedTerm: null,
          hasEverApplied: false,
          hasCompletedPhase1Ever: false // ‡πÉ‡∏´‡∏°‡πà: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥ Phase 1 ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        }
      });
      
      return {
        currentPhase: "initial_application",
        phase1Approved: false,
        phase1ApprovedYear: null,
        disbursementSubmitted: false,
        disbursementApproved: false,
        firstApplicationYear: currentYear,
        firstApplicationTerm: currentTerm,
        lastPhase1ApprovedTerm: null,
        lastDisbursementSubmitTerm: null,
        lastDisbursementApprovedTerm: null,
        hasEverApplied: false,
        hasCompletedPhase1Ever: false
      };
    } catch (error) {
      console.error("Error initializing loan history:", error);
      return null;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î Phase
const determinePhase = (loanHistory, currentTerm, currentYear) => {
  if (!loanHistory || typeof loanHistory !== 'object') {
    console.log("‚ö†Ô∏è loanHistory is null or invalid");
    return { phase: "initial_application", reason: "no_loan_history" };
  }

  console.log("üîç Determining phase:", { 
    currentTerm,
    currentYear,
    hasCompletedPhase1Ever: loanHistory.hasCompletedPhase1Ever,
    phase1ApprovedYear: loanHistory.phase1ApprovedYear,
    lastDisbursementApprovedTerm: loanHistory.lastDisbursementApprovedTerm,
    disbursementApproved: loanHistory.disbursementApproved
  });
  
  // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ disbursementApproved ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isCurrentTermApproved = 
    loanHistory.lastDisbursementApprovedTerm === currentTerm &&
    loanHistory.lastDisbursementApprovedYear === currentYear &&
    loanHistory.disbursementApproved === true;
  
  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‚Üí completed
  if (isCurrentTermApproved) {
    return { phase: "completed", reason: "current_term_approved" };
  }
  
  // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  const hasSubmittedCurrentTerm = 
    loanHistory.lastDisbursementSubmitTerm === currentTerm &&
    loanHistory.lastDisbursementSubmitYear === currentYear &&
    loanHistory.disbursementSubmitted === true;
  
  if (hasSubmittedCurrentTerm) {
    return { phase: "disbursement_pending", reason: "awaiting_approval" };
  }
  
  // ‚úÖ ‡πÄ‡∏ó‡∏≠‡∏° 2/3 ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô
  if (currentTerm === "2" || currentTerm === "3") {
    return { phase: "disbursement", reason: "term_2_or_3" };
  }
  
  // ‚úÖ ‡πÄ‡∏ó‡∏≠‡∏° 1 - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥ Phase 1 ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  if (currentTerm === "1") {
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isNewYear = loanHistory.phase1ApprovedYear !== currentYear;
    
    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥ Phase 1 ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡πÑ‡∏´‡∏ô) ‚Üí ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô
    if (loanHistory.hasCompletedPhase1Ever === true) {
      console.log("‚úÖ User has completed Phase 1 before ‚Üí disbursement only");
      return { phase: "disbursement", reason: "term1_phase1_already_done_lifetime" };
    }
    
    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥ Phase 1 ‡πÄ‡∏•‡∏¢ ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥ Phase 1 ‡∏Å‡πà‡∏≠‡∏ô
    if (!loanHistory.hasCompletedPhase1Ever) {
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á Phase 1 ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      if (loanHistory.currentPhase === "initial_application" && 
          !loanHistory.phase1Approved) {
        return { phase: "initial_application_pending", reason: "awaiting_phase1_approval" };
      }
      
      return { phase: "initial_application", reason: "first_time_applicant" };
    }
  }
  
  return { phase: "initial_application", reason: "fallback" };
};

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô loadUserData ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
  const loadUserData = async (currentConfig) => {
    const currentUser = auth.currentUser;
    if (!currentUser) return null;

    try {
      const userRef = doc(db, "users", currentUser.uid);
      const userDoc = await getDoc(userRef);

      if (!userDoc.exists()) {
        return handleNoUserData(currentConfig);
      }

      const userData = userDoc.data();
      const currentTerm = currentConfig.term;
      const currentYear = currentConfig.academicYear;
      
      let loanHistory = userData.loanHistory;
      
      if (!loanHistory) {
        loanHistory = await initializeLoanHistory(userRef, currentYear, currentTerm);
      }
      
      // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î phase ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
      const { phase, reason } = determinePhase(loanHistory, currentTerm, currentYear);
      console.log(`‚úÖ Determined phase: "${phase}" (reason: ${reason})`);
      
      // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ birth_date
      const birthDateFromUser = userData.birth_date;
      setBirthDate(birthDateFromUser);

      if (birthDateFromUser) {
        const { calculateAge } = await import("../utils/helpers");
        const age = calculateAge(birthDateFromUser);
        setUserAge(age);
      }

      const volunteerHoursFromFirebase = userData.volunteerHours || 0;
      setVolunteerHours(volunteerHoursFromFirebase);

      // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ uploads ‡∏ï‡∏≤‡∏° phase
      let uploadsToUse = {};
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô disbursement phase ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á ‚Üí ‡∏•‡πâ‡∏≤‡∏á uploads ‡πÄ‡∏Å‡πà‡∏≤
      if (phase === "disbursement" && !loanHistory.disbursementSubmitted) {
        console.log("üßπ Disbursement phase - clearing old uploads");
        await updateDoc(userRef, { 
          uploads: {},
          lastUpdated: new Date().toISOString()
        });
      } 
      // ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ pending ‚Üí ‡πÄ‡∏Å‡πá‡∏ö uploads ‡πÄ‡∏î‡∏¥‡∏°
      else if (phase === "disbursement_pending" || 
               phase === "initial_application_pending" ||
               phase === "completed") {
        uploadsToUse = userData.uploads || {};
      } 
      // Phase ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
      else {
        const lastSubmissionTerm = userData.lastSubmissionTerm;
        if (lastSubmissionTerm === currentTerm && userData.uploads) {
          uploadsToUse = userData.uploads;
        }
      }

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á surveyData ‡∏ï‡∏≤‡∏° phase
      if (phase === "disbursement" || 
          phase === "disbursement_pending" || 
          phase === "completed") {
        return {
          surveyData: { 
            term: currentTerm,
            phase: phase === "disbursement_pending" ? "disbursement" : phase,
            userId: currentUser.uid,
            loanHistory: loanHistory,
            birth_date: birthDateFromUser
          },
          surveyDocId: userDoc.id,
          uploads: uploadsToUse,
          volunteerHours: volunteerHoursFromFirebase,
        };
      }
      
      // Phase 1 - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ survey
      const surveyData = userData.survey;
      if (surveyData) {
        return {
          surveyData: { 
            ...surveyData, 
            term: currentTerm,
            phase: phase === "initial_application_pending" ? "initial_application" : phase,
            userId: currentUser.uid,
            loanHistory: loanHistory
          },
          surveyDocId: userDoc.id,
          uploads: uploadsToUse,
          volunteerHours: volunteerHoursFromFirebase,
        };
      } else {
        console.log("‚ö†Ô∏è Term 1 requires survey data but none found");
        return {
          surveyData: null,
          surveyDocId: null,
          uploads: {},
          volunteerHours: volunteerHoursFromFirebase,
        };
      }
    } catch (error) {
      console.error("Error loading user data:", error);
      return {
        surveyData: null,
        surveyDocId: null,
        uploads: {},
        volunteerHours: 0,
      };
    }
  };

  const handleNoUserData = (currentConfig) => {
    const currentTerm = currentConfig.term;
    
    if (currentTerm === "2" || currentTerm === "3") {
      return {
        surveyData: { 
          term: currentTerm,
          phase: "disbursement"
        },
        surveyDocId: null,
        uploads: {},
        volunteerHours: 0,
      };
    } else {
      return {
        surveyData: null,
        surveyDocId: null,
        uploads: {},
        volunteerHours: 0,
      };
    }
  };

  return {
    configLoaded,
    loadUserData,
  };
};