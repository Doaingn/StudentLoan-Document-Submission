// documents_ai/ConsentFormAI.js - Enhanced with profile data verification
import { GoogleGenerativeAI } from "@google/generative-ai";
import * as FileSystem from 'expo-file-system/legacy';
import { Alert } from 'react-native';
import { doc, getDoc } from "firebase/firestore";
import { db, auth } from "../../../database/firebase";

// Configuration
const GEMINI_API_KEY = process.env.EXPO_PUBLIC_GEMINI_API_KEY;
const AI_BACKEND_URL = process.env.EXPO_PUBLIC_AI_BACKEND_URL || 'http://192.168.1.103:3001';
const USE_BACKEND_SERVER = process.env.EXPO_PUBLIC_USE_AI_BACKEND === 'true';

let genAI = null;
let model = null;

console.log('üîß ConsentFormAI Configuration:');
console.log('- Backend URL:', AI_BACKEND_URL);
console.log('- Use Backend:', USE_BACKEND_SERVER);
console.log('- API Key configured:', !!GEMINI_API_KEY);

// Initialize Gemini AI
const initializeGemini = () => {
  if (!genAI && GEMINI_API_KEY) {
    try {
      genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
      model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
      console.log('‚úì Gemini AI initialized successfully for ConsentForm');
      return true;
    } catch (error) {
      console.error('Failed to initialize Gemini AI for ConsentForm:', error);
      return false;
    }
  }
  return !!genAI;
};

// *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ***
export const fetchUserProfileData = async () => {
  try {
    const user = auth.currentUser;
    if (!user) {
      console.warn('‚ö†Ô∏è No authenticated user found');
      return null;
    }

    console.log('üì• Fetching user profile data from Firebase...');
    const userDoc = await getDoc(doc(db, "users", user.uid));
    
    if (!userDoc.exists()) {
      console.warn('‚ö†Ô∏è User document not found');
      return null;
    }

    const userData = userDoc.data();
    console.log('‚úÖ User profile data fetched successfully');
    
    return {
      student: {
        name: userData.name || null,
        citizen_id: userData.citizen_id || null,
        birth_date: userData.birth_date || null,
        phone_num: userData.phone_num || null,
        email: userData.email || null,
        address_current: userData.address_current || null,
        address_perm: userData.address_perm || null,
      },
      father: {
        name: userData.father_info?.name || null,
        citizen_id: userData.father_info?.citizen_id || null,
        birth_date: userData.father_info?.birth_date || null,
        phone_number: userData.father_info?.phone_number || null,
        email: userData.father_info?.email || null,
        address_perm: userData.father_info?.address_perm || null,
        address_current: userData.father_info?.address_current || null,
      },
      mother: {
        name: userData.mother_info?.name || null,
        citizen_id: userData.mother_info?.citizen_id || null,
        birth_date: userData.mother_info?.birth_date || null,
        phone_number: userData.mother_info?.phone_number || null,
        email: userData.mother_info?.email || null,
        address_perm: userData.mother_info?.address_perm || null,
        address_current: userData.mother_info?.address_current || null,
      },
      guardian: {
        name: userData.guardian_info?.name || null,
        citizen_id: userData.guardian_info?.citizen_id || null,
        birth_date: userData.guardian_info?.birth_date || null,
        phone_number: userData.guardian_info?.phone_number || null,
        email: userData.guardian_info?.email || null,
        address_perm: userData.guardian_info?.address_perm || null,
        address_current: userData.guardian_info?.address_current || null,
      }
    };
  } catch (error) {
    console.error('‚ùå Error fetching user profile data:', error);
    return null;
  }
};

// *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å platform ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ***
const formatDateForDisplay = (date) => {
  if (!date) return null;
  
  // *** ‡πÄ‡∏û‡∏¥‡πà‡∏° Log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤ ***
  console.log('formatDateForDisplay received input:', date);
  
  let d = date;
  if (date.toDate) {
    d = date.toDate();
  } else if (typeof date === 'string') {
    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Date object
    const parts = date.split(/[\/\-\s]/); // ‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ /, - ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
    if (parts.length === 3) {
      let day = parseInt(parts[0], 10);
      let month = parseInt(parts[1], 10) - 1; // JavaScript months are 0-11
      let year = parseInt(parts[2], 10);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2500)
      if (year > 2500) {
        year -= 543; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ ‡∏Ñ.‡∏®.
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!isNaN(day) && !isNaN(month) && !isNaN(year)) {
        d = new Date(year, month, day);
      } else {
        d = new Date(date); // ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      }
    } else {
      d = new Date(date); // ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    }
  } else if (typeof date === 'number') {
    d = new Date(date * 1000); // Convert timestamp to milliseconds
  }
  
  if (isNaN(d.getTime())) {
    console.warn('Invalid date after parsing:', date);
    return null;
  }
  
  // ‡πÅ‡∏¢‡∏Å‡∏ß‡∏±‡∏ô ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏õ‡∏µ
  const day = d.getDate();
  const month = d.getMonth() + 1; // getMonth() returns 0-11
  const year = d.getFullYear() + 543; // Convert to Buddhist year
  
  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
  const thaiMonths = [
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  ];
  const thaiMonth = thaiMonths[month - 1];
  
  return `${day} ${thaiMonth} ${year}`;
};

// *** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ***
const formatAddressForDisplay = (address) => {
  if (!address) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  
  // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô String ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏¢
  if (typeof address === 'string') {
    return address;
  }
  
  // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô Object ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
  if (typeof address === 'object') {
    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏∑‡∏≠ { houseNumber, street, subdistrict, district, province, postalCode }
    const parts = [
      address.houseNumber || address.house_no,
      address.street || address.road,
      address.subDistrict || address.sub_district,
      address.district,
      address.province,
      address.postalCode || address.zipcode
    ];
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
    return parts.filter(part => part && part.trim() !== '').join(' ');
  }
  
  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ó‡∏±‡πâ‡∏á String ‡πÅ‡∏•‡∏∞ Object ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
  return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
};

// *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ü‡∏≠‡∏£‡πå‡∏° ***
const compareWithProfile = (extractedData, profileData, formType) => {
  if (!profileData || !extractedData) {
    return {
      matchStatus: 'no_profile_data',
      matches: {},
      mismatches: [],
      warnings: ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö']
    };
  }

  const relevantProfile = profileData[formType];
  if (!relevantProfile) {
    return {
      matchStatus: 'no_profile_data',
      matches: {},
      mismatches: [],
      warnings: [`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${formType}`]
    };
  }

  const matches = {};
  const mismatches = [];
  const warnings = [];

  // Helper function to normalize text
  const normalizeText = (text) => {
    if (!text) return '';
    return text.toString().trim().toLowerCase()
      .replace(/\s+/g, ' ')
      .replace(/[^\u0E00-\u0E7Fa-z0-9\s]/g, '');
  };

  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô normalizeAddress ‡πÉ‡∏´‡πâ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Log ***
  const normalizeAddress = (address) => {
    if (!address) return '';
    // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô normalize
    const textAddr = formatAddressForDisplay(address);
    
    // *** ‡πÄ‡∏û‡∏¥‡πà‡∏° Log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö ***
    console.log('üîç Normalizing Address (Input):', textAddr);
    
    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏¢‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
    let normalized = textAddr
      .replace(/‡∏ñ‡∏ô‡∏ô\.?/g, '‡∏ñ‡∏ô‡∏ô') // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ "‡∏ñ‡∏ô‡∏ô." ‡πÅ‡∏•‡∏∞ "‡∏ñ‡∏ô‡∏ô"
      .replace(/‡∏ñ\./g, '‡∏ñ‡∏ô‡∏ô')   // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ "‡∏ñ."
      .replace(/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠\.?/g, '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠') // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠." ‡πÅ‡∏•‡∏∞ "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠"
      .replace(/‡∏≠\./g, '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠')      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ "‡∏≠."
      .replace(/‡∏ï‡∏≥‡∏ö‡∏•\.?/g, '‡∏ï‡∏≥‡∏ö‡∏•') // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ "‡∏ï‡∏≥‡∏ö‡∏•." ‡πÅ‡∏•‡∏∞ "‡∏ï‡∏≥‡∏ö‡∏•"
      .replace(/‡∏ï\./g, '‡∏ï‡∏≥‡∏ö‡∏•')      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ "‡∏ï."
      .replace(/‡πÅ‡∏Ç‡∏ß‡∏á\.?/g, '‡πÅ‡∏Ç‡∏ß‡∏á') // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ "‡πÅ‡∏Ç‡∏ß‡∏á." ‡πÅ‡∏•‡∏∞ "‡πÅ‡∏Ç‡∏ß‡∏á"
      .replace(/‡πÄ‡∏Ç‡∏ï\.?/g, '‡πÄ‡∏Ç‡∏ï')     // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ "‡πÄ‡∏Ç‡∏ï." ‡πÅ‡∏•‡∏∞ "‡πÄ‡∏Ç‡∏ï"
      .replace(/‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î\.?/g, '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î') // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î." ‡πÅ‡∏•‡∏∞ "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
      .replace(/‡∏à\./g, '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î')     // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ "‡∏à."
      .replace(/‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå\.?/g, '‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå') // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ "‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå."
      .replace(/‡∏£\.?‡∏õ\./g, '‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå'); // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ "‡∏£.‡∏õ."
    
    // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ normalize ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
    normalized = normalizeText(normalized);
    
    console.log('üîç Normalizing Address (Output):', normalized);
    
    return normalized;
  };

  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏õ‡∏µ ‡∏û.‡∏®. ***
  const compareDates = (date1, date2) => {
    if (!date1 || !date2) return false;
    
    let d1 = date1;
    let d2 = date2;
    
    if (date1.toDate) d1 = date1.toDate();
    if (date2.toDate) d2 = date2.toDate();
    
    if (typeof d1 === 'string') {
      const parts1 = d1.split(/[\/\-\s]/);
      if (parts1.length === 3) {
        let year1 = parseInt(parts1[2], 10);
        if (year1 > 2500) year1 -= 543;
        d1 = new Date(year1, parseInt(parts1[1], 10) - 1, parseInt(parts1[0], 10));
      } else {
        d1 = new Date(d1);
      }
    }
    if (typeof d2 === 'string') {
      const parts2 = d2.split(/[\/\-\s]/);
      if (parts2.length === 3) {
        let year2 = parseInt(parts2[2], 10);
        if (year2 > 2500) year2 -= 543;
        d2 = new Date(year2, parseInt(parts2[1], 10) - 1, parseInt(parts2[0], 10));
      } else {
        d2 = new Date(d2);
      }
    }
    
    if (typeof d1 === 'number') d1 = new Date(d1 * 1000);
    if (typeof d2 === 'number') d2 = new Date(d2 * 1000);
    
    if (isNaN(d1.getTime()) || isNaN(d2.getTime())) return false;

    return d1.getFullYear() === d2.getFullYear() &&
           d1.getMonth() === d2.getMonth() &&
           d1.getDate() === d2.getDate();
  };

  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ***
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
  const extractKeyElements = (addr) => {
    if (!addr) return { district: '', amphoe: '', province: '', postalCode: '' };
    const textAddr = formatAddressForDisplay(addr);
    const districtMatch = textAddr.match(/(?:‡∏ï‡∏≥‡∏ö‡∏•|‡πÅ‡∏Ç‡∏ß‡∏á)\s*([^\s,]+)/);
    const amphoeMatch = textAddr.match(/(?:‡∏≠‡∏≥‡πÄ‡∏†‡∏≠|‡πÄ‡∏Ç‡∏ï)\s*([^\s,]+)/);
    const provinceMatch = textAddr.match(/‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î\s*([^\s,]+)/);
    const postalCodeMatch = textAddr.match(/(\d{5})/);
    
    return {
      district: districtMatch ? districtMatch[1] : '',
      amphoe: amphoeMatch ? amphoeMatch[1] : '',
      province: provinceMatch ? provinceMatch[1] : '',
      postalCode: postalCodeMatch ? postalCodeMatch[1] : ''
    };
  };

  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
  const compareAddresses = (addr1, addr2) => {
    if (!addr1 || !addr2) return false;
    
    const norm1 = normalizeAddress(addr1);
    const norm2 = normalizeAddress(addr2);
    
    console.log('üîç Comparing Addresses:');
    console.log('- Normalized Address 1 (from document):', norm1);
    console.log('- Normalized Address 2 (from profile):', norm2);
    
    // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πä‡∏∞‡πÜ)
    if (norm1 === norm2 || norm1.includes(norm2) || norm2.includes(norm1)) {
      console.log('- Is Match: Direct string match');
      return true;
    }
    
    // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 2: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    console.log('- Direct string match failed, trying key element comparison...');
    const key1 = extractKeyElements(norm1);
    const key2 = extractKeyElements(norm2);
    
    console.log('- Key elements from document:', key1);
    console.log('- Key elements from profile:', key2);

    const districtMatch = !key1.district || !key2.district || key1.district === key2.district;
    const amphoeMatch = !key1.amphoe || !key2.amphoe || key1.amphoe === key2.amphoe;
    const provinceMatch = !key1.province || !key2.province || key1.province === key2.province;
    const postalCodeMatch = !key1.postalCode || !key2.postalCode || key1.postalCode === key2.postalCode;
    
    // ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    if (districtMatch && amphoeMatch && provinceMatch && postalCodeMatch) {
      console.log('- Is Match: Key elements match');
      return true;
    }
    
    console.log('- Is Match: No match');
    return false;
  };

  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏î‡∏¢‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ ***
  const removeTitle = (name) => {
    let n = name;
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    n = n.replace(/^‡∏ô\.‡∏™\.?\s?/, '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß ');
    n = n.replace(/^‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß\s?/, '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß ');
    n = n.replace(/^‡∏ô‡∏≤‡∏á\s?/, '‡∏ô‡∏≤‡∏á ');
    n = n.replace(/^‡∏ô‡∏≤‡∏¢\s?/, '‡∏ô‡∏≤‡∏¢ ');
    n = n.replace(/^‡∏î\.‡∏ä\.?\s?/, '‡πÄ‡∏î‡πá‡∏Å‡∏ä‡∏≤‡∏¢ ');
    n = n.replace(/^‡∏î\.‡∏ç\.?\s?/, '‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏ç‡∏¥‡∏á ');
    return n.trim();
  };

  // Compare name
  if (extractedData.name && relevantProfile.name) {
    const extractedName = normalizeText(removeTitle(extractedData.name));
    const profileName = normalizeText(removeTitle(relevantProfile.name));
    
    if (extractedName === profileName) {
      matches.name = true;
    } else if (extractedName.includes(profileName) || profileName.includes(extractedName)) {
      matches.name = true;
      warnings.push('‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
    } else {
      matches.name = false;
      mismatches.push({
        field: '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
        extracted: extractedData.name,
        profile: relevantProfile.name
      });
    }
  }

  // Compare citizen ID
  if (extractedData.idCard && relevantProfile.citizen_id) {
    const extractedId = extractedData.idCard.replace(/\D/g, '');
    const profileId = relevantProfile.citizen_id.replace(/\D/g, '');
    
    if (extractedId === profileId) {
      matches.citizen_id = true;
    } else {
      matches.citizen_id = false;
      mismatches.push({
        field: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô',
        extracted: extractedData.idCard,
        profile: relevantProfile.citizen_id
      });
    }
  }

  // Compare birth date
  if (extractedData.birthDate && relevantProfile.birth_date) {
    if (compareDates(extractedData.birthDate, relevantProfile.birth_date)) {
      matches.birth_date = true;
    } else {
      matches.birth_date = false;
      mismatches.push({
        field: '‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î',
        extracted: formatDateForDisplay(extractedData.birthDate), // *** ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ***
        profile: formatDateForDisplay(relevantProfile.birth_date) // *** ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ***
      });
    }
  }

  // Compare phone number
  if (extractedData.phone && (relevantProfile.phone_num || relevantProfile.phone_number)) {
    const extractedPhone = extractedData.phone.replace(/\D/g, '');
    const profilePhone = (relevantProfile.phone_num || relevantProfile.phone_number).replace(/\D/g, '');
    
    if (extractedPhone === profilePhone) {
      matches.phone = true;
    } else {
      matches.phone = false;
      mismatches.push({
        field: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå',
        extracted: extractedData.phone,
        profile: relevantProfile.phone_num || relevantProfile.phone_number
      });
    }
  }

  // Compare email
  if (extractedData.email && relevantProfile.email) {
    const extractedEmail = normalizeText(extractedData.email);
    const profileEmail = normalizeText(relevantProfile.email);
    
    if (extractedEmail === profileEmail) {
      matches.email = true;
    } else {
      matches.email = false;
      mismatches.push({
        field: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•',
        extracted: extractedData.email,
        profile: relevantProfile.email
      });
    }
  }

  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÅ‡∏¢‡∏Å‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ***
  if (extractedData.address && (relevantProfile.address_perm || relevantProfile.address_current)) {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    const isCurrentAddressForm = ['father', 'mother', 'guardian'].includes(formType);

    if (isCurrentAddressForm) {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏¥‡∏î‡∏≤, ‡∏°‡∏≤‡∏£‡∏î‡∏≤, ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const matchesCurrent = compareAddresses(extractedData.address, relevantProfile.address_current);

      if (matchesCurrent) {
        matches.address = true;
      } else {
        matches.address = false;
        const profileAddrCurrentText = formatAddressForDisplay(relevantProfile.address_current) || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
        mismatches.push({
          field: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà',
          extracted: formatAddressForDisplay(extractedData.address),
          profile: `‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: "${profileAddrCurrentText}"`
        });
      }
    } else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
      const matchesPerm = compareAddresses(extractedData.address, relevantProfile.address_perm);
      const matchesCurrent = compareAddresses(extractedData.address, relevantProfile.address_current);

      if (matchesPerm || matchesCurrent) {
        matches.address = true;
        if (!matchesPerm && matchesCurrent) {
          warnings.push('‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå');
        } else if (matchesPerm && !matchesCurrent) {
          warnings.push('‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå');
        }
      } else {
        matches.address = false;
        const profileAddrPermText = formatAddressForDisplay(relevantProfile.address_perm) || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
        const profileAddrCurrentText = formatAddressForDisplay(relevantProfile.address_current) || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
        
        mismatches.push({
          field: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà',
          extracted: formatAddressForDisplay(extractedData.address),
          profile: `‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô: "${profileAddrPermText}" | ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: "${profileAddrCurrentText}"`
        });
      }
    }
  }

  // Determine overall match status
  let matchStatus = 'full_match';
  if (mismatches.length > 0) {
    matchStatus = 'mismatch';
  } else if (warnings.length > 0) {
    matchStatus = 'partial_match';
  } else if (Object.keys(matches).length === 0) {
    matchStatus = 'insufficient_data';
    warnings.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö');
  }

  return {
    matchStatus,
    matches,
    mismatches,
    warnings,
    comparisonDetails: {
      fieldsCompared: Object.keys(matches).length,
      fieldsMatched: Object.values(matches).filter(v => v === true).length,
      fieldsMismatched: mismatches.length
    }
  };
};

// Check backend server
const checkBackendServer = async () => {
  try {
    console.log('üîç Checking backend server at:', AI_BACKEND_URL);
    const response = await fetch(`${AI_BACKEND_URL}/health`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      timeout: 10000,
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úì AI Backend Server is available:', data.status);
      return true;
    }
    return false;
  } catch (error) {
    console.log('‚ùå AI Backend Server not available:', error.message);
    return false;
  }
};

// Server-side validation
const validateConsentFormViaServer = async (fileUri, formType, mimeType, profileData) => {
  try {
    console.log(`üì§ Uploading to server for ${formType} consent validation...`);
    
    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) throw new Error('File does not exist');

    const formData = new FormData();
    const file = {
      uri: fileUri,
      type: mimeType || 'image/jpeg',
      name: `consent_${formType}_${Date.now()}.${mimeType ? mimeType.split('/')[1] : 'jpg'}`,
    };
    
    formData.append('document', file);
    if (profileData) {
      formData.append('profileData', JSON.stringify(profileData));
    }

    const response = await fetch(`${AI_BACKEND_URL}/ai/validate/consent/${formType}`, {
      method: 'POST',
      body: formData,
      headers: { 'Content-Type': 'multipart/form-data' },
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Server returned ${response.status}: ${errorText}`);
    }

    const result = await response.json();
    console.log('‚úÖ Server ConsentForm validation completed');
    return result.validation;
  } catch (error) {
    console.error('‚ùå Server ConsentForm validation error:', error);
    throw error;
  }
};

// Prepare file for Gemini
const prepareFileForGemini = async (fileUri, mimeType) => {
  try {
    console.log('üìÅ Preparing ConsentForm file for Gemini AI...');
    
    const base64Data = await FileSystem.readAsStringAsync(fileUri, {
      encoding: FileSystem.EncodingType.Base64,
    });

    let actualMimeType = mimeType || 'image/jpeg';
    if (!mimeType) {
      const ext = fileUri.split('.').pop()?.toLowerCase();
      if (ext === 'png') actualMimeType = 'image/png';
      else if (ext === 'pdf') actualMimeType = 'application/pdf';
    }

    console.log('‚úÖ ConsentForm file prepared for Gemini');
    return {
      inlineData: {
        data: base64Data,
        mimeType: actualMimeType,
      },
    };
  } catch (error) {
    console.error('‚ùå Error preparing ConsentForm file:', error);
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ: ${error.message}`);
  }
};

// *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ù‡∏±‡πà‡∏á‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ü‡∏≠‡∏£‡πå‡∏° ***
const validateConsentFormClientSide = async (fileUri, formType, mimeType, profileData) => {
  console.log(`ü§ñ Starting client-side ${formType} consent validation...`);
  
  if (!model) {
    const initialized = initializeGemini();
    if (!initialized) throw new Error('‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
  }

  const filePart = await prepareFileForGemini(fileUri, mimeType);

  const formTypeText = {
    'student': '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
    'father': '‡∏ö‡∏¥‡∏î‡∏≤',
    'mother': '‡∏°‡∏≤‡∏£‡∏î‡∏≤',
    'guardian': '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á'
  };

  let profileInfo = '';
  if (profileData && profileData[formType]) {
    const profile = profileData[formType];
    profileInfo = `

**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:**
- ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${profile.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ${profile.citizen_id || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: ${formatDateForDisplay(profile.birth_date) || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: ${profile.phone_num || profile.phone_number || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${profile.email || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${formatAddressForDisplay(profile.address_perm) || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢`;
  }

  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Prompt ‡πÉ‡∏´‡πâ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ***
  const prompt = `
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á${formTypeText[formType] || '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 ${profileInfo}

**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**
- ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á${formTypeText[formType]}‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- ‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
- **‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dd/mm/yyyy ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏õ‡∏µ ‡∏û.‡∏®. (‡πÄ‡∏ä‡πà‡∏ô 2565) ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ ‡∏Ñ.‡∏®. (2022) ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤**
- **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ "15 ‡∏°.‡∏Ñ. 2565" ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "15/01/2022"**
- **‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (‡∏´‡∏°‡∏π‡πà, ‡∏ã‡∏≠‡∏¢, ‡∏ñ‡∏ô‡∏ô, ‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï, ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î, ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå) ‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå "full" ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢**
- **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: "123 ‡∏´‡∏°‡∏π‡πà 4 ‡∏ã‡∏≠‡∏¢‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡∏ñ‡∏ô‡∏ô‡∏û‡∏´‡∏•‡πÇ‡∏¢‡∏ò‡∏¥‡∏ô ‡∏ï‡∏≥‡∏ö‡∏•‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠ ‡πÄ‡∏Ç‡∏ï‡∏Ñ‡∏•‡∏≠‡∏á‡∏™‡∏≤‡∏°‡∏ß‡∏≤ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ 10110"**

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isConsentForm": true/false,
  "formType": "${formType}",
  "confidence": 0-100,
  "hasConsent": true/false,
  "consentType": "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  "hasSignature": true/false,
  "signatureQuality": "genuine/suspicious/unclear/none",
  "extractedData": {
    "name": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•)",
    "idCard": "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å",
    "idCardValid": true/false,
    "birthDate": "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î (dd/mm/yyyy)",
    "age": "‡∏≠‡∏≤‡∏¢‡∏∏",
    "address": {
      "houseNumber": "‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà",
      "moo": "‡∏´‡∏°‡∏π‡πà",
      "subDistrict": "‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•",
      "district": "‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠",
      "province": "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î",
      "postalCode": "‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå",
      "full": "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏ï‡πá‡∏° (‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢)"
    },
    "phone": "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå",
    "email": "‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
    "consentorRole": "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ú‡∏π‡πâ‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°",
    "roleChecked": true/false,
    "writtenDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠",
    "writtenLocation": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô",
    "signatureName": "‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ï‡πâ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô",
    "signatureMatchesName": true/false
  },
  "dataCompleteness": {
    "hasFullName": true/false,
    "hasValidIdCard": true/false,
    "hasBirthDateOrAge": true/false,
    "hasCompleteAddress": true/false,
    "hasContactInfo": true/false,
    "hasRoleSelection": true/false,
    "hasWrittenDate": true/false,
    "hasWrittenLocation": true/false,
    "hasSignature": true/false,
    "hasSignatureName": true/false,
    "completenessScore": 0-100
  },
  "consentDetails": ["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°"],
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"],
  "overall_status": "valid/invalid/needs_review"
}

**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**
1. ‡∏ä‡∏∑‡πà‡∏≠‚Äì‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
2. ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å
3. ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏
4. ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô)
5. ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•
6. ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ (‚òë) ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
7. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
8. ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
9. ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
10. ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡πÉ‡∏ï‡πâ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô

**‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:**
- overall_status = "valid" ‡πÄ‡∏°‡∏∑‡πà‡∏≠ completenessScore >= 90 ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô
- overall_status = "needs_review" ‡πÄ‡∏°‡∏∑‡πà‡∏≠ completenessScore 70-89
- overall_status = "invalid" ‡πÄ‡∏°‡∏∑‡πà‡∏≠ completenessScore < 70
`;

  try {
    const result = await model.generateContent([prompt, filePart]);
    const response = await result.response;
    const responseText = response.text();

    console.log('ü§ñ ConsentForm AI Response received');

    let parsed;
    try {
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        parsed = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('No JSON found');
      }
    } catch (parseError) {
      console.warn('‚ö†Ô∏è Failed to parse JSON, using text analysis');
      parsed = analyzeConsentTextResponse(responseText, formType);
    }

    // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ***
    if (parsed.extractedData?.birthDate) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô timestamp ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      if (typeof parsed.extractedData.birthDate === 'number') {
        parsed.extractedData.birthDate = formatDateForDisplay(parsed.extractedData.birthDate);
      }
    }

    // Add profile comparison
    if (profileData) {
      const comparison = compareWithProfile(parsed.extractedData, profileData, formType);
      parsed.profileComparison = comparison;

      // Add comparison results to recommendations
      if (comparison.mismatches.length > 0) {
        parsed.recommendations = parsed.recommendations || [];
        comparison.mismatches.forEach(mismatch => {
          parsed.recommendations.push(
            `${mismatch.field}‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£="${mismatch.extracted}" ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå="${mismatch.profile}"`
          );
        });
        
        if (parsed.overall_status === 'valid') {
          parsed.overall_status = 'needs_review';
        }
      }

      if (comparison.warnings.length > 0) {
        parsed.recommendations = parsed.recommendations || [];
        parsed.recommendations.push(...comparison.warnings);
      }
    }

    console.log('‚úÖ Client-side ConsentForm validation completed');
    return parsed;
  } catch (error) {
    console.error('‚ùå Client-side validation failed:', error);
    throw error;
  }
};

// Fallback text analysis
const analyzeConsentTextResponse = (text, formType) => {
  const lowerText = text.toLowerCase();
  
  const isConsentForm = lowerText.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°') || 
                       lowerText.includes('‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•') ||
                       lowerText.includes('consent');
  
  const hasSignature = lowerText.includes('‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô') || 
                      lowerText.includes('signature');

  return {
    isConsentForm,
    formType,
    confidence: isConsentForm ? 75 : 25,
    hasConsent: isConsentForm,
    consentType: isConsentForm ? '‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' : '',
    hasSignature,
    signatureQuality: hasSignature ? 'unclear' : 'none',
    extractedData: {},
    dataCompleteness: {
      completenessScore: isConsentForm ? 50 : 0
    },
    consentDetails: isConsentForm ? ['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'] : [],
    recommendations: !isConsentForm ? ['‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°'] : [],
    overall_status: isConsentForm && hasSignature ? 'valid' : 'needs_review',
    rawResponse: text
  };
};

// *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ***
export const validateConsentForm = async (fileUri, formType = 'student', mimeType = null, includeProfileCheck = true) => {
  try {
    console.log(`üöÄ Starting ${formType} consent form validation...`);

    const validFormTypes = ['student', 'father', 'mother', 'guardian'];
    if (!validFormTypes.includes(formType)) {
      throw new Error(`‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${formType}`);
    }

    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) {
      throw new Error('‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö');
    }

    // Fetch profile data if requested
    let profileData = null;
    if (includeProfileCheck) {
      profileData = await fetchUserProfileData();
      if (profileData) {
        console.log('‚úÖ Profile data loaded for comparison');
      }
    }

    // Try server-side validation first
    if (USE_BACKEND_SERVER) {
      try {
        const serverAvailable = await checkBackendServer();
        if (serverAvailable) {
          console.log('‚úÖ Using server-side validation');
          return await validateConsentFormViaServer(fileUri, formType, mimeType, profileData);
        }
      } catch (serverError) {
        console.log('‚ö†Ô∏è Server validation failed, using client-side');
      }
    }

    // Fall back to client-side
    console.log('‚úÖ Using client-side validation');
    return await validateConsentFormClientSide(fileUri, formType, mimeType, profileData);

  } catch (error) {
    console.error('‚ùå ConsentForm validation error:', error);
    throw new Error(`‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
  }
};

// Parse result
export const parseConsentFormResult = (result) => {
  if (!result) return null;

  return {
    isValid: result.overall_status === 'valid' && 
             result.isConsentForm &&
             (result.profileComparison?.matchStatus !== 'mismatch'),
    confidence: result.confidence || 0,
    status: result.overall_status || 'unknown',
    formType: result.formType || 'unknown',
    hasConsent: result.hasConsent || false,
    consentType: result.consentType || '',
    hasSignature: result.hasSignature || false,
    signatureQuality: result.signatureQuality || 'none',
    extractedData: result.extractedData || {},
    dataCompleteness: result.dataCompleteness || {},
    profileComparison: result.profileComparison || null,
    consentDetails: result.consentDetails || [],
    recommendations: result.recommendations || [],
    rawResult: result
  };
};

// *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ***
export const showConsentFormValidationAlert = (result, onAccept, onReject) => {
  let title, message;

  const profileMismatch = result.profileComparison?.matchStatus === 'mismatch';
  const incompleteness = result.dataCompleteness?.completenessScore < 90;
  
  if (profileMismatch) {
    title = '‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå';
  } else if (incompleteness) {
    title = '‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô';
  } else if (result.overall_status === 'valid') {
    title = '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
  } else {
    title = '‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤';
  }
  
  let statusText = '';
  statusText += result.isConsentForm ? '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°\n' : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°\n';

  if (result.hasSignature) {
    statusText += `‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô (${result.signatureQuality})\n`;
  } else {
    statusText += '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô\n';
  }

  // Data completeness
  if (result.dataCompleteness) {
    statusText += `\nüìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ${result.dataCompleteness.completenessScore}%\n`;
    if (result.dataCompleteness.completenessScore >= 90) {
      statusText += '‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô\n';
    } else if (result.dataCompleteness.completenessScore >= 70) {
      statusText += '‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô\n';
    } else {
      statusText += '‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô\n';
    }
  }

  statusText += `\nüéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${result.confidence}%`;
  statusText += `\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${result.formType}`;

  // Extracted data summary
  if (result.extractedData && Object.keys(result.extractedData).length > 0) {
    statusText += '\n\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö:';
    if (result.extractedData.name) statusText += `\n‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠: ${result.extractedData.name}`;
    if (result.extractedData.idCard) statusText += `\n‚Ä¢ ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£: ${result.extractedData.idCard}`;
    if (result.extractedData.birthDate) statusText += `\n‚Ä¢ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: ${result.extractedData.birthDate}`;
    if (result.extractedData.phone) statusText += `\n‚Ä¢ ‡πÇ‡∏ó‡∏£: ${result.extractedData.phone}`;
    if (result.extractedData.email) statusText += `\n‚Ä¢ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${result.extractedData.email}`;
    if (result.extractedData.address) statusText += `\n‚Ä¢ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${formatAddressForDisplay(result.extractedData.address)}`; // *** ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ***
  }

  // Profile comparison
  if (result.profileComparison) {
    const comp = result.profileComparison;
    statusText += '\n\nüë§ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:\n';
    
    if (comp.matchStatus === 'full_match') {
      statusText += '‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£\n';
    } else if (comp.matchStatus === 'partial_match') {
      statusText += '‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô\n';
    } else if (comp.matchStatus === 'mismatch') {
      statusText += '‚ùå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô:\n';
      comp.mismatches.forEach(m => {
        statusText += `  ‚Ä¢ ${m.field}\n`;
        statusText += `    ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${m.extracted}\n`;
        statusText += `    ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ${m.profile}\n`;
      });
    }
    
    if (comp.comparisonDetails) {
      statusText += `\n‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö: ${comp.comparisonDetails.fieldsMatched}/${comp.comparisonDetails.fieldsCompared} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`;
    }
  }

  if (result.consentDetails?.length > 0) {
    statusText += '\n\nüìÑ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°:\n‚Ä¢ ' + result.consentDetails.join('\n‚Ä¢ ');
  }

  if (result.recommendations?.length > 0) {
    statusText += '\n\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n‚Ä¢ ' + result.recommendations.join('\n‚Ä¢ ');
  }

  message = statusText;
  
  const isValid = result.overall_status === 'valid' && 
                 result.isConsentForm &&
                 !profileMismatch &&
                 !incompleteness;

  const buttons = [
    {
      text: '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
      style: 'cancel',
      onPress: onReject,
    },
  ];

  if (profileMismatch || incompleteness) {
    buttons.push({
      text: '‡∏ï‡∏Å‡∏•‡∏á',
      style: 'default',
      onPress: onReject,
    });
  } else if (isValid || result.overall_status === 'needs_review') {
    buttons.push({
      text: result.overall_status === 'valid' ? '‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ' : '‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)',
      onPress: () => onAccept(result),
    });
  }

  Alert.alert(title, message, buttons);
};

// Get consent form type display name
export const getConsentFormTypeName = (formType) => {
  const formTypeNames = {
    'student': '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
    'father': '‡∏ö‡∏¥‡∏î‡∏≤',
    'mother': '‡∏°‡∏≤‡∏£‡∏î‡∏≤',
    'guardian': '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á'
  };
  return formTypeNames[formType] || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
};

// Format data for database
export const formatConsentFormDataForDB = (result, documentType, fileName) => {
  return {
    documentType: documentType,
    fileName: fileName,
    
    basicInfo: {
      isValid: result.isValid || false,
      confidence: result.confidence || 0,
      overall_status: result.overall_status || 'unknown',
      formType: result.formType || 'unknown',
      hasConsent: result.hasConsent || false,
      consentType: result.consentType || '',
    },
    
    signatureInfo: {
      hasSignature: result.hasSignature || false,
      signatureQuality: result.signatureQuality || 'none',
    },
    
    extractedData: {
      name: result.extractedData?.name || null,
      idCard: result.extractedData?.idCard || null,
      idCardValid: result.extractedData?.idCardValid || false,
      birthDate: result.extractedData?.birthDate || null,
      age: result.extractedData?.age || null,
      address: result.extractedData?.address || null,
      phone: result.extractedData?.phone || null,
      email: result.extractedData?.email || null,
      consentorRole: result.extractedData?.consentorRole || null,
      roleChecked: result.extractedData?.roleChecked || false,
      writtenDate: result.extractedData?.writtenDate || null,
      writtenLocation: result.extractedData?.writtenLocation || null,
      signatureName: result.extractedData?.signatureName || null,
      signatureMatchesName: result.extractedData?.signatureMatchesName || false,
    },
    
    dataCompleteness: result.dataCompleteness || {},

    profileComparison: result.profileComparison ? {
      matchStatus: result.profileComparison.matchStatus,
      matches: result.profileComparison.matches,
      mismatches: result.profileComparison.mismatches,
      warnings: result.profileComparison.warnings,
      comparisonDetails: result.profileComparison.comparisonDetails
    } : null,
    
    consentDetails: result.consentDetails || [],
    recommendations: result.recommendations || [],
    
    metadata: {
      validatedAt: new Date().toISOString(),
      aiModel: 'gemini-2.0-flash',
      profileCheckEnabled: !!result.profileComparison
    }
  };
};

// Check completeness requirements
export const checkConsentFormRequirements = (result) => {
  if (!result) return { passed: false, issues: ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'] };

  const issues = [];
  
  if (!result.isConsentForm) issues.push('‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°');
  if (!result.hasSignature) issues.push('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô');
  
  if (result.dataCompleteness) {
    if (!result.dataCompleteness.hasFullName) issues.push('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    if (!result.dataCompleteness.hasValidIdCard) issues.push('‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    if (!result.dataCompleteness.hasBirthDateOrAge) issues.push('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏');
    if (!result.dataCompleteness.hasCompleteAddress) issues.push('‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    if (!result.dataCompleteness.hasContactInfo) issues.push('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠');
    if (!result.dataCompleteness.hasRoleSelection) issues.push('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó');
    if (!result.dataCompleteness.hasWrittenDate) issues.push('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô');
    if (!result.dataCompleteness.hasSignatureName) issues.push('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ï‡πâ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô');
  }
  
  if (result.profileComparison?.matchStatus === 'mismatch') {
    issues.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå');
  }

  return {
    passed: issues.length === 0,
    issues: issues,
    requirements: {
      isConsentForm: result.isConsentForm,
      hasSignature: result.hasSignature,
      dataComplete: result.dataCompleteness?.completenessScore >= 90,
      profileMatches: result.profileComparison?.matchStatus !== 'mismatch'
    }
  };
};

// Generate summary
export const generateConsentFormSummary = (result) => {
  if (!result) return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö';

  const requirements = checkConsentFormRequirements(result);
  
  let summary = `üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°\n\n`;
  summary += `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${result.overall_status === 'valid' ? '‚úÖ ‡∏ú‡πà‡∏≤‡∏ô' : result.overall_status === 'needs_review' ? '‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' : '‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'}\n`;
  summary += `‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getConsentFormTypeName(result.formType)}\n`;
  summary += `‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${result.confidence}%\n`;
  
  if (result.dataCompleteness) {
    summary += `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ${result.dataCompleteness.completenessScore}%\n`;
  }

  summary += `\n‚úÖ ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î:\n`;
  summary += `${requirements.requirements.isConsentForm ? '‚úÖ' : '‚ùå'} ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°\n`;
  summary += `${requirements.requirements.hasSignature ? '‚úÖ' : '‚ùå'} ‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô\n`;
  summary += `${requirements.requirements.dataComplete ? '‚úÖ' : '‚ùå'} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô\n`;
  summary += `${requirements.requirements.profileMatches ? '‚úÖ' : '‚ùå'} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå\n`;

  if (result.extractedData && Object.keys(result.extractedData).length > 0) {
    summary += `\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:\n`;
    if (result.extractedData.name) summary += `‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠: ${result.extractedData.name}\n`;
    if (result.extractedData.idCard) summary += `‚Ä¢ ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£: ${result.extractedData.idCard}\n`;
    if (result.extractedData.birthDate) summary += `‚Ä¢ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: ${result.extractedData.birthDate}\n`;
    if (result.extractedData.phone) summary += `‚Ä¢ ‡πÇ‡∏ó‡∏£: ${result.extractedData.phone}\n`;
    if (result.extractedData.email) summary += `‚Ä¢ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${result.extractedData.email}\n`;
    if (result.extractedData.writtenDate) summary += `‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô: ${result.extractedData.writtenDate}\n`;
  }

  if (result.profileComparison) {
    summary += `\nüë§ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:\n`;
    const comp = result.profileComparison;
    if (comp.matchStatus === 'full_match') {
      summary += `‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£\n`;
    } else if (comp.matchStatus === 'mismatch') {
      summary += `‚ùå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô:\n`;
      comp.mismatches.forEach(m => {
        summary += `  ‚Ä¢ ${m.field}: ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£="${m.extracted}" ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå="${m.profile}"\n`;
      });
    }
  }

  if (!requirements.passed) {
    summary += `\n‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:\n`;
    requirements.issues.forEach(issue => {
      summary += `‚Ä¢ ${issue}\n`;
    });
  }

  return summary;
};

// Validate multiple consent forms
export const validateMultipleConsentForms = async (files, includeProfileCheck = true) => {
  const results = [];
  
  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    try {
      const result = await validateConsentForm(
        file.uri, 
        file.formType || 'student', 
        file.mimeType,
        includeProfileCheck
      );
      results.push({
        fileIndex: i,
        fileName: file.name || file.filename,
        formType: file.formType || 'student',
        validation: result,
        success: true,
        dataComplete: result.dataCompleteness?.completenessScore >= 90,
        profileMatch: result.profileComparison?.matchStatus !== 'mismatch'
      });
    } catch (error) {
      results.push({
        fileIndex: i,
        fileName: file.name || file.filename,
        formType: file.formType || 'student',
        error: error.message,
        success: false,
        dataComplete: false,
        profileMatch: false
      });
    }
  }
  
  return results;
};

// Check AI backend status
export const checkConsentFormAIStatus = async () => {
  try {
    console.log('ü§ñ Checking ConsentForm AI backend status...');

    if (USE_BACKEND_SERVER) {
      const serverAvailable = await checkBackendServer();
      if (serverAvailable) {
        try {
          const response = await fetch(`${AI_BACKEND_URL}/ai/test`);
          if (response.ok) {
            const data = await response.json();
            return { 
              available: true, 
              method: 'server',
              profileCheckEnabled: true,
              config: {
                backendUrl: AI_BACKEND_URL,
                useBackend: USE_BACKEND_SERVER
              }
            };
          }
        } catch (error) {
          console.log('‚ùå Server test failed:', error.message);
        }
      }
    }

    if (!GEMINI_API_KEY || GEMINI_API_KEY === 'YOUR_GEMINI_API_KEY_HERE') {
      return { 
        available: false, 
        error: 'API key not configured'
      };
    }

    const initialized = initializeGemini();
    if (!initialized) {
      return { 
        available: false, 
        error: 'Failed to initialize AI'
      };
    }

    try {
      const testResult = await model.generateContent("Test connection - respond with OK");
      const testResponse = await testResult.response;
      testResponse.text();
      
      return { 
        available: true, 
        method: 'client',
        profileCheckEnabled: true,
        config: {
          apiKey: '***configured***',
          model: 'gemini-2.0-flash'
        }
      };
    } catch (testError) {
      return { 
        available: false, 
        error: testError.message
      };
    }
    
  } catch (error) {
    return { 
      available: false, 
      error: error.message
    };
  }
};