// documents_ai/IncomeCertAI.js - AI validation for Income Certificate (‡∏Å‡∏¢‡∏® 102) documents
import { GoogleGenerativeAI } from "@google/generative-ai";
import * as FileSystem from 'expo-file-system/legacy';
import { Alert } from 'react-native';
import { doc, getDoc } from "firebase/firestore";
import { db, auth } from "../../../database/firebase";

// Configuration
const GEMINI_API_KEY = process.env.EXPO_PUBLIC_GEMINI_API_KEY;
const AI_BACKEND_URL = process.env.EXPO_PUBLIC_AI_BACKEND_URL || 'http://192.168.1.102:3001';
const USE_BACKEND_SERVER = process.env.EXPO_PUBLIC_USE_AI_BACKEND === 'true';

let genAI = null;
let model = null;

console.log('üîß IncomeCertAI Configuration:');
console.log('- Backend URL:', AI_BACKEND_URL);
console.log('- Use Backend:', USE_BACKEND_SERVER);
console.log('- API Key configured:', !!GEMINI_API_KEY);

// Initialize Gemini AI for client-side processing
const initializeGemini = () => {
  if (!genAI && GEMINI_API_KEY) {
    try {
      genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
      model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });
      console.log('‚úì Gemini AI initialized successfully for IncomeCert');
      return true;
    } catch (error) {
      console.error('Failed to initialize Gemini AI for IncomeCert:', error);
      return false;
    }
  }
  return !!genAI;
};

// *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö livesWithParents ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ***
const fetchUserProfileData = async () => {
  try {
    const user = auth.currentUser;
    if (!user) {
      console.warn('‚ö†Ô∏è No authenticated user found');
      return null;
    }

    console.log('üî• Fetching user profile data from Firebase...');
    const userDoc = await getDoc(doc(db, "users", user.uid));

    if (!userDoc.exists()) {
      console.warn('‚ö†Ô∏è User document not found');
      return null;
    }

    const userData = userDoc.data();
    console.log('‚úÖ User profile data fetched successfully');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ö‡∏¥‡∏î‡∏≤‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ö‡∏¥‡∏î‡∏≤‡∏°‡∏≤‡∏£‡∏î‡∏≤)
    const livesWithParents = userData.livesWithParents !== false;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ö‡∏¥‡∏î‡∏≤‡∏°‡∏≤‡∏£‡∏î‡∏≤
    const guardianData = livesWithParents ? null : {
      name: userData.guardian_info?.name || null,
      citizen_id: userData.guardian_info?.citizen_id || null,
      monthlyIncome: userData.guardian_info?.income || null,
      annualIncome: (userData.guardian_info?.income || 0) * 12,
      occupation: userData.guardian_info?.occupation || null,
    };

    return {
      student: {
        name: userData.name || null,
        studentId: userData.studentId || null,
        citizen_id: userData.citizen_id || null,
      },
      father: {
        name: userData.father_info?.name || null,
        citizen_id: userData.father_info?.citizen_id || null,
        monthlyIncome: userData.father_info?.income || null,
        annualIncome: (userData.father_info?.income || 0) * 12,
        occupation: userData.father_info?.occupation || null,
      },
      mother: {
        name: userData.mother_info?.name || null,
        citizen_id: userData.mother_info?.citizen_id || null,
        monthlyIncome: userData.mother_info?.income || null,
        annualIncome: (userData.mother_info?.income || 0) * 12,
        occupation: userData.mother_info?.occupation || null,
      },
      guardian: guardianData,
      livesWithParents // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    };
  } catch (error) {
    console.error('‚úó Error fetching user profile data:', error);
    return null;
  }
};

// *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ***
const compareIncomeCertWithUserData = (extractedData, profileData, certType) => {
  if (!profileData || !extractedData) {
    return {
      matchStatus: 'no_profile_data',
      matches: {},
      mismatches: [],
      warnings: ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö']
    };
  }

  const normalizeText = (text) => {
    if (!text) return '';
    return text.toString().trim().toLowerCase()
      .replace(/\s+/g, ' ')
      .replace(/[^\u0E00-\u0E7Fa-z0-9\s]/g, '');
  };

  const parseNumber = (value) => {
    if (!value) return 0;
    const str = value.toString().replace(/[^\d]/g, '');
    return parseInt(str, 10) || 0;
  };

  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß (famo_income_cert) ***
  if (certType === 'family' || certType === 'famo_income_cert') {
    console.log('üîç Processing FAMILY income cert - comparing both father and mother');
    const fatherData = extractedData.fatherData || {};
    const motherData = extractedData.motherData || {};
    let fatherComparison = null;
    let motherComparison = null;
    const warnings = [];

    if (profileData.father && profileData.father.name && Object.keys(fatherData).length > 0) {
      fatherComparison = compareSinglePersonData(fatherData, profileData.father, '‡∏ö‡∏¥‡∏î‡∏≤', normalizeText, parseNumber);
    } else if (Object.keys(fatherData).length > 0) {
      warnings.push('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏î‡∏≤‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏î‡∏≤‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå');
    }

    if (profileData.mother && profileData.mother.name && Object.keys(motherData).length > 0) {
      motherComparison = compareSinglePersonData(motherData, profileData.mother, '‡∏°‡∏≤‡∏£‡∏î‡∏≤', normalizeText, parseNumber);
    } else if (Object.keys(motherData).length > 0) {
      warnings.push('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå');
    }

    const allMatches = {};
    if (fatherComparison?.matches) {
      Object.entries(fatherComparison.matches).forEach(([key, value]) => {
        allMatches[`father_${key}`] = value;
      });
    }
    if (motherComparison?.matches) {
      Object.entries(motherComparison.matches).forEach(([key, value]) => {
        allMatches[`mother_${key}`] = value;
      });
    }

    const allMismatches = [...(fatherComparison?.mismatches || []), ...(motherComparison?.mismatches || [])];
    const allWarnings = [...warnings, ...(fatherComparison?.warnings || []), ...(motherComparison?.warnings || [])];

    const fatherFields = fatherComparison?.comparisonDetails?.fieldsCompared || 0;
    const motherFields = motherComparison?.comparisonDetails?.fieldsCompared || 0;
    const totalFields = fatherFields + motherFields;
    const matchedCount = Object.values(allMatches).filter(v => v === true).length;
    const mismatchedCount = allMismatches.length;
    let matchStatus = 'unknown';
    let matchPercentage = 0;

    if (totalFields > 0) {
      matchPercentage = Math.round((matchedCount / totalFields) * 100);
    }

    if (certType === 'famo_income_cert' && mismatchedCount === 0 && allWarnings.length === 0) {
      matchStatus = 'full_match';
      matchPercentage = 100;
    } else if (mismatchedCount === 0 && allWarnings.length === 0) {
      matchStatus = 'full_match';
    } else if (mismatchedCount === 0 && allWarnings.length <= 2) {
      matchStatus = 'good_match';
    } else if (mismatchedCount === 0) {
      matchStatus = 'partial_match';
    } else if (matchPercentage >= 70) {
      matchStatus = 'good_match';
    } else if (matchPercentage >= 50) {
      matchStatus = 'partial_match';
    } else {
      matchStatus = 'mismatch';
    }

    return {
      matchStatus, matches: allMatches, mismatches: allMismatches, warnings: allWarnings,
      comparisonDetails: {
        fieldsCompared: totalFields, fieldsMatched: matchedCount, fieldsMismatched: mismatchedCount,
        personType: '‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß (‡∏ö‡∏¥‡∏î‡∏≤ + ‡∏°‡∏≤‡∏£‡∏î‡∏≤)', fatherComparison, motherComparison
      }, matchPercentage
    };
  }

  if (certType === 'father' || certType === 'father_income_cert') {
    console.log('üîç Processing FATHER income cert');
    if (!profileData.father || !profileData.father.name) {
      return {
        matchStatus: 'no_profile_data',
        matches: {},
        mismatches: [],
        warnings: ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏î‡∏≤‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö']
      };
    }
    return compareSinglePersonData(extractedData, profileData.father, '‡∏ö‡∏¥‡∏î‡∏≤', normalizeText, parseNumber);
  }

  else if (certType === 'mother' || certType === 'mother_income_cert') {
    console.log('üîç Processing MOTHER income cert');
    if (!profileData.mother || !profileData.mother.name) {
      return {
        matchStatus: 'no_profile_data',
        matches: {},
        mismatches: [],
        warnings: ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö']
      };
    }
    return compareSinglePersonData(extractedData, profileData.mother, '‡∏°‡∏≤‡∏£‡∏î‡∏≤', normalizeText, parseNumber);
  }

  // *** ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á (‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á) ***
  else if (certType === 'guardian' || certType === 'guardian_income_cert') {
    console.log('üîç Processing GUARDIAN income cert');
    if (!profileData.guardian || !profileData.guardian.name) {
      return {
        matchStatus: 'no_profile_data',
        matches: {},
        mismatches: [],
        warnings: ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ö‡∏¥‡∏î‡∏≤‡∏°‡∏≤‡∏£‡∏î‡∏≤']
      };
    }
    return compareSinglePersonData(extractedData, profileData.guardian, '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á', normalizeText, parseNumber);
  }

  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö single_parent_income_cert ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏£‡∏î‡∏≤ ***
  else if (certType === 'single_parent' || certType === 'single_parent_income_cert') {
    console.log('üîç Processing SINGLE_PARENT income cert - AI has pre-matched the profile');
    const matchedProfileType = extractedData.matchedProfile;
    if (!matchedProfileType || matchedProfileType === 'unknown') {
      // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° Fallback ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö single_parent ***
      console.log('ü§ñ AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á (Fallback)...');
      
      const extractedName = normalizeText(extractedData.personName || '');
      const fatherName = normalizeText(profileData.father?.name || '');
      const motherName = normalizeText(profileData.mother?.name || '');

      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤
      if (fatherName && (extractedName.includes(fatherName) || fatherName.includes(extractedName))) {
        console.log('‚úÖ ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ö‡∏¥‡∏î‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Fallback)');
        const personLabel = '‡∏ö‡∏¥‡∏î‡∏≤ (‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)';
        return compareSinglePersonData(extractedData, profileData.father, personLabel, normalizeText, parseNumber);
      }
      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤
      else if (motherName && (extractedName.includes(motherName) || motherName.includes(extractedName))) {
        console.log('‚úÖ ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Fallback)');
        const personLabel = '‡∏°‡∏≤‡∏£‡∏î‡∏≤ (‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)';
        return compareSinglePersonData(extractedData, profileData.mother, personLabel, normalizeText, parseNumber);
      }
      // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏°‡∏≤‡∏£‡∏î‡∏≤" ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ ***
      else if (extractedData.rawResponse && normalizeText(extractedData.rawResponse).includes('‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô')) {
        console.log('‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô" ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏°‡∏≤‡∏£‡∏î‡∏≤ (Fallback)');
        const personLabel = '‡∏°‡∏≤‡∏£‡∏î‡∏≤ (‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)';
        return compareSinglePersonData(extractedData, profileData.mother, personLabel, normalizeText, parseNumber);
      }
      // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ö‡∏¥‡∏î‡∏≤" ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ ***
      else if (extractedData.rawResponse && normalizeText(extractedData.rawResponse).includes('‡∏ö‡∏¥‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô')) {
        console.log('‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ö‡∏¥‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô" ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ö‡∏¥‡∏î‡∏≤ (Fallback)');
        const personLabel = '‡∏ö‡∏¥‡∏î‡∏≤ (‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)';
        return compareSinglePersonData(extractedData, profileData.father, personLabel, normalizeText, parseNumber);
      }
      // ‡∏ñ‡πâ‡∏≤‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏£‡∏î‡∏≤
      else {
        console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏•‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á');
        return {
          matchStatus: 'no_match',
          matches: {},
          mismatches: [],
          warnings: ['AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£']
        };
      }
    }
    const profileSection = profileData[matchedProfileType];
    const personLabel = matchedProfileType === 'father' ? '‡∏ö‡∏¥‡∏î‡∏≤ (‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)' : '‡∏°‡∏≤‡∏£‡∏î‡∏≤ (‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)';
    if (!profileSection || !profileSection.name) {
      return {
        matchStatus: 'no_profile_data',
        matches: {},
        mismatches: [],
        warnings: [`‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•${personLabel}‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤ AI ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡πâ‡∏ß`]
      };
    }
    return compareSinglePersonData(extractedData, profileSection, personLabel, normalizeText, parseNumber);
  }

  return {
    matchStatus: 'no_profile_data',
    matches: {},
    mismatches: [],
    warnings: ['‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÑ‡∏î‡πâ']
  };
};

// *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß ‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ ***
const compareSinglePersonData = (extractedData, profileSection, personLabel, normalizeText, parseNumber) => {
  const matches = {};
  const mismatches = [];
  const warnings = [];
  const fieldMapping = [
    { formKey: 'personName', profileKey: 'name', label: `‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ${personLabel}`, normalize: true, required: true },
    { formKey: 'occupation', profileKey: 'occupation', label: `‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ${personLabel}`, normalize: true, required: false, flexibleMatch: true },
    { formKey: 'annualIncome', profileKey: 'annualIncome', label: `‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ ${personLabel}`, normalize: false, required: true, isNumeric: true },
  ];

  fieldMapping.forEach(({ formKey, profileKey, label, normalize, required, isNumeric, flexibleMatch }) => {
    const formValue = extractedData[formKey];
    const profileValue = profileSection[profileKey];
    if (!formValue || formValue === '' || formValue === '-') {
      if (profileValue && required) {
        mismatches.push({ field: formKey, label, extracted: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', profile: profileValue, severity: required ? 'high' : 'low' });
      }
      return;
    }
    if (!profileValue || profileValue === '') {
      if (required) warnings.push(`‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${label} ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö`);
      return;
    }

    let isMatch = false;
    if (isNumeric) {
      const formNum = parseNumber(formValue);
      const profileNum = parseNumber(profileValue);
      const tolerance = profileNum * 0.2;
      if (Math.abs(formNum - profileNum) <= tolerance) {
        isMatch = true;
      } else if (Math.abs(formNum - profileNum) <= profileNum * 0.3) { 
        isMatch = true; 
        warnings.push(`${label} ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô ${Math.abs(formNum - profileNum).toLocaleString()} ‡∏ö‡∏≤‡∏ó`); 
      }
    } else if (normalize) {
      const normalizedForm = normalizeText(formValue);
      const normalizedProfile = normalizeText(profileValue);
      
      if (flexibleMatch) {
        // ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
        const flexibleOccupationMatch = (form, profile) => {
          // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
          if (form === profile) return true;
          
          // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
          if (form.includes(profile) || profile.includes(form)) return true;
          
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
          const relatedOccupations = {
            '‡∏≠‡∏¥‡∏™‡∏£‡∏∞': ['‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß', '‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£', '‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢', '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á', '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡∏¥‡∏™‡∏£‡∏∞', 'freelance'],
            '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß': ['‡∏≠‡∏¥‡∏™‡∏£‡∏∞', '‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£', '‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢', '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á', '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡∏¥‡∏™‡∏£‡∏∞', 'freelance'],
            '‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£': ['‡∏≠‡∏¥‡∏™‡∏£‡∏∞', '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß', '‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢', '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á', '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡∏¥‡∏™‡∏£‡∏∞', 'freelance'],
            '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á': ['‡∏≠‡∏¥‡∏™‡∏£‡∏∞', '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß', '‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£', '‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢', '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡∏¥‡∏™‡∏£‡∏∞', 'freelance'],
            '‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢': ['‡∏≠‡∏¥‡∏™‡∏£‡∏∞', '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß', '‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£', '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á', '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡∏¥‡∏™‡∏£‡∏∞', 'freelance'],
            '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó': ['‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', '‡∏•‡∏π‡∏Å‡∏à‡πâ‡∏≤‡∏á', '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á'],
            '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô': ['‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '‡∏•‡∏π‡∏Å‡∏à‡πâ‡∏≤‡∏á', '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á'],
            '‡∏•‡∏π‡∏Å‡∏à‡πâ‡∏≤‡∏á': ['‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', '‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á'],
            '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£': ['‡∏£‡∏±‡∏ê‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à', '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ê‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à'],
            '‡∏£‡∏±‡∏ê‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à': ['‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£', '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ê‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à'],
            '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ê‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à': ['‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£', '‡∏£‡∏±‡∏ê‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à'],
            '‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£': ['‡πÄ‡∏Å‡∏©‡∏ï‡∏£', '‡∏ó‡∏≥‡∏ô‡∏≤', '‡∏ó‡∏≥‡πÑ‡∏£‡πà', '‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå'],
            '‡πÄ‡∏Å‡∏©‡∏ï‡∏£': ['‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£', '‡∏ó‡∏≥‡∏ô‡∏≤', '‡∏ó‡∏≥‡πÑ‡∏£‡πà', '‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå'],
            '‡∏ó‡∏≥‡∏ô‡∏≤': ['‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£', '‡πÄ‡∏Å‡∏©‡∏ï‡∏£', '‡∏ó‡∏≥‡πÑ‡∏£‡πà', '‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå'],
            '‡∏ó‡∏≥‡πÑ‡∏£‡πà': ['‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£', '‡πÄ‡∏Å‡∏©‡∏ï‡∏£', '‡∏ó‡∏≥‡∏ô‡∏≤', '‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå'],
            '‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå': ['‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£', '‡πÄ‡∏Å‡∏©‡∏ï‡∏£', '‡∏ó‡∏≥‡∏ô‡∏≤', '‡∏ó‡∏≥‡πÑ‡∏£‡πà']
          };
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          for (const [key, related] of Object.entries(relatedOccupations)) {
            if ((form.includes(key) || profile.includes(key)) && 
                related.some(occ => form.includes(occ) || profile.includes(occ))) {
              return true;
            }
          }
          
          return false;
        };
        
        if (flexibleOccupationMatch(normalizedForm, normalizedProfile)) {
          isMatch = true;
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
          if (normalizedForm !== normalizedProfile) {
            warnings.push(`${label} ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô: ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£="${formValue}" ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå="${profileValue}"`);
          }
        }
      } else {
        // ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
        if (normalizedForm === normalizedProfile) isMatch = true;
        else if (normalizedForm.includes(normalizedProfile) || normalizedProfile.includes(normalizedForm)) isMatch = true;
      }
    } else {
      const cleanForm = formValue.toString().replace(/\D/g, '');
      const cleanProfile = profileValue.toString().replace(/\D/g, '');
      isMatch = cleanForm === cleanProfile;
    }

    if (isMatch) matches[formKey] = true;
    else {
      matches[formKey] = false;
      mismatches.push({ field: formKey, label, extracted: formValue, profile: profileValue, severity: required ? 'medium' : 'low' });
    }
  });

  const totalFields = fieldMapping.length;
  const matchedCount = Object.values(matches).filter(v => v === true).length;
  const mismatchedCount = mismatches.length;
  let matchStatus = 'unknown';
  let matchPercentage = 0;

  if (totalFields > 0) matchPercentage = Math.round((matchedCount / totalFields) * 100);

  if (mismatchedCount === 0 && warnings.length === 0) matchStatus = 'full_match';
  else if (mismatchedCount === 0 && warnings.length <= 2) matchStatus = 'good_match';
  else if (mismatchedCount === 0) matchStatus = 'partial_match';
  else if (matchPercentage >= 70) matchStatus = 'good_match';
  else if (matchPercentage >= 50) matchStatus = 'partial_match';
  else matchStatus = 'mismatch';

  return {
    matchStatus, matches, mismatches, warnings,
    comparisonDetails: { fieldsCompared: totalFields, fieldsMatched: matchedCount, fieldsMismatched: mismatchedCount, personType: personLabel },
    matchPercentage
  };
};

// Check if AI backend server is available - ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°
const checkBackendServer = async () => {
  try {
    console.log('üîç Checking backend server for IncomeCert at:', AI_BACKEND_URL);
    const response = await fetch(`${AI_BACKEND_URL}/health`, { method: 'GET', headers: { 'Content-Type': 'application/json', }, timeout: 10000, });
    if (response.ok) { const data = await response.json(); console.log('‚úì AI Backend Server is available for IncomeCert:', data.status); return true; }
    else { console.log('‚ùå Backend server responded with error:', response.status); return false; }
  } catch (error) { console.log('‚ùå AI Backend Server not available for IncomeCert:', error.message); return false; }
};

// Server-side validation for Income Certificate - ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°
const validateIncomeCertViaServer = async (fileUri, certType, mimeType, profileData) => {
  try {
    console.log(`üì§ Uploading to server for ${certType} income cert validation...`);
    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) throw new Error('File does not exist');
    const formData = new FormData();
    const file = { uri: fileUri, type: mimeType || 'image/jpeg', name: `incomecert_${certType}_${Date.now()}.${mimeType ? mimeType.split('/')[1] : 'jpg'}`, };
    formData.append('document', file);
    if (profileData) formData.append('profileData', JSON.stringify(profileData));
    const response = await fetch(`${AI_BACKEND_URL}/ai/validate/incomecert/${certType}`, { method: 'POST', body: formData, headers: { 'Content-Type': 'multipart/form-data', }, });
    if (!response.ok) { const errorText = await response.text(); console.error('Server validation error:', errorText); throw new Error(`Server returned ${response.status}: ${errorText}`); }
    const result = await response.json();
    console.log('‚úÖ Server IncomeCert validation completed');
    return { ...result.validation, requestedCertType: certType };
  } catch (error) { console.error('‚ùå Server IncomeCert validation error:', error); throw error; }
};

// Convert file to format suitable for Gemini (client-side) - ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°
const prepareFileForGemini = async (fileUri, mimeType) => {
  try {
    console.log('üìÅ Preparing IncomeCert file for Gemini AI...');
    const base64Data = await FileSystem.readAsStringAsync(fileUri, { encoding: FileSystem.EncodingType.Base64, });
    let actualMimeType = mimeType;
    if (!actualMimeType) { const fileExtension = fileUri.split('.').pop()?.toLowerCase(); switch (fileExtension) { case 'jpg': case 'jpeg': actualMimeType = 'image/jpeg'; break; case 'png': actualMimeType = 'image/png'; break; case 'pdf': actualMimeType = 'application/pdf'; break; default: actualMimeType = 'image/jpeg'; } }
    console.log('‚úÖ IncomeCert file prepared for Gemini');
    return { inlineData: { data: base64Data, mimeType: actualMimeType, }, };
  } catch (error) { console.error('‚ùå Error preparing IncomeCert file for Gemini:', error); throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ: ${error.message}`); }
};

// *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö Prompt ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö certType ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏Å‡∏±‡∏î‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏õ‡∏µ ***
const validateIncomeCertClientSide = async (fileUri, certType, mimeType, profileData) => {
  console.log(`ü§ñ Starting client-side ${certType} income cert validation...`);
  if (!model) { const initialized = initializeGemini(); if (!initialized) throw new Error('‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'); }
  const filePart = await prepareFileForGemini(fileUri, mimeType);
  const certTypeText = { 
    'father': '‡∏ö‡∏¥‡∏î‡∏≤', 
    'mother': '‡∏°‡∏≤‡∏£‡∏î‡∏≤', 
    'guardian': '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á', 
    'single_parent': '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß', 
    'family': '‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß', 
    'famo_income_cert': '‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß',
    'father_income_cert': '‡∏ö‡∏¥‡∏î‡∏≤ (‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥)',
    'mother_income_cert': '‡∏°‡∏≤‡∏£‡∏î‡∏≤ (‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥)',
    // *** ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á (‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥) ***
    'guardian_income_cert': '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á (‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥)',
    'single_parent_income_cert': '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥)'
  };

  let profileInfo = '';
  if (profileData) {
    if (certType === 'father' || certType === 'father_income_cert') {
      profileInfo = `\n**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (‡∏ö‡∏¥‡∏î‡∏≤):**\n- ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${profileData.father?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n- ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û: ${profileData.father?.occupation || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n- ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ: ${profileData.father?.annualIncome || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤\n**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô**`;
    } else if (certType === 'mother' || certType === 'mother_income_cert') {
      profileInfo = `\n**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (‡∏°‡∏≤‡∏£‡∏î‡∏≤):**\n- ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${profileData.mother?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n- ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û: ${profileData.mother?.occupation || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n- ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ: ${profileData.mother?.annualIncome || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤\‡∏ô**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô**`;
    } else if (certType === 'guardian' || certType === 'guardian_income_cert') {
      profileInfo = `\n**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á):**\n- ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${profileData.guardian?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n- ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û: ${profileData.guardian?.occupation || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n- ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ: ${profileData.guardian?.annualIncome || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á\n**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô**`;
    } else if (certType === 'family' || certType === 'famo_income_cert') {
      profileInfo = `\n**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß - ‡∏ö‡∏¥‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏£‡∏î‡∏≤):**\n**‡∏ö‡∏¥‡∏î‡∏≤:**\n- ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${profileData.father?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n- ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û: ${profileData.father?.occupation || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n- ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ: ${profileData.father?.annualIncome || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n\n**‡∏°‡∏≤‡∏£‡∏î‡∏≤:**\n- ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${profileData.mother?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n- ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û: ${profileData.mother?.occupation || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n- ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ: ${profileData.mother?.annualIncome || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏£‡∏î‡∏≤\‡∏ô**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô**`;
    } else if (certType === 'single_parent' || certType === 'single_parent_income_cert') {
      profileInfo = `
**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß):**
- ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤ (‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå): ${profileData.father?.name || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
- ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤ (‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå): ${profileData.mother?.name || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
`;
    }
  }

  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ***
  const extractionInstructions = `
**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**
- ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 'occupation' ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ñ‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û:' ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- **‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà' ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏î‡πÜ ‡∏Å‡πá‡∏ï‡∏≤‡∏°**
- ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 'workplace' ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ñ‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û (‡πÄ‡∏ä‡πà‡∏ô "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¥‡∏™‡∏£‡∏∞") ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏´‡∏ô
`;

  let prompt = '';
  if (certType === 'family' || certType === 'famo_income_cert') {
    prompt = `‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏Å‡∏¢‡∏® 102) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

 ${profileInfo}

 ${extractionInstructions}

**‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß**
**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô**
**‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ 12**

**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô:**
- ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ö‡∏¥‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô" ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠
- ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô" ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠
- **‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏Å‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà)** ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:
{
  "isIncomeCert": true/false,
  "certType": "family",
  "confidence": 0-100,
  "documentType": "‡∏Å‡∏¢‡∏® 102/‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ/‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  "hasOfficialSeal": true/false,
  "hasSignature": true/false,
  "signatureQuality": "clear/unclear/missing",
  "issuingAuthority": "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
  "extractedData": {
    "fatherData": {
      "personName": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡∏ö‡∏¥‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô')",
      "annualIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)",
      "occupation": "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û",
      "workplace": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
    },
    "motherData": {
      "personName": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô')",
      "annualIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)",
      "occupation": "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û",
      "workplace": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
    }
  },
  "incomeDetails": {
    "salary": "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    "allowance": "‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á/‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô",
    "bonus": "‡πÇ‡∏ö‡∏ô‡∏±‡∏™",
    "otherIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏≠‡∏∑‡πà‡∏ô",
    "totalIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°"
  },
  "documentQuality": {
    "isExpired": true/false/null,
    "isLegible": true/false,
    "hasWatermark": true/false,
    "imageQuality": "clear/blurry/poor/excellent"
  },
  "qualityIssues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"],
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"],
  "overall_status": "valid/invalid/needs_review"
}`;
  }
  else if (certType === 'father_income_cert') {
    prompt = `‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏Å‡∏¢‡∏® 102) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

 ${profileInfo}

 ${extractionInstructions}

**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ö‡∏¥‡∏î‡∏≤ (father_income_cert):**
1. ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢
2. **‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤** ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
3. **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ 12**
4. ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô

**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô:**
- ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ö‡∏¥‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô" ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠
- **‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏Å‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà)** ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isIncomeCert": true/false,
  "certType": "father",
  "confidence": 0-100,
  "documentType": "‡∏Å‡∏¢‡∏® 102/‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ/‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  "hasOfficialSeal": true/false,
  "hasSignature": true/false,
  "signatureQuality": "clear/unclear/missing",
  "issuingAuthority": "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
  "extractedData": {
    "personName": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡∏ö‡∏¥‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô')",
    "annualIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)",
    "occupation": "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤",
    "workplace": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤",
    "issueDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
    "officerName": "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á",
    "officerPosition": "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà"
  },
  "incomeDetails": {
    "salary": "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    "allowance": "‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á/‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô",
    "bonus": "‡πÇ‡∏ö‡∏ô‡∏±‡∏™",
    "otherIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏≠‡∏∑‡πà‡∏ô",
    "totalIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°"
  },
  "documentQuality": {
    "isExpired": true/false/null,
    "isLegible": true/false,
    "hasWatermark": true/false,
    "imageQuality": "clear/blurry/poor/excellent"
  },
  "qualityIssues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"],
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"],
  "overall_status": "valid/invalid/needs_review"
}

**‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** ‡∏≠‡∏¢‡πà‡∏≤‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÇ‡∏î‡∏¢‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`;
  }
  else if (certType === 'mother_income_cert') {
    prompt = `‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏Å‡∏¢‡∏® 102) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

 ${profileInfo}

 ${extractionInstructions}

**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏£‡∏î‡∏≤ (mother_income_cert):**
1. ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢
2. **‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤** ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
3. **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ 12**
4. ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô

**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô:**
- ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô" ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠
- **‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏Å‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà)** ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isIncomeCert": true/false,
  "certType": "mother",
  "confidence": 0-100,
  "documentType": "‡∏Å‡∏¢‡∏® 102/‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ/‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  "hasOfficialSeal": true/false,
  "hasSignature": true/false,
  "signatureQuality": "clear/unclear/missing",
  "issuingAuthority": "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
  "extractedData": {
    "personName": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô')",
    "annualIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)",
    "occupation": "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤",
    "workplace": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤",
    "issueDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
    "officerName": "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á",
    "officerPosition": "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà"
  },
  "incomeDetails": {
    "salary": "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    "allowance": "‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á/‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô",
    "bonus": "‡πÇ‡∏ö‡∏ô‡∏±‡∏™",
    "otherIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏≠‡∏∑‡πà‡∏ô",
    "totalIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°"
  },
  "documentQuality": {
    "isExpired": true/false/null,
    "isLegible": true/false,
    "hasWatermark": true/false,
    "imageQuality": "clear/blurry/poor/excellent"
  },
  "qualityIssues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"],
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"],
  "overall_status": "valid/invalid/needs_review"
}

**‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** ‡∏≠‡∏¢‡πà‡∏≤‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡πÇ‡∏î‡∏¢‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`;
  }
  // *** ‡πÄ‡∏û‡∏¥‡πà‡∏°: Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á (‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥) ***
  else if (certType === 'guardian_income_cert') {
    prompt = `‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏Å‡∏¢‡∏® 102) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

 ${profileInfo}

 ${extractionInstructions}

**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á (guardian_income_cert):**
1. ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢
2. **‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤** ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
3. **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ 12**
4. ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô

**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô:**
- ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô" ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠
- **‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏Å‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà)** ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isIncomeCert": true/false,
  "certType": "guardian",
  "confidence": 0-100,
  "documentType": "‡∏Å‡∏¢‡∏® 102/‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ/‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  "hasOfficialSeal": true/false,
  "hasSignature": true/false,
  "signatureQuality": "clear/unclear/missing",
  "issuingAuthority": "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
  "extractedData": {
    "personName": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô')",
    "annualIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)",
    "occupation": "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á",
    "workplace": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á",
    "issueDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
    "officerName": "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á",
    "officerPosition": "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà"
  },
  "incomeDetails": {
    "salary": "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    "allowance": "‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á/‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô",
    "bonus": "‡πÇ‡∏ö‡∏ô‡∏±‡∏™",
    "otherIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏≠‡∏∑‡πà‡∏ô",
    "totalIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°"
  },
  "documentQuality": {
    "isExpired": true/false/null,
    "isLegible": true/false,
    "hasWatermark": true/false,
    "imageQuality": "clear/blurry/poor/excellent"
  },
  "qualityIssues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"],
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"],
  "overall_status": "valid/invalid/needs_review"
}

**‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** ‡∏≠‡∏¢‡πà‡∏≤‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÇ‡∏î‡∏¢‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`;
  }
  else if (certType === 'single_parent' || certType === 'single_parent_income_cert') {
    prompt = `‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏Å‡∏¢‡∏® 102) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

 ${profileInfo}

 ${extractionInstructions}

**‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á "‡∏ö‡∏¥‡∏î‡∏≤" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏°‡∏≤‡∏£‡∏î‡∏≤"**

**‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏:**
1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ä‡∏∑‡πà‡∏≠, ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û, ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ) ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ñ‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡πÉ‡∏î‡∏Ñ‡∏≥‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
    - **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏¥‡∏î‡∏≤:** "‡∏ö‡∏¥‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô", "‡∏ö‡∏¥‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°", "‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤", ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ **"‡∏ö‡∏¥‡∏î‡∏≤"** ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
    - **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏£‡∏î‡∏≤:** "‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô", "‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°", "‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤", ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ **"‡∏°‡∏≤‡∏£‡∏î‡∏≤"** ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•

2. ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö "‡∏ö‡∏¥‡∏î‡∏≤" ‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î \`matchedProfile\` ‡πÄ‡∏õ‡πá‡∏ô "father" ‡πÅ‡∏•‡∏∞‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô

3. ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö "‡∏°‡∏≤‡∏£‡∏î‡∏≤" ‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î \`matchedProfile\` ‡πÄ‡∏õ‡πá‡∏ô "mother" ‡πÅ‡∏•‡∏∞‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô

4. **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å:** ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ 12

**‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:**
- ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏ö‡∏¥‡∏î‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏°‡∏≤‡∏£‡∏î‡∏≤)
- ‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
- ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤ ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î \`matchedProfile\` ‡πÄ‡∏õ‡πá‡∏ô "unknown"

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isIncomeCert": true/false,
  "certType": "single_parent",
  "matchedProfile": "father" ‡∏´‡∏£‡∏∑‡∏≠ "mother" ‡∏´‡∏£‡∏∑‡∏≠ "unknown",
  "confidence": 0-100,
  "documentType": "‡∏Å‡∏¢‡∏® 102/‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ/‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  "hasOfficialSeal": true/false,
  "hasSignature": true/false,
  "signatureQuality": "clear/unclear/missing",
  "issuingAuthority": "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
  "extractedData": {
    "personName": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ",
    "annualIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)",
    "occupation": "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û",
    "workplace": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
    "issueDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
    "officerName": "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á",
    "officerPosition": "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà"
  },
  "incomeDetails": {
    "salary": "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    "allowance": "‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á/‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô",
    "bonus": "‡πÇ‡∏ö‡∏ô‡∏±‡∏™",
    "otherIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏≠‡∏∑‡πà‡∏ô",
    "totalIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°"
  },
  "documentQuality": {
    "isExpired": true/false/null,
    "isLegible": true/false,
    "hasWatermark": true/false,
    "imageQuality": "clear/blurry/poor/excellent"
  },
  "qualityIssues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"],
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"],
  "overall_status": "valid/invalid/needs_review"
}`;
  }
  else {
    prompt = `‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏Å‡∏¢‡∏® 102) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

 ${profileInfo}

 ${extractionInstructions}

**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô:**
- ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ö‡∏¥‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô" ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠
- ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô" ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠
- **‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏Å‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà)** ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isIncomeCert": true/false,
  "certType": "person",
  "confidence": 0-100,
  "documentType": "‡∏Å‡∏¢‡∏® 102/‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ/‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  "hasOfficialSeal": true/false,
  "hasSignature": true/false,
  "signatureQuality": "clear/unclear/missing",
  "issuingAuthority": "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
  "extractedData": {
    "personName": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡∏ö‡∏¥‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô')",
    "annualIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)",
    "occupation": "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û",
    "workplace": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
    "issueDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
    "expiryDate": "‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏",
    "officerName": "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á",
    "officerPosition": "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà"
  },
  "incomeDetails": {
    "salary": "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    "allowance": "‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á/‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô",
    "bonus": "‡πÇ‡∏ö‡∏ô‡∏±‡∏™",
    "otherIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏≠‡∏∑‡πà‡∏ô",
    "totalIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°"
  },
  "documentQuality": {
    "isExpired": true/false/null,
    "isLegible": true/false,
    "hasWatermark": true/false,
    "imageQuality": "clear/blurry/poor/excellent"
  },
  "qualityIssues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"],
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"],
  "overall_status": "valid/invalid/needs_review"
}

**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** ‡∏≠‡∏¢‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏¥‡∏î‡∏≤ ‡∏°‡∏≤‡∏£‡∏î‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á) ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á "certType" ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "person" ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
**‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ 12**`;
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  prompt += `

‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö:
1. ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏Å‡∏¢‡∏® 102)
2. ‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£
3. ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
4. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
5. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
6. ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
7. ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
8. **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏±‡∏ô**
9. **‡∏´‡πâ‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô**
10. **‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤** - ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô qualityIssues
11. **‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏õ‡∏µ (‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô**
12. **‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ**`;

  try {
    const result = await model.generateContent([prompt, filePart]);
    const response = await result.response;
    const responseText = response.text();
    let parsed;
    try { const jsonMatch = responseText.match(/\{[\s\S]*\}/); if (jsonMatch) parsed = JSON.parse(jsonMatch[0]); else throw new Error('No JSON found'); }
    catch (parseError) { 
      parsed = analyzeIncomeCertTextResponse(responseText, certType); 
    }

    // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ certType ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏õ ***
    parsed = { ...parsed, requestedCertType: certType, certType: certType };

    // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö single_parent ‡∏ñ‡πâ‡∏≤ AI ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ***
    if ((certType === 'single_parent' || certType === 'single_parent_income_cert') && parsed.matchedProfile === 'unknown') {
      console.log('ü§ñ AI could not identify parent, attempting manual fallback...');
      const lowerText = responseText.toLowerCase();
      if (lowerText.includes('‡∏ö‡∏¥‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô')) {
        parsed.matchedProfile = 'father';
        console.log('‚úÖ Fallback: Identified as FATHER');
      } else if (lowerText.includes('‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô')) {
        parsed.matchedProfile = 'mother';
        console.log('‚úÖ Fallback: Identified as MOTHER');
      } else {
        console.log('‚ö†Ô∏è Fallback: Could not identify parent from text.');
      }
    }

    // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏õ‡∏µ ***
    if ((certType === 'family' || certType === 'famo_income_cert') && parsed.extractedData) {
      if (parsed.extractedData.fatherData && !parsed.extractedData.fatherData.annualIncome && parsed.incomeDetails && parsed.incomeDetails.salary) { const monthlyIncome = parseNumber(parsed.incomeDetails.salary); parsed.extractedData.fatherData.annualIncome = monthlyIncome * 12; }
      if (parsed.extractedData.motherData && !parsed.extractedData.motherData.annualIncome && parsed.incomeDetails && parsed.incomeDetails.salary) { const monthlyIncome = parseNumber(parsed.incomeDetails.salary); parsed.extractedData.motherData.annualIncome = monthlyIncome * 12; }
    } else if (parsed.extractedData && certType !== 'family' && certType !== 'famo_income_cert') {
      if (!parsed.extractedData.annualIncome && parsed.incomeDetails && parsed.incomeDetails.salary) { const monthlyIncome = parseNumber(parsed.incomeDetails.salary); parsed.extractedData.annualIncome = monthlyIncome * 12; }
    }

    if (profileData) {
      const comparison = compareIncomeCertWithUserData(parsed.extractedData, profileData, certType);
      parsed.profileComparison = comparison;
      if (comparison.mismatches.length > 0) {
        parsed.qualityIssues = parsed.qualityIssues || [];
        const meaningfulMismatches = comparison.mismatches.filter(mismatch => {
          if (mismatch.field === 'annualIncome') { const formNum = parseNumber(mismatch.extracted); const profileNum = parseNumber(mismatch.profile); const tolerance = profileNum * 0.2; if (Math.abs(formNum - profileNum) <= tolerance) { console.log(`‚úÖ Income within tolerance, skipping mismatch: ${formNum} vs ${profileNum}`); return false; } } return true;
        });
        meaningfulMismatches.forEach(mismatch => { const severity = mismatch.severity === 'high' ? '‚ùå' : '‚ö†Ô∏è'; parsed.qualityIssues.push(`${severity} ${mismatch.label}‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£="${mismatch.extracted}" ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå="${mismatch.profile}"`); });
        if (meaningfulMismatches.length > 0) { parsed.recommendations = parsed.recommendations || []; parsed.recommendations.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå'); if (parsed.overall_status === 'valid') parsed.overall_status = 'needs_review'; }
      }
      const meaningfulWarnings = comparison.warnings.filter(warning => !warning.includes('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô') && !warning.includes('‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'));
      if (meaningfulWarnings.length > 0) { parsed.recommendations = parsed.recommendations || []; parsed.recommendations.push(...meaningfulWarnings); }
    }
    if (parsed.recommendations) { parsed.recommendations = filterRedundantRecommendations(parsed.recommendations, parsed.extractedData, profileData); }
    console.log('‚úÖ Client-side IncomeCert validation completed');
    return parsed;
  } catch (error) { console.error('‚ùå Client-side IncomeCert validation failed:', error); throw error; }
};

// *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ***
const validateIncomeCert = async (fileUri, certType = 'father', mimeType = null, includeProfileCheck = true) => {
  try {
    console.log(`üöÄ Starting ${certType} income cert validation...`);
    const validCertTypes = [
      'father', 'mother', 'guardian', 'single_parent', 'family', 'famo_income_cert',
      'father_income_cert', 'mother_income_cert', 
      // *** ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á (‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥) ***
      'guardian_income_cert', 
      'single_parent_income_cert'
    ];
    if (!validCertTypes.includes(certType)) throw new Error(`‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${certType}`);
    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) throw new Error('‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà');
    let profileData = null;
    if (includeProfileCheck) { profileData = await fetchUserProfileData(); if (profileData) console.log('‚úÖ Profile data loaded for comparison'); }
    if (USE_BACKEND_SERVER) {
      try { const serverAvailable = await checkBackendServer(); if (serverAvailable) { console.log('‚úÖ Using server-side IncomeCert validation'); return await validateIncomeCertViaServer(fileUri, certType, mimeType, profileData); } }
      catch (serverError) { console.log('‚ö†Ô∏è Server IncomeCert validation failed, falling back to client-side:', serverError.message); }
    }
    console.log('‚úÖ Using client-side IncomeCert validation');
    return await validateIncomeCertClientSide(fileUri, certType, mimeType, profileData);
  } catch (error) { console.error('‚ùå IncomeCert validation error:', error); throw new Error(`‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`); }
};

// Fallback text analysis for Income Certificate - *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö matchedProfile ***
const analyzeIncomeCertTextResponse = (text, certType) => {
  const lowerText = text.toLowerCase();
  const isIncomeCert = lowerText.includes('‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ') || lowerText.includes('‡∏Å‡∏¢‡∏® 102') || lowerText.includes('income certificate');
  const hasOfficialSeal = lowerText.includes('‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö') || lowerText.includes('‡∏ï‡∏£‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£');
  const hasSignature = lowerText.includes('‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô') || lowerText.includes('‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠');
  let fallbackData = { isIncomeCert, certType, confidence: isIncomeCert ? 75 : 25, documentType: isIncomeCert ? '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ' : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö', hasOfficialSeal, hasSignature, signatureQuality: hasSignature ? 'unclear' : 'missing', issuingAuthority: '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö', extractedData: {}, incomeDetails: {}, documentQuality: { isExpired: null, isLegible: true, hasWatermark: false, imageQuality: 'unclear' }, qualityIssues: !isIncomeCert ? ['‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ'] : [], recommendations: !isIncomeCert ? ['‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ'] : [], overall_status: isIncomeCert && hasOfficialSeal && hasSignature ? 'valid' : 'needs_review', rawResponse: text };
  if (certType === 'single_parent' || certType === 'single_parent_income_cert') {
    if (lowerText.includes('‡∏ö‡∏¥‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô')) { fallbackData.matchedProfile = 'father'; }
    else if (lowerText.includes('‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô')) { fallbackData.matchedProfile = 'mother'; }
    else { fallbackData.matchedProfile = 'unknown'; }
  }
  return fallbackData;
};

// Parse and format Income Certificate validation result - ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°
const parseIncomeCertResult = (result) => {
  if (!result) return null;
  return { isValid: result.overall_status === 'valid' && result.isIncomeCert && (result.profileComparison?.matchStatus !== 'mismatch'), confidence: result.confidence || 0, status: result.overall_status || 'unknown', certType: result.certType || 'unknown', documentType: result.documentType || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö', hasOfficialSeal: result.hasOfficialSeal || false, hasSignature: result.hasSignature || false, signatureQuality: result.signatureQuality || 'missing', issuingAuthority: result.issuingAuthority || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö', extractedData: result.extractedData || {}, incomeDetails: result.incomeDetails || {}, documentQuality: result.documentQuality || {}, qualityIssues: result.qualityIssues || [], recommendations: result.recommendations || [], profileComparison: result.profileComparison || null, rawResult: result };
};

// *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• ***
const showIncomeCertValidationAlert = (result, onAccept, onReject) => {
  let title, message;
  const profileMismatch = result.profileComparison?.matchStatus === 'mismatch';
  if (profileMismatch) title = '‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå';
  else if (result.overall_status === 'valid') title = '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
  else title = '‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤';

  let statusText = '';
  if (result.isIncomeCert) statusText += '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ\n'; else statusText += '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ\n';
  if (result.hasOfficialSeal) statusText += '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£\n'; else statusText += '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£\n';
  if (result.hasSignature) statusText += `‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô (${result.signatureQuality})\n`; else statusText += '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô\n';
  
  statusText += `\nüéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${result.confidence}%\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getIncomeCertTypeName(result.requestedCertType || result.certType)}\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${result.documentType}`;
  if (result.issuingAuthority && result.issuingAuthority !== '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö') statusText += `\n‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å: ${result.issuingAuthority}`;

  if (result.profileComparison) {
    const comp = result.profileComparison;
    statusText += '\n\nüë§ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:\n';
    if (comp.matchStatus === 'full_match') statusText += '‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£\n';
    else if (comp.matchStatus === 'good_match') statusText += '‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå\n';
    else if (comp.matchStatus === 'partial_match') statusText += '‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô\n';
    else if (comp.matchStatus === 'mismatch') statusText += '‚ùå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô\n';
    if (comp.comparisonDetails) {
      const pct = comp.matchPercentage || 0;
      statusText += `\n‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö: ${comp.comparisonDetails.fieldsMatched}/${comp.comparisonDetails.fieldsCompared} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (${pct}%)\n`;
      if ((result.certType === 'family' || result.certType === 'famo_income_cert') && comp.comparisonDetails.fatherComparison && comp.comparisonDetails.motherComparison) {
        statusText += '\nüìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:\n';
        if (comp.comparisonDetails.fatherComparison) { const fatherPct = comp.comparisonDetails.fatherComparison.matchPercentage || 0; statusText += ` üë® ‡∏ö‡∏¥‡∏î‡∏≤: ${fatherPct}% ${comp.comparisonDetails.fatherComparison.matchStatus === 'full_match' ? '‚úÖ\n' : comp.comparisonDetails.fatherComparison.matchStatus === 'mismatch' ? '‚ùå\n' : '‚ö†Ô∏è\n'}`; }
        if (comp.comparisonDetails.motherComparison) { const motherPct = comp.comparisonDetails.motherComparison.matchPercentage || 0; statusText += ` üë© ‡∏°‡∏≤‡∏£‡∏î‡∏≤: ${motherPct}% ${comp.comparisonDetails.motherComparison.matchStatus === 'full_match' ? '‚úÖ\n' : comp.comparisonDetails.motherComparison.matchStatus === 'mismatch' ? '‚ùå\n' : '‚ö†Ô∏è\n'}`; }
      }
    }
  }

  if ((result.certType === 'family' || result.certType === 'famo_income_cert') && result.extractedData) {
    if (result.extractedData.fatherData && Object.keys(result.extractedData.fatherData).length > 0) {
      statusText += '\n\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏î‡∏≤:';
      Object.entries(result.extractedData.fatherData).forEach(([key, value]) => { if (value && key !== 'idNumber') { const label = key === 'personName' ? '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•' : key === 'annualIncome' ? '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ' : key === 'occupation' ? '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û' : key === 'workplace' ? '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' : key; statusText += `\n‚Ä¢ ${label}: ${value}`; } });
    }
    if (result.extractedData.motherData && Object.keys(result.extractedData.motherData).length > 0) {
      statusText += '\n\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏£‡∏î‡∏≤:';
      Object.entries(result.extractedData.motherData).forEach(([key, value]) => { if (value && key !== 'idNumber') { const label = key === 'personName' ? '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•' : key === 'annualIncome' ? '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ' : key === 'occupation' ? '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û' : key === 'workplace' ? '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' : key; statusText += `\n‚Ä¢ ${label}: ${value}`; } });
    }
  } else if (result.extractedData && result.certType !== 'family' && result.certType !== 'famo_income_cert') {
    const effectiveCertType = result.requestedCertType || result.certType;
    let personLabel = result.profileComparison?.comparisonDetails?.personType;
    if (!personLabel) {
      if (effectiveCertType === 'single_parent' || effectiveCertType === 'single_parent_income_cert') {
        const identifiedParent = result.profileComparison?.comparisonDetails?.personType?.split(' ')[0];
        personLabel = `‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (${identifiedParent || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'})`;
      } else {
        personLabel = effectiveCertType === 'father' || effectiveCertType === 'father_income_cert' ? '‡∏ö‡∏¥‡∏î‡∏≤' : 
                      effectiveCertType === 'mother' || effectiveCertType === 'mother_income_cert' ? '‡∏°‡∏≤‡∏£‡∏î‡∏≤' : 
                      effectiveCertType === 'guardian' || effectiveCertType === 'guardian_income_cert' ? '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á' : 
                      '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á';
      }
    }
    statusText += `\n\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•${personLabel}:`;
    Object.entries(result.extractedData).forEach(([key, value]) => {
      if (value && key !== 'idNumber') {
        const label = key === 'personName' ? '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•' : key === 'annualIncome' ? '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ' : key === 'occupation' ? '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û' : key === 'workplace' ? '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' : key === 'issueDate' ? '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£' : key === 'officerName' ? '‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà' : key === 'officerPosition' ? '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà' : key;
        statusText += `\n‚Ä¢ ${label}: ${value}`;
      }
    });
  }

  const meaningfulRecommendations = (result.recommendations || []).filter(rec => !rec.includes('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô') && !rec.includes('‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'));
  if (meaningfulRecommendations.length > 0) { statusText += '\n\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n‚Ä¢ ' + meaningfulRecommendations.slice(0, 3).join('\n‚Ä¢ '); }

  message = statusText;
  const isValid = result.overall_status === 'valid' && result.isIncomeCert && !profileMismatch;
  const buttons = [{ text: '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà', style: 'cancel', onPress: onReject, }];
  if (isValid || result.overall_status === 'needs_review') { buttons.push({ text: result.overall_status === 'valid' ? '‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ' : '‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)', onPress: () => onAccept(result), }); }
  Alert.alert(title, message, buttons);
};

// *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ***
const getIncomeCertTypeName = (certType) => { 
  const certTypeNames = { 
    'father': '‡∏ö‡∏¥‡∏î‡∏≤', 
    'mother': '‡∏°‡∏≤‡∏£‡∏î‡∏≤', 
    'guardian': '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á', 
    'single_parent': '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß', 
    'family': '‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß', 
    'famo_income_cert': '‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß',
    'father_income_cert': '‡∏ö‡∏¥‡∏î‡∏≤ (‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥)',
    'mother_income_cert': '‡∏°‡∏≤‡∏£‡∏î‡∏≤ (‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥)',
    // *** ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á (‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥) ***
    'guardian_income_cert': '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á (‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥)',
    'single_parent_income_cert': '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥)'
  }; 
  return certTypeNames[certType] || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'; 
};

// Validate multiple Income Certificates - ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°
const validateMultipleIncomeCerts = async (files, includeProfileCheck = true) => {
  const results = [];
  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    try {
      const result = await validateIncomeCert(file.uri, file.certType || 'father', file.mimeType, includeProfileCheck);
      results.push({ fileIndex: i, fileName: file.name || file.filename, certType: file.certType || 'father', validation: result, success: true, profileMatch: result.profileComparison?.matchStatus !== 'mismatch' });
    } catch (error) { results.push({ fileIndex: i, fileName: file.name || file.filename, certType: file.certType || 'father', error: error.message, success: false, profileMatch: false }); }
  }
  return results;
};

// Check Income Certificate AI backend status - ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°
const checkIncomeCertAIStatus = async () => {
  try {
    console.log('ü§ñ Checking IncomeCert AI backend status...');
    if (USE_BACKEND_SERVER) {
      const serverAvailable = await checkBackendServer();
      if (serverAvailable) {
        try { console.log('üî¨ Testing IncomeCert AI connection through server...'); const response = await fetch(`${AI_BACKEND_URL}/ai/test`); if (response.ok) { console.log('‚úì IncomeCert AI backend server is available and working'); return { available: true, method: 'server', profileCheckEnabled: true, config: { backendUrl: AI_BACKEND_URL, useBackend: USE_BACKEND_SERVER } }; } }
        catch (error) { console.log('‚ùå Server IncomeCert AI test failed:', error.message); }
      }
    }
    if (!GEMINI_API_KEY || GEMINI_API_KEY === 'YOUR_GEMINI_API_KEY_HERE') { console.error('‚ùå Gemini API key not configured for IncomeCert'); return false; }
    const initialized = initializeGemini(); if (!initialized) { console.error('‚ùå Failed to initialize Gemini AI for IncomeCert'); return false; }
    try { console.log('üî¨ Testing client-side IncomeCert AI connection...'); const testResult = await model.generateContent("Test connection - respond with OK"); const testResponse = await testResult.response; testResponse.text(); console.log('‚úì Client-side IncomeCert AI is available'); return { available: true, method: 'client', profileCheckEnabled: true, config: { apiKey: '***configured***', model: 'gemini-2.0-flash-exp' } }; }
    catch (testError) { console.error('‚ùå Client-side IncomeCert AI test failed:', testError.message); return false; }
  } catch (error) { console.error('‚ùå IncomeCert AI backend check failed:', error); return false; }
};

// Helper functions - ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°
const filterRedundantRecommendations = (recommendations, extractedData, profileData) => {
  if (!recommendations || recommendations.length === 0) return [];
  const filtered = []; const seen = new Set();
  const checkIncomeMatch = () => {
    if (!extractedData || !profileData) return false;
    let fatherIncomeMatch = true; let motherIncomeMatch = true;
    if (extractedData.fatherData && extractedData.fatherData.annualIncome && profileData.father) { const extractedIncome = parseNumber(extractedData.fatherData.annualIncome); const profileIncome = parseNumber(profileData.father.annualIncome); const tolerance = profileIncome * 0.15; fatherIncomeMatch = Math.abs(extractedIncome - profileIncome) <= tolerance; }
    if (extractedData.motherData && extractedData.motherData.annualIncome && profileData.mother) { const extractedIncome = parseNumber(extractedData.motherData.annualIncome); const profileIncome = parseNumber(profileData.mother.annualIncome); const tolerance = profileIncome * 0.15; motherIncomeMatch = Math.abs(extractedIncome - profileIncome) <= tolerance; }
    return fatherIncomeMatch && motherIncomeMatch;
  };
  const incomeMatches = checkIncomeMatch();
  recommendations.forEach(rec => { 
    const lowerRec = rec.toLowerCase(); 
    if (seen.has(lowerRec)) return; 
    if (lowerRec.includes('ai ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ') && extractedData && (extractedData.personName || (extractedData.fatherData?.personName) || (extractedData.motherData?.personName))) { console.log('‚úÖ Skipping document type recommendation - AI identified document type successfully'); return; }
    if (incomeMatches && (lowerRec.includes('‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ') || lowerRec.includes('‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô') || lowerRec.includes('income') || lowerRec.includes('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ'))) { console.log('‚úÖ Skipping income recommendation - income matches'); return; } 
    if (lowerRec.includes('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô') || lowerRec.includes('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ') || lowerRec.includes('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ') || lowerRec.includes('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°') || lowerRec.trim() === '') { return; }
    filtered.push(rec); 
    seen.add(lowerRec); 
  });
  return filtered;
};
const parseNumber = (value) => { if (!value) return 0; const str = value.toString().replace(/[^\d]/g, ''); return parseInt(str, 10) || 0; };


// <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 2: ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£ export ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà >>>
export {
  fetchUserProfileData,
  validateIncomeCert,
  parseIncomeCertResult,
  showIncomeCertValidationAlert,
  getIncomeCertTypeName,
  validateMultipleIncomeCerts,
  checkIncomeCertAIStatus,
};