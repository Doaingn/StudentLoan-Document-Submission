// documents_ai/FamilyStatusAI.js - Enhanced with profile data verification
import { GoogleGenerativeAI } from "@google/generative-ai";
import * as FileSystem from 'expo-file-system/legacy';
import { Alert } from 'react-native';
import { doc, getDoc } from "firebase/firestore";
import { db, auth } from "../../../database/firebase";

// Configuration
const GEMINI_API_KEY = process.env.EXPO_PUBLIC_GEMINI_API_KEY;

let genAI = null;
let model = null;

console.log('üîß FamilyStatusAI Configuration:');
console.log('- Client-side only (no backend server)');
console.log('- API Key configured:', !!GEMINI_API_KEY);

// Initialize Gemini AI
const initializeGemini = () => {
  if (!genAI && GEMINI_API_KEY && GEMINI_API_KEY !== 'YOUR_GEMINI_API_KEY_HERE') {
    try {
      genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
      model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
      console.log('‚úì Gemini AI initialized successfully for FamilyStatus');
      return true;
    } catch (error) {
      console.error('Failed to initialize Gemini AI for FamilyStatus:', error);
      return false;
    }
  }
  return !!genAI;
};

// Fetch user profile data from Firebase
export const fetchUserProfileData = async () => {
  try {
    const user = auth.currentUser;
    if (!user) {
      console.warn('‚ö†Ô∏è No authenticated user found');
      return null;
    }

    console.log('üì• Fetching user profile data from Firebase...');
    const userDoc = await getDoc(doc(db, "users", user.uid));
    
    if (!userDoc.exists()) {
      console.warn('‚ö†Ô∏è User document not found');
      return null;
    }

    const userData = userDoc.data();
    console.log('‚úÖ User profile data fetched successfully');
    
    return {
      student: {
        name: userData.name || null,
        student_id: userData.student_id || null,
        citizen_id: userData.citizen_id || null,
        siblings_count: userData.siblings_count || null,
      },
      father: {
        name: userData.father_info?.name || null,
        citizen_id: userData.father_info?.citizen_id || null,
        occupation: userData.father_info?.occupation || null,
        income: userData.father_info?.income || null,
        phone_number: userData.father_info?.phone_number || null,
        address_perm: userData.father_info?.address_perm || null,
      },
      mother: {
        name: userData.mother_info?.name || null,
        citizen_id: userData.mother_info?.citizen_id || null,
        occupation: userData.mother_info?.occupation || null,
        income: userData.mother_info?.income || null,
        phone_number: userData.mother_info?.phone_number || null,
        address_perm: userData.mother_info?.address_perm || null,
      },
      guardian: {
        name: userData.guardian_info?.name || null,
        citizen_id: userData.guardian_info?.citizen_id || null,
        occupation: userData.guardian_info?.occupation || null,
        income: userData.guardian_info?.income || null,
        phone_number: userData.guardian_info?.phone_number || null,
        address_perm: userData.guardian_info?.address_perm || null,
        guardian_relation: userData.guardian_info?.guardian_relation || null,
      }
    };
  } catch (error) {
    console.error('‚ùå Error fetching user profile data:', error);
    return null;
  }
};

// *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠ ***
const compareWithProfile = (extractedData, profileData) => {
  if (!profileData || !extractedData) {
    return {
      matchStatus: 'no_profile_data',
      matches: {},
      mismatches: [],
      warnings: ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö']
    };
  }

  const normalizeText = (text) => {
    if (!text) return '';
    return text.toString().trim().toLowerCase()
      .replace(/\s+/g, ' ')
      .replace(/[^\u0E00-\u0E7Fa-z0-9\s]/g, '');
  };

  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ***
  const compareNameOnly = (extractedName, profileName, personLabel) => {
    if (!extractedName || !profileName) {
      return {
        match: false,
        warning: `‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•${personLabel}‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö`
      };
    }
    
    const extracted = normalizeText(extractedName);
    const profile = normalizeText(profileName);
    
    if (extracted === profile) {
      return {
        match: true,
        warning: null
      };
    } else if (extracted.includes(profile) || profile.includes(extracted)) {
      return {
        match: true,
        warning: `‡∏ä‡∏∑‡πà‡∏≠${personLabel}‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô`
      };
    } else {
      return {
        match: false,
        warning: null
      };
    }
  };

  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ***
  const studentComparison = {
    matches: {},
    mismatches: [],
    warnings: []
  };
  
  // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
  if (extractedData.borrowerInfo?.name && profileData.student?.name) {
    const result = compareNameOnly(extractedData.borrowerInfo.name, profileData.student.name, '‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤');
    studentComparison.matches.student_name = result.match;
    if (result.warning) {
      studentComparison.warnings.push(result.warning);
    }
    
    if (!result.match) {
      studentComparison.mismatches.push({
        field: '‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
        extracted: extractedData.borrowerInfo.name,
        profile: profileData.student.name
      });
    }
  }
  
  // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
  if (extractedData.borrowerInfo?.studentId && profileData.student?.student_id) {
    const extractedId = extractedData.borrowerInfo.studentId.replace(/\D/g, '');
    const profileId = profileData.student.student_id.replace(/\D/g, '');
    
    if (extractedId === profileId) {
      studentComparison.matches.student_id = true;
    } else {
      studentComparison.matches.student_id = false;
      studentComparison.mismatches.push({
        field: '‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
        extracted: extractedData.borrowerInfo.studentId,
        profile: profileData.student.student_id
      });
    }
  }
  
  // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
  if (extractedData.borrowerInfo?.idCard && profileData.student?.citizen_id) {
    const extractedId = extractedData.borrowerInfo.idCard.replace(/\D/g, '');
    const profileId = profileData.student.citizen_id.replace(/\D/g, '');
    
    if (extractedId === profileId) {
      studentComparison.matches.student_citizen_id = true;
    } else {
      studentComparison.matches.student_citizen_id = false;
      studentComparison.mismatches.push({
        field: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
        extracted: extractedData.borrowerInfo.idCard,
        profile: profileData.student.citizen_id
      });
    }
  }
  
  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠ ***
  let fatherComparison = null;
  let motherComparison = null;
  
  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å fatherInfo ‡πÅ‡∏•‡∏∞ motherInfo ‡πÅ‡∏ó‡∏ô certifierInfo ***
  // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤
  if (extractedData.fatherInfo?.name && profileData.father?.name) {
    const result = compareNameOnly(extractedData.fatherInfo.name, profileData.father.name, '‡∏ö‡∏¥‡∏î‡∏≤');
    fatherComparison = {
      matches: { name: result.match },
      mismatches: result.match ? [] : [{
        field: '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤',
        extracted: extractedData.fatherInfo.name,
        profile: profileData.father.name
      }],
      warnings: result.warning ? [result.warning] : [],
      comparisonDetails: {
        fieldsCompared: 1,
        fieldsMatched: result.match ? 1 : 0,
        fieldsMismatched: result.match ? 0 : 1,
        personType: '‡∏ö‡∏¥‡∏î‡∏≤'
      },
      matchPercentage: result.match ? 100 : 0
    };
  } else if (profileData.father?.name) {
    // ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    fatherComparison = {
      matches: { name: false },
      mismatches: [{
        field: '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤',
        extracted: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£',
        profile: profileData.father.name
      }],
      warnings: ['‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£'],
      comparisonDetails: {
        fieldsCompared: 1,
        fieldsMatched: 0,
        fieldsMismatched: 1,
        personType: '‡∏ö‡∏¥‡∏î‡∏≤'
      },
      matchPercentage: 0
    };
  }
  
  // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤
  if (extractedData.motherInfo?.name && profileData.mother?.name) {
    const result = compareNameOnly(extractedData.motherInfo.name, profileData.mother.name, '‡∏°‡∏≤‡∏£‡∏î‡∏≤');
    motherComparison = {
      matches: { name: result.match },
      mismatches: result.match ? [] : [{
        field: '‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤',
        extracted: extractedData.motherInfo.name,
        profile: profileData.mother.name
      }],
      warnings: result.warning ? [result.warning] : [],
      comparisonDetails: {
        fieldsCompared: 1,
        fieldsMatched: result.match ? 1 : 0,
        fieldsMismatched: result.match ? 0 : 1,
        personType: '‡∏°‡∏≤‡∏£‡∏î‡∏≤'
      },
      matchPercentage: result.match ? 100 : 0
    };
  } else if (profileData.mother?.name) {
    // ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    motherComparison = {
      matches: { name: false },
      mismatches: [{
        field: '‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤',
        extracted: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£',
        profile: profileData.mother.name
      }],
      warnings: ['‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£'],
      comparisonDetails: {
        fieldsCompared: 1,
        fieldsMatched: 0,
        fieldsMismatched: 1,
        personType: '‡∏°‡∏≤‡∏£‡∏î‡∏≤'
      },
      matchPercentage: 0
    };
  }
  
  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ***
  const allMatches = { ...studentComparison.matches };
  const allMismatches = [...studentComparison.mismatches];
  const allWarnings = [...studentComparison.warnings];
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤
  if (fatherComparison) {
    Object.entries(fatherComparison.matches).forEach(([key, value]) => {
      allMatches[`father_${key}`] = value;
    });
    
    allMismatches.push(...fatherComparison.mismatches);
    allWarnings.push(...fatherComparison.warnings);
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤
  if (motherComparison) {
    Object.entries(motherComparison.matches).forEach(([key, value]) => {
      allMatches[`mother_${key}`] = value;
    });
    
    allMismatches.push(...motherComparison.mismatches);
    allWarnings.push(...motherComparison.warnings);
  }
  
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
  let matchStatus = 'unknown';
  const totalFields = Object.keys(allMatches).length;
  const matchedCount = Object.values(allMatches).filter(v => v === true).length;
  const mismatchedCount = allMismatches.length;
  const matchPercentage = totalFields > 0 ? Math.round((matchedCount / totalFields) * 100) : 0;
  
  if (mismatchedCount === 0 && allWarnings.length === 0) {
    matchStatus = 'full_match';
  } else if (mismatchedCount === 0 && allWarnings.length <= 2) {
    matchStatus = 'good_match';
  } else if (mismatchedCount === 0) {
    matchStatus = 'partial_match';
  } else if (matchPercentage >= 70) {
    matchStatus = 'good_match';
  } else if (matchPercentage >= 50) {
    matchStatus = 'partial_match';
  } else {
    matchStatus = 'mismatch';
  }
  
  return {
    matchStatus,
    matches: allMatches,
    mismatches: allMismatches,
    warnings: allWarnings,
    comparisonDetails: {
      fieldsCompared: totalFields,
      fieldsMatched: matchedCount,
      fieldsMismatched: mismatchedCount,
      studentComparison,
      fatherComparison,
      motherComparison
    },
    matchPercentage
  };
};

// Prepare file for Gemini
const prepareFileForGemini = async (fileUri, mimeType) => {
  try {
    console.log('üìÅ Preparing FamilyStatus file for Gemini AI...');
    
    const base64Data = await FileSystem.readAsStringAsync(fileUri, {
      encoding: FileSystem.EncodingType.Base64,
    });

    let actualMimeType = mimeType || 'image/jpeg';
    if (!mimeType) {
      const ext = fileUri.split('.').pop()?.toLowerCase();
      if (ext === 'png') actualMimeType = 'image/png';
      else if (ext === 'pdf') actualMimeType = 'application/pdf';
    }

    console.log('‚úÖ FamilyStatus file prepared for Gemini');
    return {
      inlineData: {
        data: base64Data,
        mimeType: actualMimeType,
      },
    };
  } catch (error) {
    console.error('‚ùå Error preparing FamilyStatus file:', error);
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ: ${error.message}`);
  }
};

// Client-side validation
const validateFamilyStatusCertClientSide = async (fileUri, mimeType, profileData) => {
  console.log('ü§ñ Starting client-side family status cert validation...');
  
  if (!model) {
    const initialized = initializeGemini();
    if (!initialized) throw new Error('‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
  }

  const filePart = await prepareFileForGemini(fileUri, mimeType);

  let profileInfo = '';
  if (profileData) {
    profileInfo = `

**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:**

‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤:
- ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${profileData.student?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${profileData.student?.student_id || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ${profileData.student?.citizen_id || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}

‡∏ö‡∏¥‡∏î‡∏≤:
- ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${profileData.father?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}

‡∏°‡∏≤‡∏£‡∏î‡∏≤:
- ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${profileData.mother?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞:
- ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤, ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤, ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
- ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`;
  }

  const prompt = `
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 ${profileInfo}

**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß:**
- ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- ‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏£‡∏î‡∏≤ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
- *** ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏ö‡∏¥‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤" ‡πÅ‡∏•‡∏∞‡∏™‡∏Å‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤ ***
- *** ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤" ‡πÅ‡∏•‡∏∞‡∏™‡∏Å‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤ ***
- ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏¥‡∏î‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏£‡∏î‡∏≤

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isFamilyStatusCert": true/false,
  "confidence": 0-100,
  "documentType": "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß/‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡πà‡∏≤/‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏£‡∏™/‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  "familyStatus": "‡∏™‡∏°‡∏£‡∏™‡πÅ‡∏•‡πâ‡∏ß/‡πÇ‡∏™‡∏î/‡∏´‡∏¢‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏á/‡∏´‡∏°‡πâ‡∏≤‡∏¢/‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà/‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  "hasOfficialSeal": true/false,
  "hasSignature": true/false,
  "signatureQuality": "clear/unclear/missing",
  "issuingAuthority": "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
  "borrowerInfo": {
    "studentId": "‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
    "idCard": "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å",
    "idCardValid": true/false,
    "name": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ"
  },
  "certifierInfo": {
    "name": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)",
    "idCard": "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á 13 ‡∏´‡∏•‡∏±‡∏Å",
    "idCardValid": true/false,
    "relationship": "‡∏ö‡∏¥‡∏î‡∏≤/‡∏°‡∏≤‡∏£‡∏î‡∏≤",
    "address": {
      "houseNumber": "‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà",
      "moo": "‡∏´‡∏°‡∏π‡πà",
      "road": "‡∏ñ‡∏ô‡∏ô",
      "subDistrict": "‡∏ï‡∏≥‡∏ö‡∏•",
      "district": "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠",
      "province": "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î",
      "postalCode": "‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå",
      "full": "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏ï‡πá‡∏°"
    },
    "phone": "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"
  },
  "fatherInfo": {
    "name": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ö‡∏¥‡∏î‡∏≤ (‡∏™‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '‡∏ö‡∏¥‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤')",
    "idCard": "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ö‡∏¥‡∏î‡∏≤ 13 ‡∏´‡∏•‡∏±‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)",
    "idCardValid": true/false
  },
  "motherInfo": {
    "name": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏°‡∏≤‡∏£‡∏î‡∏≤ (‡∏™‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤')",
    "idCard": "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏°‡∏≤‡∏£‡∏î‡∏≤ 13 ‡∏´‡∏•‡∏±‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)",
    "idCardValid": true/false
  },
  "familyFinancialInfo": {
    "monthlyIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)",
    "monthlyIncomeValid": true/false,
    "yearlyIncome": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏õ‡∏µ",
    "familyMembers": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)",
    "familyMembersValid": true/false,
    "incomePerCapita": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏´‡∏±‡∏ß"
  },
  "legalStatus": {
    "parentsLiveTogether": true/false,
    "parentsDivorced": true/false,
    "parentsSeparated": true/false,
    "fatherDeceased": true/false,
    "motherDeceased": true/false,
    "statusChecked": true/false,
    "statusType": "‡∏ö‡∏¥‡∏î‡∏≤‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô/‡∏´‡∏¢‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏á/‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà/‡∏ö‡∏¥‡∏î‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï/‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï"
  },
  "dataConsistency": {
    "addressMatch": true/false,
    "phoneConsistent": true/false,
    "dateValid": true/false,
    "signerNameMatch": true/false,
    "yearConsistent": true/false
  },
  "signatures": {
    "certifierSignature": true/false,
    "certifierNameWritten": true/false,
    "certifierNameMatch": true/false,
    "witnessSignature1": true/false,
    "witnessSignature2": true/false,
    "witnessRequired": true/false
  },
  "extractedData": {
    "issueDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
    "expiryDate": "‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏",
    "signingDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ô‡∏≤‡∏°",
    "signingYear": "‡∏õ‡∏µ ‡∏û.‡∏®.",
    "officerName": "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á",
    "officerPosition": "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà"
  },
  "dataCompleteness": {
    "hasBorrowerInfo": true/false,
    "hasCertifierInfo": true/false,
    "hasFinancialInfo": true/false,
    "hasLegalStatus": true/false,
    "hasConsistentData": true/false,
    "hasSignatures": true/false,
    "completenessScore": 0-100
  },
  "documentQuality": {
    "isExpired": true/false/null,
    "isLegible": true/false,
    "hasWatermark": true/false,
    "imageQuality": "clear/blurry/poor/excellent",
    "isComplete": true/false
  },
  "validityChecks": {
    "hasValidDates": true/false,
    "hasConsistentInfo": true/false,
    "hasRequiredFields": true/false,
    "idCardsValid": true/false,
    "financialDataValid": true/false
  },
  "qualityIssues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"],
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"],
  "overall_status": "valid/invalid/needs_review"
}

**‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:**
1. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ: ‡∏£‡∏´‡∏±‡∏™, ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ 13 ‡∏´‡∏•‡∏±‡∏Å, ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
2. ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û: ‡∏ä‡∏∑‡πà‡∏≠, ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ 13 ‡∏´‡∏•‡∏±‡∏Å, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå (‡∏ö‡∏¥‡∏î‡∏≤/‡∏°‡∏≤‡∏£‡∏î‡∏≤)
3. ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß/‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô: ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
4. ‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢: ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡πä‡∏Å‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
5. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
6. ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏Å‡∏±‡∏ö

**‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:**
- completenessScore = (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô / 6) √ó 100
- overall_status = "valid" ‡πÄ‡∏°‡∏∑‡πà‡∏≠ >= 90% ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô
- overall_status = "needs_review" ‡πÄ‡∏°‡∏∑‡πà‡∏≠ 70-89%
- overall_status = "invalid" ‡πÄ‡∏°‡∏∑‡πà‡∏≠ < 70%
`;

  try {
    const result = await model.generateContent([prompt, filePart]);
    const response = await result.response;
    const responseText = response.text();

    console.log('ü§ñ FamilyStatus AI Response received');

    let parsed;
    try {
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        parsed = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('No JSON found');
      }
    } catch (parseError) {
      console.warn('‚ö†Ô∏è Failed to parse JSON, using text analysis');
      parsed = analyzeFamilyStatusTextResponse(responseText);
    }

    // Add profile comparison
    if (profileData) {
      const comparison = compareWithProfile(parsed, profileData);
      parsed.profileComparison = comparison;
      
      // Store profile data for display in alert
      parsed.rawResult = {
        profileData: profileData
      };

      // Add comparison results to quality issues and recommendations
      if (comparison.mismatches.length > 0) {
        parsed.qualityIssues = parsed.qualityIssues || [];
        comparison.mismatches.forEach(mismatch => {
          parsed.qualityIssues.push(
            `${mismatch.field}‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£="${mismatch.extracted}" ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå="${mismatch.profile}"`
          );
        });
        
        parsed.recommendations = parsed.recommendations || [];
        parsed.recommendations.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå');
        
        if (parsed.overall_status === 'valid') {
          parsed.overall_status = 'needs_review';
        }
      }

      if (comparison.warnings.length > 0) {
        parsed.recommendations = parsed.recommendations || [];
        parsed.recommendations.push(...comparison.warnings);
      }
    }

    console.log('‚úÖ Client-side FamilyStatus validation completed');
    return parsed;
  } catch (error) {
    console.error('‚ùå Client-side validation failed:', error);
    throw error;
  }
};

// Fallback text analysis
const analyzeFamilyStatusTextResponse = (text) => {
  const lowerText = text.toLowerCase();
  
  const isFamilyStatusCert = lowerText.includes('‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û') || 
                             lowerText.includes('‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß') ||
                             lowerText.includes('family status') ||
                             lowerText.includes('‡∏™‡∏°‡∏£‡∏™') ||
                             lowerText.includes('‡∏´‡∏¢‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏á') ||
                             lowerText.includes('‡∏´‡∏°‡πâ‡∏≤‡∏¢');
  
  const hasOfficialSeal = lowerText.includes('‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö') || 
                          lowerText.includes('‡∏ï‡∏£‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£') ||
                          lowerText.includes('official seal');

  const hasSignature = lowerText.includes('‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô') || 
                       lowerText.includes('‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠') ||
                       lowerText.includes('signature');

  let familyStatus = '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
  if (lowerText.includes('‡πÇ‡∏™‡∏î')) familyStatus = '‡πÇ‡∏™‡∏î';
  else if (lowerText.includes('‡∏™‡∏°‡∏£‡∏™‡πÅ‡∏•‡πâ‡∏ß') || lowerText.includes('‡∏™‡∏°‡∏£‡∏™')) familyStatus = '‡∏™‡∏°‡∏£‡∏™‡πÅ‡∏•‡πâ‡∏ß';
  else if (lowerText.includes('‡∏´‡∏¢‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏á') || lowerText.includes('‡∏´‡∏¢‡πà‡∏≤')) familyStatus = '‡∏´‡∏¢‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏á';
  else if (lowerText.includes('‡∏´‡∏°‡πâ‡∏≤‡∏¢')) familyStatus = '‡∏´‡∏°‡πâ‡∏≤‡∏¢';

  return {
    isFamilyStatusCert,
    confidence: isFamilyStatusCert ? 75 : 25,
    documentType: isFamilyStatusCert ? '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß' : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
    familyStatus,
    hasOfficialSeal,
    hasSignature,
    signatureQuality: hasSignature ? 'unclear' : 'missing',
    issuingAuthority: '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
    borrowerInfo: {},
    certifierInfo: {},
    fatherInfo: {},
    motherInfo: {},
    familyFinancialInfo: {},
    legalStatus: {},
    dataConsistency: {},
    signatures: {},
    extractedData: {},
    dataCompleteness: {
      completenessScore: isFamilyStatusCert ? 50 : 0
    },
    documentQuality: {
      isExpired: null,
      isLegible: true,
      hasWatermark: false,
      imageQuality: 'unclear',
      isComplete: true
    },
    validityChecks: {
      hasValidDates: null,
      hasConsistentInfo: null,
      hasRequiredFields: null
    },
    qualityIssues: !isFamilyStatusCert ? ['‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß'] : [],
    recommendations: !isFamilyStatusCert ? ['‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß'] : [],
    overall_status: isFamilyStatusCert && hasOfficialSeal && hasSignature ? 'valid' : 'needs_review',
    rawResponse: text
  };
};

// Main validation function
export const validateFamilyStatusCert = async (fileUri, mimeType = null, includeProfileCheck = true) => {
  try {
    console.log('üöÄ Starting family status cert validation...');

    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) {
      throw new Error('‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö');
    }

    // Fetch profile data if requested
    let profileData = null;
    if (includeProfileCheck) {
      profileData = await fetchUserProfileData();
      if (profileData) {
        console.log('‚úÖ Profile data loaded for comparison');
      }
    }

    console.log('‚úÖ Using client-side FamilyStatus validation');
    return await validateFamilyStatusCertClientSide(fileUri, mimeType, profileData);

  } catch (error) {
    console.error('‚ùå FamilyStatus validation error:', error);
    throw new Error(`‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
  }
};

// Parse result
export const parseFamilyStatusCertResult = (result) => {
  if (!result) return null;

  return {
    isValid: result.overall_status === 'valid' && 
             result.isFamilyStatusCert &&
             (result.profileComparison?.matchStatus !== 'mismatch'),
    confidence: result.confidence || 0,
    status: result.overall_status || 'unknown',
    documentType: result.documentType || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
    familyStatus: result.familyStatus || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
    hasOfficialSeal: result.hasOfficialSeal || false,
    hasSignature: result.hasSignature || false,
    signatureQuality: result.signatureQuality || 'missing',
    issuingAuthority: result.issuingAuthority || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
    borrowerInfo: result.borrowerInfo || {},
    certifierInfo: result.certifierInfo || {},
    fatherInfo: result.fatherInfo || {},
    motherInfo: result.motherInfo || {},
    familyFinancialInfo: result.familyFinancialInfo || {},
    legalStatus: result.legalStatus || {},
    dataConsistency: result.dataConsistency || {},
    signatures: result.signatures || {},
    extractedData: result.extractedData || {},
    dataCompleteness: result.dataCompleteness || {},
    documentQuality: result.documentQuality || {},
    validityChecks: result.validityChecks || {},
    profileComparison: result.profileComparison || null,
    qualityIssues: result.qualityIssues || [],
    recommendations: result.recommendations || [],
    rawResult: result
  };
};

// Show validation alert with detailed profile comparison
export const showFamilyStatusCertValidationAlert = (result, onAccept, onReject, profileData = null) => {
  let title, message;

  const profileMismatch = result.profileComparison?.matchStatus === 'mismatch';
  const incompleteness = result.dataCompleteness?.completenessScore < 90;
  
  if (profileMismatch) {
    title = '‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå';
  } else if (incompleteness) {
    title = '‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô';
  } else if (result.overall_status === 'valid') {
    title = '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
  } else {
    title = '‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤';
  }
  
  let statusText = '';
  statusText += result.isFamilyStatusCert ? '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß\n' : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß\n';

  if (result.familyStatus && result.familyStatus !== '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö') {
    statusText += `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û: ${result.familyStatus}\n`;
  }

  statusText += result.hasOfficialSeal ? '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£\n' : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£\n';
  statusText += result.hasSignature ? `‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô (${result.signatureQuality})\n` : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô\n';

  // Data completeness
  if (result.dataCompleteness) {
    statusText += `\nüìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ${result.dataCompleteness.completenessScore}%\n`;
  }

  statusText += `\nüéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${result.confidence}%`;
  statusText += `\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${result.documentType}`;
  
  if (result.issuingAuthority && result.issuingAuthority !== '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö') {
    statusText += `\n‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å: ${result.issuingAuthority}`;
  }

  // Extracted data summary
  if (result.borrowerInfo && Object.keys(result.borrowerInfo).length > 0) {
    statusText += '\n\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:';
    if (result.borrowerInfo.name) statusText += `\n‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠: ${result.borrowerInfo.name}`;
    if (result.borrowerInfo.studentId) statusText += `\n‚Ä¢ ‡∏£‡∏´‡∏±‡∏™: ${result.borrowerInfo.studentId}`;
    if (result.borrowerInfo.idCard) statusText += `\n‚Ä¢ ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ${result.borrowerInfo.idCard}`;
  }

  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô ***
  if (result.fatherInfo?.name) {
    statusText += '\n\nüë® ‡∏ö‡∏¥‡∏î‡∏≤‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:';
    statusText += `\n‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠: ${result.fatherInfo.name}`;
    if (result.fatherInfo.idCard) statusText += `\n‚Ä¢ ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ${result.fatherInfo.idCard}`;
  }

  if (result.motherInfo?.name) {
    statusText += '\n\nüë© ‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:';
    statusText += `\n‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠: ${result.motherInfo.name}`;
    if (result.motherInfo.idCard) statusText += `\n‚Ä¢ ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ${result.motherInfo.idCard}`;
  }

  // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠ ***
  if (result.profileComparison && result.rawResult?.profileData) {
    const comp = result.profileComparison;
    const profile = result.rawResult.profileData;
    
    statusText += '\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ';
    statusText += '\nüìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:';
    statusText += '\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';
    
    // Student comparison
    if (profile.student) {
      statusText += '\nüë®‚Äçüéì ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤:';
      
      if (result.borrowerInfo?.name && profile.student.name) {
        const match = comp.matches.student_name === true;
        statusText += `\n  ‡∏ä‡∏∑‡πà‡∏≠: ${match ? '‚úÖ' : '‚ùå'}`;
        statusText += `\n    ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${result.borrowerInfo.name}`;
        statusText += `\n    ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ${profile.student.name}`;
      }
      
      if (result.borrowerInfo?.studentId && profile.student.student_id) {
        const match = comp.matches.student_id === true;
        statusText += `\n  ‡∏£‡∏´‡∏±‡∏™: ${match ? '‚úÖ' : '‚ùå'}`;
        statusText += `\n    ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${result.borrowerInfo.studentId}`;
        statusText += `\n    ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ${profile.student.student_id}`;
      }
      
      if (result.borrowerInfo?.idCard && profile.student.citizen_id) {
        const match = comp.matches.student_citizen_id === true;
        statusText += `\n  ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ${match ? '‚úÖ' : '‚ùå'}`;
        statusText += `\n    ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${result.borrowerInfo.idCard}`;
        statusText += `\n    ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ${profile.student.citizen_id}`;
      }
    }
    
    // Father comparison - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠
    if (profile.father && profile.father.name) {
      const fatherMatch = comp.comparisonDetails?.fatherComparison;
      
      statusText += '\n\nüë® ‡∏ö‡∏¥‡∏î‡∏≤:';
      
      if (result.fatherInfo?.name && profile.father.name) {
        const match = comp.matches.father_name === true;
        statusText += `\n  ‡∏ä‡∏∑‡πà‡∏≠: ${match ? '‚úÖ' : '‚ùå'}`;
        statusText += `\n    ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${result.fatherInfo.name}`;
        statusText += `\n    ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ${profile.father.name}`;
      } else if (profile.father.name) {
        statusText += `\n  ‡∏ä‡∏∑‡πà‡∏≠: ‚ùå`;
        statusText += `\n    ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ‡πÑ‡∏°‡πà‡∏û‡∏ö`;
        statusText += `\n    ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ${profile.father.name}`;
      }
      
      if (fatherMatch && fatherMatch.matchPercentage) {
        statusText += `\n  ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${fatherMatch.matchPercentage}%`;
      }
    }
    
    // Mother comparison - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠
    if (profile.mother && profile.mother.name) {
      const motherMatch = comp.comparisonDetails?.motherComparison;
      
      statusText += '\n\nüë© ‡∏°‡∏≤‡∏£‡∏î‡∏≤:';
      
      if (result.motherInfo?.name && profile.mother.name) {
        const match = comp.matches.mother_name === true;
        statusText += `\n  ‡∏ä‡∏∑‡πà‡∏≠: ${match ? '‚úÖ' : '‚ùå'}`;
        statusText += `\n    ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${result.motherInfo.name}`;
        statusText += `\n    ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ${profile.mother.name}`;
      } else if (profile.mother.name) {
        statusText += `\n  ‡∏ä‡∏∑‡πà‡∏≠: ‚ùå`;
        statusText += `\n    ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ‡πÑ‡∏°‡πà‡∏û‡∏ö`;
        statusText += `\n    ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ${profile.mother.name}`;
      }
      
      if (motherMatch && motherMatch.matchPercentage) {
        statusText += `\n  ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${motherMatch.matchPercentage}%`;
      }
    }
    
    statusText += '\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ';
    
    // Overall status
    if (comp.matchStatus === 'full_match') {
      statusText += '\n‚úÖ ‡∏™‡∏£‡∏∏‡∏õ: ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£';
    } else if (comp.matchStatus === 'partial_match') {
      statusText += '\n‚ö†Ô∏è ‡∏™‡∏£‡∏∏‡∏õ: ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô';
    } else if (comp.matchStatus === 'mismatch') {
      statusText += '\n‚ùå ‡∏™‡∏£‡∏∏‡∏õ: ‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô';
    }
    
    if (comp.comparisonDetails) {
      statusText += `\n‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö: ${comp.comparisonDetails.fieldsMatched}/${comp.comparisonDetails.fieldsCompared} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô`;
    }
  }

  if (result.qualityIssues?.length > 0) {
    statusText += '\n\n‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:\n‚Ä¢ ' + result.qualityIssues.join('\n‚Ä¢ ');
  }

  if (result.recommendations?.length > 0) {
    statusText += '\n\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n‚Ä¢ ' + result.recommendations.join('\n‚Ä¢ ');
  }

  message = statusText;
  
  const isValid = result.overall_status === 'valid' && 
                 result.isFamilyStatusCert &&
                 !profileMismatch &&
                 !incompleteness;

  const buttons = [
    {
      text: '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
      style: 'cancel',
      onPress: onReject,
    },
  ];

  if (profileMismatch || incompleteness) {
    buttons.push({
      text: '‡∏ï‡∏Å‡∏•‡∏á',
      style: 'default',
      onPress: onReject,
    });
  } else if (isValid || result.overall_status === 'needs_review') {
    buttons.push({
      text: result.overall_status === 'valid' ? '‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ' : '‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)',
      onPress: () => onAccept(result),
    });
  }

  Alert.alert(title, message, buttons);
};

// Format data for database
export const formatFamilyStatusCertDataForDB = (result, documentType, fileName) => {
  return {
    documentType: documentType,
    fileName: fileName,
    
    basicInfo: {
      isValid: result.isValid || false,
      confidence: result.confidence || 0,
      overall_status: result.overall_status || 'unknown',
      documentType: result.documentType || 'unknown',
      familyStatus: result.familyStatus || 'unknown',
      issuingAuthority: result.issuingAuthority || 'unknown',
    },
    
    signatureInfo: {
      hasOfficialSeal: result.hasOfficialSeal || false,
      hasSignature: result.hasSignature || false,
      signatureQuality: result.signatureQuality || 'missing',
    },
    
    borrowerInfo: result.borrowerInfo || {},
    certifierInfo: result.certifierInfo || {},
    fatherInfo: result.fatherInfo || {},
    motherInfo: result.motherInfo || {},
    familyFinancialInfo: result.familyFinancialInfo || {},
    legalStatus: result.legalStatus || {},
    dataConsistency: result.dataConsistency || {},
    signatures: result.signatures || {},
    extractedData: result.extractedData || {},
    dataCompleteness: result.dataCompleteness || {},
    documentQuality: result.documentQuality || {},
    validityChecks: result.validityChecks || {},

    profileComparison: result.profileComparison ? {
      matchStatus: result.profileComparison.matchStatus,
      matches: result.profileComparison.matches,
      mismatches: result.profileComparison.mismatches,
      warnings: result.profileComparison.warnings,
      comparisonDetails: result.profileComparison.comparisonDetails
    } : null,
    
    qualityIssues: result.qualityIssues || [],
    recommendations: result.recommendations || [],
    
    metadata: {
      validatedAt: new Date().toISOString(),
      aiModel: 'gemini-2.0-flash',
      profileCheckEnabled: !!result.profileComparison
    }
  };
};

// Check requirements
export const checkFamilyStatusCertRequirements = (result) => {
  if (!result) return { passed: false, issues: ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'] };

  const issues = [];
  
  if (!result.isFamilyStatusCert) issues.push('‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß');
  if (!result.hasOfficialSeal) issues.push('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£');
  if (!result.hasSignature) issues.push('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô');
  
  if (result.dataCompleteness) {
    if (!result.dataCompleteness.hasBorrowerInfo) issues.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    if (!result.dataCompleteness.hasCertifierInfo) issues.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    if (!result.dataCompleteness.hasFinancialInfo) issues.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    if (!result.dataCompleteness.hasLegalStatus) issues.push('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢');
  }
  
  if (result.validityChecks) {
    if (!result.validityChecks.idCardsValid) issues.push('‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    if (!result.validityChecks.financialDataValid) issues.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•');
  }
  
  if (result.profileComparison?.matchStatus === 'mismatch') {
    issues.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå');
  }

  return {
    passed: issues.length === 0,
    issues: issues,
    requirements: {
      isFamilyStatusCert: result.isFamilyStatusCert,
      hasOfficialSeal: result.hasOfficialSeal,
      hasSignature: result.hasSignature,
      dataComplete: result.dataCompleteness?.completenessScore >= 90,
      profileMatches: result.profileComparison?.matchStatus !== 'mismatch'
    }
  };
};

// Generate summary
export const generateFamilyStatusCertSummary = (result) => {
  if (!result) return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö';

  const requirements = checkFamilyStatusCertRequirements(result);
  
  let summary = `üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß\n\n`;
  summary += `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${result.overall_status === 'valid' ? '‚úÖ ‡∏ú‡πà‡∏≤‡∏ô' : result.overall_status === 'needs_review' ? '‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' : '‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'}\n`;
  summary += `‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß: ${result.familyStatus}\n`;
  summary += `‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${result.confidence}%\n`;
  
  if (result.dataCompleteness) {
    summary += `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ${result.dataCompleteness.completenessScore}%\n`;
  }

  summary += `\n‚úÖ ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î:\n`;
  summary += `${requirements.requirements.isFamilyStatusCert ? '‚úÖ' : '‚ùå'} ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß\n`;
  summary += `${requirements.requirements.hasOfficialSeal ? '‚úÖ' : '‚ùå'} ‡∏°‡∏µ‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£\n`;
  summary += `${requirements.requirements.hasSignature ? '‚úÖ' : '‚ùå'} ‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô\n`;
  summary += `${requirements.requirements.dataComplete ? '‚úÖ' : '‚ùå'} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô\n`;
  summary += `${requirements.requirements.profileMatches ? '‚úÖ' : '‚ùå'} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå\n`;

  if (result.borrowerInfo && result.borrowerInfo.name) {
    summary += `\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ:\n`;
    summary += `‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠: ${result.borrowerInfo.name}\n`;
    if (result.borrowerInfo.studentId) summary += `‚Ä¢ ‡∏£‡∏´‡∏±‡∏™: ${result.borrowerInfo.studentId}\n`;
  }

  if (result.fatherInfo?.name || result.motherInfo?.name) {
    summary += `\nüë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á:\n`;
    if (result.fatherInfo?.name) summary += `‚Ä¢ ‡∏ö‡∏¥‡∏î‡∏≤: ${result.fatherInfo.name}\n`;
    if (result.motherInfo?.name) summary += `‚Ä¢ ‡∏°‡∏≤‡∏£‡∏î‡∏≤: ${result.motherInfo.name}\n`;
  }

  if (result.profileComparison) {
    summary += `\nüë§ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:\n`;
    const comp = result.profileComparison;
    if (comp.matchStatus === 'full_match') {
      summary += `‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£\n`;
    } else if (comp.matchStatus === 'mismatch') {
      summary += `‚ùå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô:\n`;
      comp.mismatches.forEach(m => {
        summary += `  ‚Ä¢ ${m.field}: ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£="${m.extracted}" ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå="${m.profile}"\n`;
      });
    }
  }

  if (!requirements.passed) {
    summary += `\n‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:\n`;
    requirements.issues.forEach(issue => {
      summary += `‚Ä¢ ${issue}\n`;
    });
  }

  return summary;
};

// Validate multiple certificates
export const validateMultipleFamilyStatusCerts = async (files, includeProfileCheck = true) => {
  const results = [];
  
  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    try {
      const result = await validateFamilyStatusCert(file.uri, file.mimeType, includeProfileCheck);
      results.push({
        fileIndex: i,
        fileName: file.name || file.filename,
        validation: result,
        success: true,
        dataComplete: result.dataCompleteness?.completenessScore >= 90,
        profileMatch: result.profileComparison?.matchStatus !== 'mismatch'
      });
    } catch (error) {
      results.push({
        fileIndex: i,
        fileName: file.name || file.filename,
        error: error.message,
        success: false,
        dataComplete: false,
        profileMatch: false
      });
    }
  }
  
  return results;
};

// Check AI status
export const checkFamilyStatusCertAIStatus = async () => {
  try {
    console.log('ü§ñ Checking FamilyStatus AI backend status...');

    if (!GEMINI_API_KEY || GEMINI_API_KEY === 'YOUR_GEMINI_API_KEY_HERE') {
      return { 
        available: false, 
        error: 'API key not configured'
      };
    }

    const initialized = initializeGemini();
    if (!initialized) {
      return { 
        available: false, 
        error: 'Failed to initialize AI'
      };
    }

    try {
      const testResult = await model.generateContent("Test connection - respond with OK");
      const testResponse = await testResult.response;
      testResponse.text();
      
      return { 
        available: true, 
        method: 'client',
        profileCheckEnabled: true,
        config: {
          apiKey: '***configured***',
          model: 'gemini-2.0-flash'
        }
      };
    } catch (testError) {
      return { 
        available: false, 
        error: testError.message
      };
    }
    
  } catch (error) {
    return { 
      available: false, 
      error: error.message
    };
  }
};