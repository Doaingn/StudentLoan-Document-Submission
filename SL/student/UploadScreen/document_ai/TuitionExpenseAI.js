// documents_ai/TuitionExpenseAI.js - AI validation for Tuition Expense documents with profile comparison
import { GoogleGenerativeAI } from "@google/generative-ai";
import * as FileSystem from 'expo-file-system/legacy';
import { Alert } from 'react-native';
import { doc, getDoc } from "firebase/firestore";
import { db, auth } from "../../../database/firebase";

// Configuration
const GEMINI_API_KEY = process.env.EXPO_PUBLIC_GEMINI_API_KEY;
const AI_BACKEND_URL = process.env.EXPO_PUBLIC_AI_BACKEND_URL || 'http://192.168.1.103:3001';
const USE_BACKEND_SERVER = process.env.EXPO_PUBLIC_USE_AI_BACKEND === 'true';

// Validation requirements for Tuition Expense document
const TUITION_EXPENSE_REQUIREMENTS = {
  requiredColumns: [
    '‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
    '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
    '‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
    '‡∏£‡∏±‡∏ö',
    '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'
  ],
  mustHaveRInLatestTerm: true,
  validTypes: ['R', 'E', 'F', 'I', 'N', 'P']
};

let genAI = null;
let model = null;

console.log('üîß TuitionExpenseAI Configuration:');
console.log('- Backend URL:', AI_BACKEND_URL);
console.log('- Use Backend:', USE_BACKEND_SERVER);
console.log('- API Key configured:', !!GEMINI_API_KEY);
console.log('- Validation requirements:', TUITION_EXPENSE_REQUIREMENTS);

// Initialize Gemini AI for client-side processing
const initializeGemini = () => {
  if (!genAI && GEMINI_API_KEY) {
    try {
      genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
      model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
      console.log('‚úì Gemini AI initialized successfully for TuitionExpense');
      return true;
    } catch (error) {
      console.error('Failed to initialize Gemini AI for TuitionExpense:', error);
      return false;
    }
  }
  return !!genAI;
};

// Fetch user profile data from Firebase
export const fetchUserProfileData = async () => {
  try {
    const user = auth.currentUser;
    if (!user) {
      console.warn('‚ö†Ô∏è No authenticated user found');
      return null;
    }

    console.log('üì• Fetching user profile data from Firebase...');
    const userDoc = await getDoc(doc(db, "users", user.uid));
    
    if (!userDoc.exists()) {
      console.warn('‚ö†Ô∏è User document not found');
      return null;
    }

    const userData = userDoc.data();
    console.log('‚úÖ User profile data fetched successfully');
    
    return {
      name: userData.name || null,
      student_id: userData.student_id || null,
      citizen_id: userData.citizen_id || null,
    };
  } catch (error) {
    console.error('‚ùå Error fetching user profile data:', error);
    return null;
  }
};

// Compare extracted student name with profile data
const compareWithProfile = (extractedData, profileData) => {
  if (!profileData || !extractedData) {
    return {
      matchStatus: 'no_profile_data',
      matches: {},
      mismatches: [],
      warnings: ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö']
    };
  }

  const matches = {};
  const mismatches = [];
  const warnings = [];

  // Helper function to normalize Thai text for comparison
  const normalizeText = (text) => {
    if (!text) return '';
    return text.toString().trim().toLowerCase()
      .replace(/\s+/g, ' ')
      .replace(/[^\u0E00-\u0E7Fa-z0-9\s]/g, '');
  };

  // Extract student name from the document header or title
  // The document should contain student ID and name (e.g., "B6641214 ‡∏ô‡∏≤‡∏¢‡∏ì‡∏±‡∏ê‡∏û‡∏á‡∏©‡πå ‡∏ä‡∏ô‡∏∞‡∏Å‡∏µ")
  const extractedName = extractedData.studentName;
  const extractedStudentId = extractedData.studentId;

  // Compare student name
  if (extractedName && profileData.name) {
    const normalizedExtracted = normalizeText(extractedName);
    const normalizedProfile = normalizeText(profileData.name);
    
    if (normalizedExtracted === normalizedProfile) {
      matches.name = true;
    } else if (normalizedExtracted.includes(normalizedProfile) || normalizedProfile.includes(normalizedExtracted)) {
      matches.name = true;
      warnings.push('‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
    } else {
      matches.name = false;
      mismatches.push({
        field: '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
        extracted: extractedName,
        profile: profileData.name
      });
    }
  }

  // Compare student ID
  if (extractedStudentId && profileData.student_id) {
    const normalizedExtractedId = extractedStudentId.replace(/\D/g, '');
    const normalizedProfileId = profileData.student_id.replace(/\D/g, '');
    
    if (normalizedExtractedId === normalizedProfileId) {
      matches.student_id = true;
    } else {
      matches.student_id = false;
      mismatches.push({
        field: '‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
        extracted: extractedStudentId,
        profile: profileData.student_id
      });
    }
  }

  // Determine overall match status
  let matchStatus = 'full_match';
  if (mismatches.length > 0) {
    matchStatus = 'mismatch';
  } else if (warnings.length > 0) {
    matchStatus = 'partial_match';
  } else if (Object.keys(matches).length === 0) {
    matchStatus = 'insufficient_data';
    warnings.push('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö');
  }

  return {
    matchStatus,
    matches,
    mismatches,
    warnings,
    comparisonDetails: {
      fieldsCompared: Object.keys(matches).length,
      fieldsMatched: Object.values(matches).filter(v => v === true).length,
      fieldsMismatched: mismatches.length
    }
  };
};

// Check if AI backend server is available
const checkBackendServer = async () => {
  try {
    console.log('üîç Checking backend server for TuitionExpense at:', AI_BACKEND_URL);
    
    const response = await fetch(`${AI_BACKEND_URL}/health`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      timeout: 10000,
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úì AI Backend Server is available for TuitionExpense:', data.status);
      return true;
    } else {
      console.log('‚ùå Backend server responded with error:', response.status);
      return false;
    }
  } catch (error) {
    console.log('‚ùå AI Backend Server not available for TuitionExpense:', error.message);
    return false;
  }
};

// Server-side validation for Tuition Expense
const validateTuitionExpenseViaServer = async (fileUri, mimeType, profileData) => {
  try {
    console.log('üì§ Uploading to server for tuition expense validation...');
    
    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) {
      throw new Error('File does not exist');
    }

    const formData = new FormData();
    const file = {
      uri: fileUri,
      type: mimeType || 'image/jpeg',
      name: `tuition_expense_${Date.now()}.${mimeType ? mimeType.split('/')[1] : 'jpg'}`,
    };
    
    formData.append('document', file);
    if (profileData) {
      formData.append('profileData', JSON.stringify(profileData));
    }

    const response = await fetch(`${AI_BACKEND_URL}/ai/validate/tuition-expense`, {
      method: 'POST',
      body: formData,
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Server validation error:', errorText);
      throw new Error(`Server returned ${response.status}: ${errorText}`);
    }

    const result = await response.json();
    console.log('‚úÖ Server TuitionExpense validation completed');
    
    return result.validation;

  } catch (error) {
    console.error('‚ùå Server TuitionExpense validation error:', error);
    throw error;
  }
};

// Convert file to format suitable for Gemini (client-side)
const prepareFileForGemini = async (fileUri, mimeType) => {
  try {
    console.log('üìÅ Preparing TuitionExpense file for Gemini AI...');
    
    const base64Data = await FileSystem.readAsStringAsync(fileUri, {
      encoding: FileSystem.EncodingType.Base64,
    });

    let actualMimeType = mimeType;
    if (!actualMimeType) {
      const fileExtension = fileUri.split('.').pop()?.toLowerCase();
      switch (fileExtension) {
        case 'jpg':
        case 'jpeg':
          actualMimeType = 'image/jpeg';
          break;
        case 'png':
          actualMimeType = 'image/png';
          break;
        case 'pdf':
          actualMimeType = 'application/pdf';
          break;
        default:
          actualMimeType = 'image/jpeg';
      }
    }

    console.log('‚úÖ TuitionExpense file prepared for Gemini');
    return {
      inlineData: {
        data: base64Data,
        mimeType: actualMimeType,
      },
    };
  } catch (error) {
    console.error('‚ùå Error preparing TuitionExpense file for Gemini:', error);
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ: ${error.message}`);
  }
};

// Client-side Tuition Expense validation
const validateTuitionExpenseClientSide = async (fileUri, mimeType, profileData) => {
  console.log('ü§ñ Starting client-side tuition expense validation...');
  
  if (!model) {
    const initialized = initializeGemini();
    if (!initialized) {
      throw new Error('‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key');
    }
  }

  const filePart = await prepareFileForGemini(fileUri, mimeType);

  let profileInfo = '';
  if (profileData) {
    profileInfo = `

**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:**
- ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${profileData.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${profileData.student_id || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤) ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå`;
  }

  const prompt = `
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏†‡∏≤‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
${profileInfo}

**‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:**
1. ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: ‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤, ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏, ‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô, ‡∏£‡∏±‡∏ö, ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
2. ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏ó‡∏≠‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î) **‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß "R"**
3. ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: R (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô- ‡∏Å‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠ ‡∏ó‡∏∏‡∏ô‡∏ó‡∏ö‡∏ß‡∏á), E, F, I, N, P
4. ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
5. ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Ñ‡∏ß‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏∏‡∏ô (‡πÄ‡∏ä‡πà‡∏ô "‡∏ó‡∏∏‡∏ô‡∏Ñ‡∏ì‡∏¥‡∏ï -‡∏Ñ‡∏ì‡∏à‡∏à. - (‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô+‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤)")
6. **‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•) ‡πÄ‡∏ä‡πà‡∏ô "B6641214 ‡∏ô‡∏≤‡∏¢‡∏ì‡∏±‡∏ê‡∏û‡∏á‡∏©‡πå ‡∏ä‡∏ô‡∏∞‡∏Å‡∏µ"**

**‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:**
- E: ‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô- ‡πÑ‡∏°‡πà‡∏Å‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠ (‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å)
- F: ‡∏ó‡∏∏‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ)
- I: ‡∏ó‡∏∏‡∏ô‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ)
- N: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô- ‡πÑ‡∏°‡πà‡∏Å‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠ (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô)
- P: ‡∏Ñ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡∏à‡πà‡∏≤‡∏¢
- R: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô- ‡∏Å‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠ (‡∏ó‡∏∏‡∏ô‡∏ó‡∏ö‡∏ß‡∏á)

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isTuitionExpenseDoc": true/false,
  "confidence": 0-100,
  "documentType": "‡∏†‡∏≤‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤/‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  "hasRequiredColumns": true/false,
  "imageQuality": "clear/blurry/poor/excellent",
  "studentInfo": {
    "studentId": "‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô B6641214",
    "studentName": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏≤‡∏¢‡∏ì‡∏±‡∏ê‡∏û‡∏á‡∏©‡πå ‡∏ä‡∏ô‡∏∞‡∏Å‡∏µ"
  },
  "extractedData": {
    "latestTerm": "‡∏†‡∏≤‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÄ‡∏ä‡πà‡∏ô 1/2568",
    "latestTermType": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÄ‡∏ä‡πà‡∏ô R",
    "latestTermScholarship": "‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∏‡∏ô‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
    "latestTermAmount": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
    "latestTermNote": "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
    "totalTerms": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    "allTerms": [
      {
        "term": "‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
        "scholarship": "‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
        "amount": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô",
        "received": "‡∏£‡∏±‡∏ö",
        "type": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
        "note": "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"
      }
    ]
  },
  "validation": {
    "hasRInLatestTerm": true/false,
    "latestTermTypeValid": true/false,
    "latestTermDetails": "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ó‡∏≠‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
  },
  "qualityIssues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"],
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"],
  "overall_status": "valid/invalid/needs_review"
}

**‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å:**
- ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏ó‡∏≠‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î) ‡∏°‡∏µ‡∏ï‡∏±‡∏ß "R" ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß "R" ‡πÉ‡∏ô‡∏†‡∏≤‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÉ‡∏´‡πâ overall_status ‡πÄ‡∏õ‡πá‡∏ô "invalid"
- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß "R" ‡πÉ‡∏ô‡∏†‡∏≤‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÉ‡∏´‡πâ overall_status ‡πÄ‡∏õ‡πá‡∏ô "valid"
- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
- ‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏Ñ
`;

  try {
    const result = await model.generateContent([prompt, filePart]);
    const response = await result.response;
    const responseText = response.text();

    console.log('ü§ñ TuitionExpense AI Response received');

    let parsed;
    try {
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        parsed = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('No JSON found in response');
      }
    } catch (parseError) {
      console.warn('‚ö†Ô∏è Failed to parse TuitionExpense AI response as JSON, using text analysis');
      parsed = analyzeTuitionExpenseTextResponse(responseText);
    }

    // Add profile comparison
    if (profileData && parsed.studentInfo) {
      const comparison = compareWithProfile(parsed.studentInfo, profileData);
      parsed.profileComparison = comparison;

      // Add comparison results to quality issues and recommendations
      if (comparison.mismatches.length > 0) {
        parsed.qualityIssues = parsed.qualityIssues || [];
        comparison.mismatches.forEach(mismatch => {
          parsed.qualityIssues.push(
            `${mismatch.field}‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£="${mismatch.extracted}" ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå="${mismatch.profile}"`
          );
        });
        
        parsed.recommendations = parsed.recommendations || [];
        parsed.recommendations.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå');
        
        if (parsed.overall_status === 'valid') {
          parsed.overall_status = 'needs_review';
        }
      }

      if (comparison.warnings.length > 0) {
        parsed.recommendations = parsed.recommendations || [];
        parsed.recommendations.push(...comparison.warnings);
      }
    }

    console.log('‚úÖ Client-side TuitionExpense validation completed');
    return parsed;
  } catch (error) {
    console.error('‚ùå Client-side TuitionExpense validation failed:', error);
    throw error;
  }
};

// Fallback text analysis for Tuition Expense
const analyzeTuitionExpenseTextResponse = (text) => {
  const lowerText = text.toLowerCase();
  
  const isTuitionDoc = lowerText.includes('‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤') || 
                       lowerText.includes('‡∏†‡∏≤‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢') ||
                       lowerText.includes('‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤') ||
                       lowerText.includes('tuition');
  
  const hasRequiredColumns = lowerText.includes('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó') &&
                            lowerText.includes('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô') &&
                            lowerText.includes('‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤');

  const hasR = lowerText.includes(' r ') || 
               lowerText.includes('"r"') ||
               lowerText.includes('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó r') ||
               /type.*r/i.test(text);

  return {
    isTuitionExpenseDoc: isTuitionDoc,
    confidence: isTuitionDoc ? 70 : 30,
    documentType: isTuitionDoc ? '‡∏†‡∏≤‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤' : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
    hasRequiredColumns,
    imageQuality: 'unclear',
    studentInfo: {
      studentId: null,
      studentName: null
    },
    extractedData: {
      latestTerm: null,
      latestTermType: hasR ? 'R' : null,
      latestTermScholarship: null,
      latestTermAmount: null,
      latestTermNote: null,
      totalTerms: 0,
      allTerms: []
    },
    validation: {
      hasRInLatestTerm: hasR,
      latestTermTypeValid: hasR,
      latestTermDetails: hasR ? '‡∏û‡∏ö‡∏ï‡∏±‡∏ß R ‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£' : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß R'
    },
    qualityIssues: !isTuitionDoc ? ['‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏†‡∏≤‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏∏‡∏ô'] : !hasR ? ['‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß R ‡πÉ‡∏ô‡∏†‡∏≤‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'] : [],
    recommendations: !isTuitionDoc ? ['‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏†‡∏≤‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤'] : !hasR ? ['‡∏†‡∏≤‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó R'] : [],
    overall_status: isTuitionDoc && hasR ? 'valid' : 'invalid',
    rawResponse: text
  };
};

// Main validation function for Tuition Expense
export const validateTuitionExpense = async (fileUri, mimeType = null, includeProfileCheck = true) => {
  try {
    console.log('üöÄ Starting tuition expense document validation...');
    console.log('File URI:', fileUri);
    console.log('MIME Type:', mimeType);
    console.log('Validation Requirements:', TUITION_EXPENSE_REQUIREMENTS);

    // Check if file exists
    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) {
      throw new Error('‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà');
    }

    // Fetch profile data if requested
    let profileData = null;
    if (includeProfileCheck) {
      profileData = await fetchUserProfileData();
      if (profileData) {
        console.log('‚úÖ Profile data loaded for comparison');
      }
    }

    // Try server-side validation first if enabled
    if (USE_BACKEND_SERVER) {
      try {
        const serverAvailable = await checkBackendServer();
        if (serverAvailable) {
          console.log('‚úÖ Using server-side TuitionExpense validation');
          return await validateTuitionExpenseViaServer(fileUri, mimeType, profileData);
        }
      } catch (serverError) {
        console.log('‚ö†Ô∏è Server TuitionExpense validation failed, falling back to client-side:', serverError.message);
      }
    }

    // Fall back to client-side validation
    console.log('‚úÖ Using client-side TuitionExpense validation');
    return await validateTuitionExpenseClientSide(fileUri, mimeType, profileData);

  } catch (error) {
    console.error('‚ùå TuitionExpense validation error:', error);
    throw new Error(`‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏∏‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
  }
};

// Parse and format Tuition Expense validation result
export const parseTuitionExpenseResult = (result) => {
  if (!result) return null;

  return {
    isValid: result.overall_status === 'valid' && 
             result.isTuitionExpenseDoc && 
             result.validation?.hasRInLatestTerm &&
             (result.profileComparison?.matchStatus !== 'mismatch'),
    confidence: result.confidence || 0,
    status: result.overall_status || 'unknown',
    documentType: result.documentType || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
    hasRequiredColumns: result.hasRequiredColumns || false,
    imageQuality: result.imageQuality || 'unclear',
    studentInfo: result.studentInfo || {},
    extractedData: result.extractedData || {},
    validation: result.validation || {},
    profileComparison: result.profileComparison || null,
    qualityIssues: result.qualityIssues || [],
    recommendations: result.recommendations || [],
    rawResult: result
  };
};

// Show validation alert for Tuition Expense
export const showTuitionExpenseValidationAlert = (result, onAccept, onReject) => {
  let title, message;

  const hasRInLatestTerm = result.validation?.hasRInLatestTerm;
  const profileMismatch = result.profileComparison?.matchStatus === 'mismatch';
  
  if (!result.isTuitionExpenseDoc) {
    title = '‚ùå ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
  } else if (!hasRInLatestTerm) {
    title = '‚ùå ‡∏†‡∏≤‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß R';
  } else if (profileMismatch) {
    title = '‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå';
  } else if (result.overall_status === 'valid') {
    title = '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏∏‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
  } else {
    title = '‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤';
  }
  
  let statusText = '';
  if (result.isTuitionExpenseDoc) {
    statusText += '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏†‡∏≤‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏∏‡∏ô\n';
  } else {
    statusText += '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏†‡∏≤‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏∏‡∏ô\n';
  }

  if (result.hasRequiredColumns) {
    statusText += '‚úÖ ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô\n';
  } else {
    statusText += '‚ùå ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô\n';
  }

  // Student info
  if (result.studentInfo) {
    statusText += '\nüë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤:\n';
    if (result.studentInfo.studentId) {
      statusText += `‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${result.studentInfo.studentId}\n`;
    }
    if (result.studentInfo.studentName) {
      statusText += `‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${result.studentInfo.studentName}\n`;
    }
  }

  // Profile comparison
  if (result.profileComparison) {
    const comp = result.profileComparison;
    statusText += '\nüîç ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:\n';
    
    if (comp.matchStatus === 'full_match') {
      statusText += '‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£\n';
    } else if (comp.matchStatus === 'partial_match') {
      statusText += '‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô\n';
    } else if (comp.matchStatus === 'mismatch') {
      statusText += '‚ùå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô:\n';
      comp.mismatches.forEach(m => {
        statusText += `  ‚Ä¢ ${m.field}\n`;
        statusText += `    ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${m.extracted}\n`;
        statusText += `    ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ${m.profile}\n`;
      });
    } else if (comp.matchStatus === 'insufficient_data') {
      statusText += '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£\n';
    }
    
    if (comp.comparisonDetails) {
      statusText += `\n‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö: ${comp.comparisonDetails.fieldsMatched}/${comp.comparisonDetails.fieldsCompared} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`;
    }
  }

  // Latest term validation
  if (result.extractedData?.latestTerm) {
    statusText += `\nüìã ‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${result.extractedData.latestTerm}\n`;
    
    if (result.extractedData.latestTermType) {
      statusText += `‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${result.extractedData.latestTermType}`;
      if (hasRInLatestTerm) {
        statusText += ' ‚úÖ\n';
      } else {
        statusText += ' ‚ùå (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô R)\n';
      }
    }
    
    if (result.extractedData.latestTermScholarship) {
      statusText += `‚Ä¢ ‡∏ó‡∏∏‡∏ô: ${result.extractedData.latestTermScholarship}\n`;
    }
    
    if (result.extractedData.latestTermAmount) {
      statusText += `‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ${result.extractedData.latestTermAmount}\n`;
    }
    
    if (result.extractedData.latestTermNote) {
      statusText += `‚Ä¢ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${result.extractedData.latestTermNote}\n`;
    }
  }

  if (result.extractedData?.totalTerms) {
    statusText += `\nüìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${result.extractedData.totalTerms} ‡∏†‡∏≤‡∏Ñ\n`;
  }

  statusText += `\nüéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${result.confidence}%`;
  statusText += `\n‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏£‡∏π‡∏õ: ${result.imageQuality}`;

  if (result.qualityIssues && result.qualityIssues.length > 0) {
    statusText += '\n\n‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:\n‚Ä¢ ' + result.qualityIssues.join('\n‚Ä¢ ');
  }

  if (result.recommendations && result.recommendations.length > 0) {
    statusText += '\n\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n‚Ä¢ ' + result.recommendations.join('\n‚Ä¢ ');
  }

  message = statusText;
  
  const isValid = result.overall_status === 'valid' && 
                 result.isTuitionExpenseDoc && 
                 hasRInLatestTerm &&
                 !profileMismatch;

  const buttons = [
    {
      text: '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
      style: 'cancel',
      onPress: onReject,
    },
  ];

  if ((!hasRInLatestTerm && result.isTuitionExpenseDoc) || profileMismatch) {
    buttons.push({
      text: '‡∏ï‡∏Å‡∏•‡∏á',
      style: 'default',
      onPress: onReject,
    });
  } else if (isValid || result.overall_status === 'needs_review') {
    buttons.push({
      text: result.overall_status === 'valid' ? '‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ' : '‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)',
      onPress: () => {
        onAccept(result);
      },
    });
  }

  Alert.alert(title, message, buttons);
};

// Get document type display name
export const getTuitionExpenseTypeName = () => {
  return '‡∏†‡∏≤‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤';
};

// Check TuitionExpense AI backend status
export const checkTuitionExpenseAIStatus = async () => {
  try {
    console.log('ü§ñ Checking TuitionExpense AI backend status...');

    if (USE_BACKEND_SERVER) {
      const serverAvailable = await checkBackendServer();
      if (serverAvailable) {
        try {
          console.log('üî¨ Testing TuitionExpense AI connection through server...');
          const response = await fetch(`${AI_BACKEND_URL}/ai/test`);
          if (response.ok) {
            const data = await response.json();
            console.log('‚úì TuitionExpense AI backend server is available and working');
            return { 
              available: true, 
              method: 'server',
              requirements: TUITION_EXPENSE_REQUIREMENTS,
              profileCheckEnabled: true,
              config: {
                backendUrl: AI_BACKEND_URL,
                useBackend: USE_BACKEND_SERVER
              }
            };
          }
        } catch (error) {
          console.log('‚ùå Server TuitionExpense AI test failed:', error.message);
        }
      }
    }

    if (!GEMINI_API_KEY || GEMINI_API_KEY === 'YOUR_GEMINI_API_KEY_HERE') {
      console.error('‚ùå Gemini API key not configured for TuitionExpense');
      return { 
        available: false, 
        error: 'API key not configured',
        requirements: TUITION_EXPENSE_REQUIREMENTS 
      };
    }

    const initialized = initializeGemini();
    if (!initialized) {
      console.error('‚ùå Failed to initialize Gemini AI for TuitionExpense');
      return { 
        available: false, 
        error: 'Failed to initialize AI',
        requirements: TUITION_EXPENSE_REQUIREMENTS 
      };
    }

    try {
      console.log('üî¨ Testing client-side TuitionExpense AI connection...');
      const testResult = await model.generateContent("Test connection - respond with OK");
      const testResponse = await testResult.response;
      const text = testResponse.text();
      
      console.log('‚úì Client-side TuitionExpense AI is available');
      return { 
        available: true, 
        method: 'client',
        requirements: TUITION_EXPENSE_REQUIREMENTS,
        profileCheckEnabled: true,
        config: {
          apiKey: '***configured***',
          model: 'gemini-2.0-flash'
        }
      };
    } catch (testError) {
      console.error('‚ùå Client-side TuitionExpense AI test failed:', testError.message);
      return { 
        available: false, 
        error: testError.message,
        requirements: TUITION_EXPENSE_REQUIREMENTS 
      };
    }
    
  } catch (error) {
    console.error('‚ùå TuitionExpense AI backend check failed:', error);
    return { 
      available: false, 
      error: error.message,
      requirements: TUITION_EXPENSE_REQUIREMENTS 
    };
  }
};

// Format data for database storage
export const formatTuitionExpenseDataForDB = (result, documentType, fileName) => {
  return {
    documentType: documentType,
    fileName: fileName,
    
    basicInfo: {
      isValid: result.isValid || false,
      confidence: result.confidence || 0,
      overall_status: result.overall_status || 'unknown',
      documentType: result.documentType || 'unknown',
      imageQuality: result.imageQuality || 'unclear'
    },
    
    studentInfo: {
      studentId: result.studentInfo?.studentId || null,
      studentName: result.studentInfo?.studentName || null
    },
    
    extractedData: {
      latestTerm: result.extractedData?.latestTerm || null,
      latestTermType: result.extractedData?.latestTermType || null,
      latestTermScholarship: result.extractedData?.latestTermScholarship || null,
      latestTermAmount: result.extractedData?.latestTermAmount || null,
      latestTermNote: result.extractedData?.latestTermNote || null,
      totalTerms: result.extractedData?.totalTerms || 0,
      allTerms: result.extractedData?.allTerms || []
    },
    
    validation: {
      hasRInLatestTerm: result.validation?.hasRInLatestTerm || false,
      latestTermTypeValid: result.validation?.latestTermTypeValid || false,
      latestTermDetails: result.validation?.latestTermDetails || ''
    },

    profileComparison: result.profileComparison ? {
      matchStatus: result.profileComparison.matchStatus,
      matches: result.profileComparison.matches,
      mismatches: result.profileComparison.mismatches,
      warnings: result.profileComparison.warnings,
      comparisonDetails: result.profileComparison.comparisonDetails
    } : null,
    
    requirements: {
      hasRequiredColumns: result.hasRequiredColumns || false,
      mustHaveRInLatestTerm: true
    },
    
    issues: {
      qualityIssues: result.qualityIssues || [],
      recommendations: result.recommendations || []
    },
    
    metadata: {
      validatedAt: new Date().toISOString(),
      aiModel: 'gemini-2.0-flash',
      profileCheckEnabled: !!result.profileComparison,
      validationRequirements: TUITION_EXPENSE_REQUIREMENTS
    }
  };
};

// Check tuition expense requirements
export const checkTuitionExpenseRequirements = (result) => {
  if (!result) return { passed: false, issues: ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'] };

  const issues = [];
  
  if (!result.isTuitionExpenseDoc) issues.push('‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏†‡∏≤‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏∏‡∏ô');
  if (!result.hasRequiredColumns) issues.push('‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
  if (!result.validation?.hasRInLatestTerm) issues.push('‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß R');
  if (result.imageQuality === 'poor' || result.imageQuality === 'blurry') issues.push('‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô');
  
  // Check profile comparison
  if (result.profileComparison?.matchStatus === 'mismatch') {
    issues.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå');
  }

  return {
    passed: issues.length === 0,
    issues: issues,
    requirements: {
      isTuitionExpenseDoc: result.isTuitionExpenseDoc,
      hasRequiredColumns: result.hasRequiredColumns,
      hasRInLatestTerm: result.validation?.hasRInLatestTerm,
      goodImageQuality: result.imageQuality !== 'poor' && result.imageQuality !== 'blurry',
      profileMatches: result.profileComparison?.matchStatus !== 'mismatch'
    }
  };
};

// Generate summary
export const generateTuitionExpenseSummary = (result) => {
  if (!result) return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö';

  const requirements = checkTuitionExpenseRequirements(result);
  
  let summary = `üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤\n\n`;
  summary += `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${result.overall_status === 'valid' ? '‚úÖ ‡∏ú‡πà‡∏≤‡∏ô' : result.overall_status === 'needs_review' ? '‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' : '‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'}\n`;
  summary += `‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${result.confidence}%\n\n`;

  summary += `‚úÖ ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î:\n`;
  summary += `${requirements.requirements.isTuitionExpenseDoc ? '‚úÖ' : '‚ùå'} ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏†‡∏≤‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏∏‡∏ô\n`;
  summary += `${requirements.requirements.hasRequiredColumns ? '‚úÖ' : '‚ùå'} ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô\n`;
  summary += `${requirements.requirements.hasRInLatestTerm ? '‚úÖ' : '‚ùå'} ‡∏†‡∏≤‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó R\n`;
  summary += `${requirements.requirements.goodImageQuality ? '‚úÖ' : '‚ùå'} ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏£‡∏π‡∏õ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô\n`;
  summary += `${requirements.requirements.profileMatches ? '‚úÖ' : '‚ùå'} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå\n`;

  if (result.studentInfo) {
    summary += `\nüë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤:\n`;
    if (result.studentInfo.studentId) summary += `‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${result.studentInfo.studentId}\n`;
    if (result.studentInfo.studentName) summary += `‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${result.studentInfo.studentName}\n`;
  }

  if (result.profileComparison) {
    summary += `\nüîç ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:\n`;
    const comp = result.profileComparison;
    if (comp.matchStatus === 'full_match') {
      summary += `‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£\n`;
    } else if (comp.matchStatus === 'mismatch') {
      summary += `‚ùå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô:\n`;
      comp.mismatches.forEach(m => {
        summary += `  ‚Ä¢ ${m.field}: ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£="${m.extracted}" ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå="${m.profile}"\n`;
      });
    }
  }

  if (result.extractedData) {
    summary += `\nüìã ‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:\n`;
    if (result.extractedData.latestTerm) summary += `‚Ä¢ ‡∏†‡∏≤‡∏Ñ: ${result.extractedData.latestTerm}\n`;
    if (result.extractedData.latestTermType) summary += `‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${result.extractedData.latestTermType}\n`;
    if (result.extractedData.latestTermScholarship) summary += `‚Ä¢ ‡∏ó‡∏∏‡∏ô: ${result.extractedData.latestTermScholarship}\n`;
    if (result.extractedData.latestTermAmount) summary += `‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ${result.extractedData.latestTermAmount}\n`;
    if (result.extractedData.totalTerms) summary += `\nüìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${result.extractedData.totalTerms} ‡∏†‡∏≤‡∏Ñ\n`;
  }

  if (!requirements.passed) {
    summary += `\n‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:\n`;
    requirements.issues.forEach(issue => {
      summary += `‚Ä¢ ${issue}\n`;
    });
  }

  return summary;
};

// Validate multiple tuition expense documents
export const validateMultipleTuitionExpenses = async (files, includeProfileCheck = true) => {
  const results = [];
  
  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    try {
      const result = await validateTuitionExpense(
        file.uri, 
        file.mimeType,
        includeProfileCheck
      );
      results.push({
        fileIndex: i,
        fileName: file.name || file.filename,
        validation: result,
        success: true,
        hasRInLatestTerm: result.validation?.hasRInLatestTerm,
        profileMatch: result.profileComparison?.matchStatus !== 'mismatch'
      });
    } catch (error) {
      results.push({
        fileIndex: i,
        fileName: file.name || file.filename,
        error: error.message,
        success: false,
        hasRInLatestTerm: false,
        profileMatch: false
      });
    }
  }
  
  return results;
};

export const TUITION_VALIDATION_CONFIG = {
  TUITION_EXPENSE_REQUIREMENTS,
  REQUIRED_ELEMENTS: {
    requiredColumns: true,
    hasRInLatestTerm: true,
    profileMatch: true
  }
};