// documents_ai/GovIDCertAI.js - AI validation for Government Officer ID Card documents
import { GoogleGenerativeAI } from "@google/generative-ai";
import * as FileSystem from 'expo-file-system/legacy';
import { Alert } from 'react-native';

// Configuration - Client-side only
const GEMINI_API_KEY = process.env.EXPO_PUBLIC_GEMINI_API_KEY;

let genAI = null;
let model = null;

console.log('üîß GovIDCertAI Configuration:');
console.log('- Client-side only (no backend server)');
console.log('- API Key configured:', !!GEMINI_API_KEY);

// Initialize Gemini AI for client-side processing
const initializeGemini = () => {
  if (!genAI && GEMINI_API_KEY && GEMINI_API_KEY !== 'YOUR_GEMINI_API_KEY_HERE') {
    try {
      genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
      model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
      console.log('‚úì Gemini AI initialized successfully for GovIDCert');
      return true;
    } catch (error) {
      console.error('Failed to initialize Gemini AI for GovIDCert:', error);
      return false;
    }
  }
  return !!genAI;
};

// Convert file to format suitable for Gemini
const prepareFileForGemini = async (fileUri, mimeType) => {
  try {
    console.log('üìÅ Preparing GovIDCert file for Gemini AI...');
    
    const base64Data = await FileSystem.readAsStringAsync(fileUri, {
      encoding: FileSystem.EncodingType.Base64,
    });

    let actualMimeType = mimeType;
    if (!actualMimeType) {
      const fileExtension = fileUri.split('.').pop()?.toLowerCase();
      switch (fileExtension) {
        case 'jpg':
        case 'jpeg':
          actualMimeType = 'image/jpeg';
          break;
        case 'png':
          actualMimeType = 'image/png';
          break;
        case 'pdf':
          actualMimeType = 'application/pdf';
          break;
        default:
          actualMimeType = 'image/jpeg';
      }
    }

    console.log('‚úÖ GovIDCert file prepared for Gemini');
    return {
      inlineData: {
        data: base64Data,
        mimeType: actualMimeType,
      },
    };
  } catch (error) {
    console.error('‚ùå Error preparing GovIDCert file for Gemini:', error);
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ: ${error.message}`);
  }
};

// Client-side Government Officer ID Card validation
const validateGovIDCertClientSide = async (fileUri, certType, mimeType) => {
  console.log(`ü§ñ Starting client-side ${certType} government ID cert validation...`);
  
  if (!model) {
    const initialized = initializeGemini();
    if (!initialized) {
      throw new Error('‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key');
    }
  }

  const filePart = await prepareFileForGemini(fileUri, mimeType);

  const certTypeText = {
    'father': '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤',
    'mother': '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤',
    'family': '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß',
    'parents': '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡∏°‡∏≤‡∏£‡∏î‡∏≤',
    'guardian': '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á',
    'income_cert': '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (‡∏Å‡∏¢‡∏® 102)'
  };

  const prompt = `
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á${certTypeText[certType] || '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£'} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isGovIDCard": true/false,
  "certType": "${certType}",
  "confidence": 0-100,
  "cardType": "‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ê‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à/‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô/‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  "govType": "‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ê‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à/‡∏•‡∏π‡∏Å‡∏à‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥/‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  "isValidIDNumber": true/false,
  "isExpired": true/false/null,
  "imageQuality": "clear/blurry/poor/excellent",
  "extractedData": {
    "idNumber": "‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß",
    "govIDNumber": "‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£",
    "name": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•",
    "nameEn": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©",
    "dateOfBirth": "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î",
    "position": "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á",
    "rank": "‡∏¢‡∏®/‡∏£‡∏∞‡∏î‡∏±‡∏ö",
    "department": "‡∏Å‡∏£‡∏°/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô",
    "ministry": "‡∏Å‡∏£‡∏∞‡∏ó‡∏£‡∏ß‡∏á",
    "issueDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£",
    "expiryDate": "‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏",
    "address": "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
  },
  "officialFeatures": {
    "hasOfficialSeal": true/false,
    "hasGovLogo": true/false,
    "hasWatermark": true/false,
    "hasHologram": true/false,
    "hasOfficialFormat": true/false
  },
  "validityChecks": {
    "hasValidFormat": true/false,
    "hasRequiredFields": true/false,
    "isLegitimateGovCard": true/false
  },
  "qualityIssues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"],
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"],
  "overall_status": "valid/invalid/needs_review"
}

‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö:
1. ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏à‡∏£‡∏¥‡∏á
2. ‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£
3. ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
4. ‡∏ï‡∏£‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£
5. ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£
6. ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (watermark, hologram, ‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö)
7. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
8. ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£
9. ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏ó‡∏£‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î
`;

  try {
    const result = await model.generateContent([prompt, filePart]);
    const response = await result.response;
    const responseText = response.text();

    console.log('ü§ñ GovIDCert AI Response received');

    // Try to parse JSON response
    try {
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        console.log('‚úÖ Client-side GovIDCert validation completed');
        return parsed;
      } else {
        throw new Error('No JSON found in response');
      }
    } catch (parseError) {
      console.warn('‚ö†Ô∏è Failed to parse GovIDCert AI response as JSON, using text analysis');
      return analyzeGovIDCertTextResponse(responseText, certType);
    }
  } catch (error) {
    console.error('‚ùå Client-side GovIDCert validation failed:', error);
    throw error;
  }
};

// Fallback text analysis for Government Officer ID Card
const analyzeGovIDCertTextResponse = (text, certType) => {
  const lowerText = text.toLowerCase();
  
  const isGovIDCard = lowerText.includes('‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£') || 
                     lowerText.includes('‡∏ö‡∏±‡∏ï‡∏£‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£') ||
                     lowerText.includes('government id') ||
                     lowerText.includes('official id') ||
                     lowerText.includes('‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£') ||
                     lowerText.includes('‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ê‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à');
  
  const hasOfficialSeal = lowerText.includes('‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö') || 
                          lowerText.includes('‡∏ï‡∏£‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£') ||
                          lowerText.includes('‡∏ï‡∏£‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô');

  const hasValidID = lowerText.includes('‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß') || 
                     lowerText.includes('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç') ||
                     lowerText.includes('13 ‡∏´‡∏•‡∏±‡∏Å');

  // Determine government type
  let govType = '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
  if (lowerText.includes('‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£')) govType = '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£';
  else if (lowerText.includes('‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ê‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à')) govType = '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ê‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à';
  else if (lowerText.includes('‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£')) govType = '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£';

  return {
    isGovIDCard,
    certType,
    confidence: isGovIDCard ? 75 : 25,
    cardType: isGovIDCard ? '‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£' : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
    govType,
    isValidIDNumber: hasValidID,
    isExpired: null,
    imageQuality: 'unclear',
    extractedData: {},
    officialFeatures: {
      hasOfficialSeal,
      hasGovLogo: false,
      hasWatermark: false,
      hasHologram: false,
      hasOfficialFormat: isGovIDCard
    },
    validityChecks: {
      hasValidFormat: isGovIDCard,
      hasRequiredFields: hasValidID,
      isLegitimateGovCard: isGovIDCard && hasOfficialSeal
    },
    qualityIssues: !isGovIDCard ? ['‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£'] : [],
    recommendations: !isGovIDCard ? ['‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£'] : [],
    overall_status: isGovIDCard && hasOfficialSeal && hasValidID ? 'valid' : 'needs_review',
    rawResponse: text
  };
};

// Main validation function for Government Officer ID Card
export const validateGovIDCert = async (fileUri, certType = 'father', mimeType = null) => {
  try {
    console.log(`üöÄ Starting ${certType} government ID cert validation...`);
    console.log('File URI:', fileUri);
    console.log('MIME Type:', mimeType);

    // Validate certType parameter
    const validCertTypes = ['father', 'mother', 'family', 'parents', 'guardian', 'income_cert'];
    if (!validCertTypes.includes(certType)) {
      throw new Error(`‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${certType}. ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô: ${validCertTypes.join(', ')}`);
    }

    // Check if file exists
    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) {
      throw new Error('‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà');
    }

    // Use client-side validation only
    console.log('‚úÖ Using client-side GovIDCert validation');
    return await validateGovIDCertClientSide(fileUri, certType, mimeType);

  } catch (error) {
    console.error('‚ùå GovIDCert validation error:', error);
    throw new Error(`‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
  }
};

// Parse and format Government Officer ID Card validation result
export const parseGovIDCertResult = (result) => {
  if (!result) return null;

  return {
    isValid: result.overall_status === 'valid' && result.isGovIDCard,
    confidence: result.confidence || 0,
    status: result.overall_status || 'unknown',
    certType: result.certType || 'unknown',
    cardType: result.cardType || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
    govType: result.govType || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
    isValidIDNumber: result.isValidIDNumber || false,
    isExpired: result.isExpired,
    imageQuality: result.imageQuality || 'unclear',
    extractedData: result.extractedData || {},
    officialFeatures: result.officialFeatures || {},
    validityChecks: result.validityChecks || {},
    qualityIssues: result.qualityIssues || [],
    recommendations: result.recommendations || [],
    rawResult: result
  };
};

// Show Government Officer ID Card validation alert
export const showGovIDCertValidationAlert = (result, onAccept, onReject) => {
  let title, message, isValid;

  title = result.overall_status === 'valid' ? '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤';
  
  let statusText = '';
  if (result.isGovIDCard) {
    statusText += '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£\n';
  } else {
    statusText += '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£\n';
  }

  if (result.govType && result.govType !== '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö') {
    statusText += `üèõÔ∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${result.govType}\n`;
  }

  if (result.officialFeatures?.hasOfficialSeal) {
    statusText += '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ï‡∏£‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô\n';
  } else {
    statusText += '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏£‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô\n';
  }

  if (result.isValidIDNumber) {
    statusText += '‚úÖ ‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n';
  } else {
    statusText += '‚ùå ‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô\n';
  }

  if (result.isExpired === true) {
    statusText += '‚ö†Ô∏è ‡∏ö‡∏±‡∏ï‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß\n';
  } else if (result.isExpired === false) {
    statusText += '‚úÖ ‡∏ö‡∏±‡∏ï‡∏£‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏\n';
  }

  statusText += `\nüéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${result.confidence}%`;
  statusText += `\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${result.certType}`;
  statusText += `\n‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏£‡∏π‡∏õ: ${result.imageQuality}`;

  if (result.extractedData && Object.keys(result.extractedData).length > 0) {
    statusText += '\n\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö:';
    Object.entries(result.extractedData).forEach(([key, value]) => {
      if (value) statusText += `\n‚Ä¢ ${key}: ${value}`;
    });
  }

  if (result.officialFeatures && Object.keys(result.officialFeatures).some(key => result.officialFeatures[key])) {
    statusText += '\n\nüèõÔ∏è ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£:';
    Object.entries(result.officialFeatures).forEach(([key, value]) => {
      if (value === true) statusText += `\n‚Ä¢ ${key}: ‡∏°‡∏µ`;
    });
  }

  if (result.qualityIssues && result.qualityIssues.length > 0) {
    statusText += '\n\n‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:\n‚Ä¢ ' + result.qualityIssues.join('\n‚Ä¢ ');
  }

  if (result.recommendations && result.recommendations.length > 0) {
    statusText += '\n\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n‚Ä¢ ' + result.recommendations.join('\n‚Ä¢ ');
  }

  message = statusText;
  isValid = result.overall_status === 'valid' && result.isGovIDCard;

  const buttons = [
    {
      text: '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
      style: 'cancel',
      onPress: onReject,
    },
  ];

  if (isValid || result.overall_status === 'needs_review') {
    buttons.push({
      text: result.overall_status === 'valid' ? '‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ' : '‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)',
      onPress: onAccept,
    });
  }

  Alert.alert(title, message, buttons);
};

// Get Government Officer ID Card type display name
export const getGovIDCertTypeName = (certType) => {
  const certTypeNames = {
    'father': '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤',
    'mother': '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏°‡∏≤‡∏£‡∏î‡∏≤',
    'family': '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß',
    'parents': '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤‡∏°‡∏≤‡∏£‡∏î‡∏≤',
    'guardian': '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á',
    'income_cert': '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (‡∏Å‡∏¢‡∏® 102)'
  };
  return certTypeNames[certType] || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
};

// Validate multiple Government Officer ID Cards
export const validateMultipleGovIDCerts = async (files) => {
  const results = [];
  
  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    try {
      const result = await validateGovIDCert(file.uri, file.certType || 'father', file.mimeType);
      results.push({
        fileIndex: i,
        fileName: file.name || file.filename,
        certType: file.certType || 'father',
        validation: result,
        success: true
      });
    } catch (error) {
      results.push({
        fileIndex: i,
        fileName: file.name || file.filename,
        certType: file.certType || 'father',
        error: error.message,
        success: false
      });
    }
  }
  
  return results;
};

// Check Government Officer ID Card AI backend status
export const checkGovIDCertAIStatus = async () => {
  try {
    console.log('ü§ñ Checking GovIDCert AI backend status...');

    // Client-side only validation
    if (!GEMINI_API_KEY || GEMINI_API_KEY === 'YOUR_GEMINI_API_KEY_HERE') {
      console.error('‚ùå Gemini API key not configured for GovIDCert');
      return false;
    }

    const initialized = initializeGemini();
    if (!initialized) {
      console.error('‚ùå Failed to initialize Gemini AI for GovIDCert');
      return false;
    }

    // Test with a simple request
    try {
      console.log('üî¨ Testing client-side GovIDCert AI connection...');
      const testResult = await model.generateContent("Test connection - respond with OK");
      const testResponse = await testResult.response;
      const text = testResponse.text();
      
      console.log('‚úì Client-side GovIDCert AI is available');
      return true;
    } catch (testError) {
      console.error('‚ùå Client-side GovIDCert AI test failed:', testError.message);
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå GovIDCert AI backend check failed:', error);
    return false;
  }
};