// ClientSideAI.js - Direct client-side AI implementation without backend
import { GoogleGenerativeAI } from "@google/generative-ai";
import * as FileSystem from "expo-file-system/legacy";
import { Alert } from "react-native";

// Configuration - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ backend ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô client-side ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
const GEMINI_API_KEY = process.env.EXPO_PUBLIC_GEMINI_API_KEY;

let genAI = null;
let model = null;

console.log("üîß Client-Side AI Configuration:");
console.log("- API Key configured:", !!GEMINI_API_KEY);

// Initialize Gemini AI for client-side processing only
const initializeGemini = () => {
  if (!genAI && GEMINI_API_KEY) {
    try {
      genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
      model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
      console.log("‚úÖ Gemini AI initialized successfully");
      return true;
    } catch (error) {
      console.error("Failed to initialize Gemini AI:", error);
      return false;
    }
  }
  return !!genAI;
};

// Convert file to format suitable for Gemini
const prepareFileForGemini = async (fileUri, mimeType) => {
  try {
    console.log("üìÅ Preparing file for Gemini AI...");

    const base64Data = await FileSystem.readAsStringAsync(fileUri, {
      encoding: FileSystem.EncodingType.Base64,
    });

    let actualMimeType = mimeType;
    if (!actualMimeType) {
      const fileExtension = fileUri.split(".").pop()?.toLowerCase();
      switch (fileExtension) {
        case "jpg":
        case "jpeg":
          actualMimeType = "image/jpeg";
          break;
        case "png":
          actualMimeType = "image/png";
          break;
        case "pdf":
          actualMimeType = "application/pdf";
          break;
        default:
          actualMimeType = "image/jpeg";
      }
    }

    console.log("‚úÖ File prepared for Gemini");
    return {
      inlineData: {
        data: base64Data,
        mimeType: actualMimeType,
      },
    };
  } catch (error) {
    console.error("‚ùå Error preparing file for Gemini:", error);
    throw new Error(
      `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ: ${error.message}`
    );
  }
};

// Validate Form 101 Document
export const validateForm101Document = async (fileUri, mimeType = null) => {
  try {
    console.log("üöÄ Starting Form 101 validation...");

    if (!model) {
      const initialized = initializeGemini();
      if (!initialized) {
        throw new Error("‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key");
      }
    }

    // Check if file exists
    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) {
      throw new Error("‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà");
    }

    const filePart = await prepareFileForGemini(fileUri, mimeType);

    const prompt = `
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101 (‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isForm101": true/false,
  "confidence": 0-100,
  "foundElements": ["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"],
  "missingElements": ["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ"],
  "hasSignature": true/false,
  "signatureQuality": "genuine/suspicious/unclear/none",
  "extractedData": {
    "studentName": "‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
    "studentId": "‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
    "idCard": "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô",
    "address": "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
    "phone": "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå",
    "email": "‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
  },
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"],
  "overall_status": "valid/invalid/needs_review"
}

‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö:
1. ‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ "‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤"
2. ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
3. ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠
4. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
`;

    const result = await model.generateContent([prompt, filePart]);
    const response = await result.response;
    const responseText = response.text();

    // Try to parse JSON response
    try {
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        console.log("‚úÖ Form101 validation completed");
        return parsed;
      } else {
        throw new Error("No JSON found in response");
      }
    } catch (parseError) {
      console.warn(
        "‚ö†Ô∏è Failed to parse AI response as JSON, using text analysis"
      );
      return analyzeForm101TextResponse(responseText);
    }
  } catch (error) {
    console.error("‚ùå Form 101 validation error:", error);
    throw new Error(`‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101 ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
  }
};

// Validate ID Card
export const validateIDCard = async (
  fileUri,
  idType = "student",
  mimeType = null
) => {
  try {
    console.log(`üöÄ Starting ${idType} ID card validation...`);

    if (!model) {
      const initialized = initializeGemini();
      if (!initialized) {
        throw new Error("‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key");
      }
    }

    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) {
      throw new Error("‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà");
    }

    const filePart = await prepareFileForGemini(fileUri, mimeType);

    const idTypeText = {
      student: "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
      father: "‡∏ö‡∏¥‡∏î‡∏≤",
      mother: "‡∏°‡∏≤‡∏£‡∏î‡∏≤",
      guardian: "‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£ong",
    };

    const prompt = `
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏Ç‡∏≠‡∏á${
      idTypeText[idType] || "‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•"
    } ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isIDCard": true/false,
  "idType": "${idType}",
  "confidence": 0-100,
  "cardType": "‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô/‡∏ö‡∏±‡∏ï‡∏£‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏û‡∏≤‡∏™‡∏õ‡∏≠‡∏£‡πå‡∏ï/‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  "isValidIDNumber": true/false,
  "isExpired": true/false/null,
  "imageQuality": "clear/blurry/poor/excellent",
  "extractedData": {
    "idNumber": "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô",
    "name": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•",
    "nameEn": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©",
    "dateOfBirth": "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î",
    "issueDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£",
    "expiryDate": "‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏",
    "address": "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
    "religion": "‡∏®‡∏≤‡∏™‡∏ô‡∏≤"
  },
  "securityFeatures": {
    "hasWatermark": true/false,
    "hasHologram": true/false,
    "hasMRZCode": true/false
  },
  "qualityIssues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"],
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"],
  "overall_status": "valid/invalid/needs_review"
}

‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö:
1. ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏ó‡∏¢‡∏à‡∏£‡∏¥‡∏á
2. ‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å
3. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
4. ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£
5. ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£ (watermark, hologram)
6. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
`;

    const result = await model.generateContent([prompt, filePart]);
    const response = await result.response;
    const responseText = response.text();

    try {
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        console.log("‚úÖ IDCard validation completed");
        return parsed;
      } else {
        throw new Error("No JSON found in response");
      }
    } catch (parseError) {
      console.warn(
        "‚ö†Ô∏è Failed to parse IDCard AI response as JSON, using text analysis"
      );
      return analyzeIDCardTextResponse(responseText, idType);
    }
  } catch (error) {
    console.error("‚ùå IDCard validation error:", error);
    throw new Error(`‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
  }
};

// Validate Consent Form
export const validateConsentForm = async (
  fileUri,
  formType = "student",
  mimeType = null
) => {
  try {
    console.log(`üöÄ Starting ${formType} consent form validation...`);

    if (!model) {
      const initialized = initializeGemini();
      if (!initialized) {
        throw new Error("‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key");
      }
    }

    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) {
      throw new Error("‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà");
    }

    const filePart = await prepareFileForGemini(fileUri, mimeType);

    const formTypeText = {
      student: "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
      father: "‡∏ö‡∏¥‡∏î‡∏≤",
      mother: "‡∏°‡∏≤‡∏£‡∏î‡∏≤",
      guardian: "‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á",
    };

    const prompt = `
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á${
      formTypeText[formType] || "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
    } ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isConsentForm": true/false,
  "formType": "${formType}",
  "confidence": 0-100,
  "hasConsent": true/false,
  "consentType": "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  "hasSignature": true/false,
  "signatureQuality": "genuine/suspicious/unclear/none",
  "extractedData": {
    "name": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•",
    "idCard": "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô",
    "address": "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
    "phone": "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå",
    "email": "‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
    "relationship": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
  },
  "consentDetails": ["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°"],
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"],
  "overall_status": "valid/invalid/needs_review"
}

‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö:
1. ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°
2. ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏° (‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
3. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
4. ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
5. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
`;

    const result = await model.generateContent([prompt, filePart]);
    const response = await result.response;
    const responseText = response.text();

    try {
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        console.log("‚úÖ ConsentForm validation completed");
        return parsed;
      } else {
        throw new Error("No JSON found in response");
      }
    } catch (parseError) {
      console.warn(
        "‚ö†Ô∏è Failed to parse ConsentForm AI response as JSON, using text analysis"
      );
      return analyzeConsentTextResponse(responseText, formType);
    }
  } catch (error) {
    console.error("‚ùå ConsentForm validation error:", error);
    throw new Error(`‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏° ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
  }
};

// Validate Volunteer Document
export const validateVolunteerDocument = async (
  fileUri,
  docType = "form",
  mimeType = null
) => {
  try {
    console.log(`üöÄ Starting ${docType} volunteer document validation...`);

    if (!model) {
      const initialized = initializeGemini();
      if (!initialized) {
        throw new Error("‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key");
      }
    }

    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) {
      throw new Error("‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà");
    }

    const filePart = await prepareFileForGemini(fileUri, mimeType);

    const docTypeText = {
      form: "‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
      certificate: "‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£",
      summary: "‡∏™‡∏£‡∏∏‡∏õ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
      participation: "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á",
    };

    let prompt;
    if (docType === "certificate") {
      prompt = `
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏™‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isVolunteerCertificate": true/false,
  "documentType": "certificate",
  "confidence": 0-100,
  "hasHours": true/false,
  "hours": ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á,
  "hasQRCode": true/false,
  "qrCodeData": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô QR Code ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ",
  "extractedData": {
    "activityName": "‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
    "organizationName": "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î",
    "participantName": "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°",
    "date": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
    "location": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
    "hours": ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á,
    "certificateNumber": "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£"
  },
  "validation": {
    "isValid": true/false,
    "issues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"],
    "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"]
  },
  "overall_status": "valid/invalid/needs_review"
}

‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö:
1. ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£‡∏à‡∏£‡∏¥‡∏á
2. ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
3. ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö QR Code ‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
4. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ ‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
5. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
6. ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
`;
    } else {
      prompt = `
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏™‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ß‡∏°

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isVolunteerForm": true/false,
  "documentType": "form",
  "confidence": 0-100,
  "hasHourRecords": true/false,
  "totalHours": ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î,
  "extractedData": {
    "studentName": "‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
    "studentId": "‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
    "academicYear": "‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
    "term": "‡πÄ‡∏ó‡∏≠‡∏°"
  },
  "hourRecords": [
    {
      "date": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
      "activity": "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
      "hours": ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á,
      "location": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
      "supervisor": "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"
    }
  ],
  "validation": {
    "isValid": true/false,
    "calculationCorrect": true/false,
    "issues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"],
    "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"]
  },
  "overall_status": "valid/invalid/needs_review"
}

‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö:
1. ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
2. ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ß‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
3. ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
4. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
5. ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏î
`;
    }

    const result = await model.generateContent([prompt, filePart]);
    const response = await result.response;
    const responseText = response.text();

    try {
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        console.log("‚úÖ VolunteerDocument validation completed");
        return parsed;
      } else {
        throw new Error("No JSON found in response");
      }
    } catch (parseError) {
      console.warn(
        "‚ö†Ô∏è Failed to parse VolunteerDocument AI response as JSON, using text analysis"
      );
      return analyzeVolunteerTextResponse(responseText, docType);
    }
  } catch (error) {
    console.error("‚ùå VolunteerDocument validation error:", error);
    throw new Error(`‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏™‡∏≤ ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
  }
};

// Universal document validation function
export const validateDocument = async (
  fileUri,
  documentType,
  formType = null,
  mimeType = null
) => {
  try {
    console.log(`üöÄ Starting document validation for type: ${documentType}`);

    switch (documentType) {
      case "form_101":
        return await validateForm101Document(fileUri, mimeType);

      case "volunteer_doc":
      case "volunteer_form":
      case "volunteer_certificate":
        const volunteerType = formType || "form";
        return await validateVolunteerDocument(
          fileUri,
          volunteerType,
          mimeType
        );

      case "id_copies_student":
        return await validateIDCard(fileUri, "student", mimeType);

      case "id_copies_father":
        return await validateIDCard(fileUri, "father", mimeType);

      case "id_copies_mother":
        return await validateIDCard(fileUri, "mother", mimeType);

      case "guardian_id_copies":
        return await validateIDCard(fileUri, "guardian", mimeType);

      case "consent_student_form":
        return await validateConsentForm(fileUri, "student", mimeType);

      case "consent_father_form":
        return await validateConsentForm(fileUri, "father", mimeType);

      case "consent_mother_form":
        return await validateConsentForm(fileUri, "mother", mimeType);

      case "guardian_consent":
        return await validateConsentForm(fileUri, "guardian", mimeType);

      case "consent_form":
        const consentType = formType || "student";
        return await validateConsentForm(fileUri, consentType, mimeType);

      default:
        console.log(
          `‚ùå Document type ${documentType} does not require AI validation`
        );
        return {
          isValid: true,
          confidence: 100,
          overall_status: "valid",
          message: `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ${documentType} ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ AI`,
        };
    }
  } catch (error) {
    console.error(`‚ùå Document validation failed for ${documentType}:`, error);
    throw error;
  }
};

// Helper functions for text analysis fallback
const analyzeForm101TextResponse = (text) => {
  const lowerText = text.toLowerCase();
  const isForm101 =
    lowerText.includes("‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101") ||
    lowerText.includes("‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠") ||
    lowerText.includes("‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤");

  const hasSignature =
    lowerText.includes("‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô") ||
    lowerText.includes("‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠") ||
    lowerText.includes("signature");

  return {
    isForm101,
    confidence: isForm101 ? 75 : 25,
    foundElements: isForm101 ? ["‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤"] : [],
    missingElements: !isForm101 ? ["‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101"] : [],
    hasSignature,
    signatureQuality: hasSignature ? "unclear" : "none",
    extractedData: {},
    recommendations: !isForm101 ? ["‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101"] : [],
    overall_status: isForm101 && hasSignature ? "valid" : "needs_review",
    rawResponse: text,
  };
};

const analyzeIDCardTextResponse = (text, idType) => {
  const lowerText = text.toLowerCase();
  const isIDCard =
    lowerText.includes("‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô") ||
    lowerText.includes("‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß") ||
    lowerText.includes("id card");

  const hasValidID =
    lowerText.includes("‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß") ||
    lowerText.includes("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç") ||
    lowerText.includes("13 ‡∏´‡∏•‡∏±‡∏Å");

  return {
    isIDCard,
    idType,
    confidence: isIDCard ? 75 : 25,
    cardType: isIDCard ? "‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô" : "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö",
    isValidIDNumber: hasValidID,
    isExpired: null,
    imageQuality: "unclear",
    extractedData: {},
    securityFeatures: {},
    qualityIssues: !isIDCard ? ["‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"] : [],
    recommendations: !isIDCard ? ["‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"] : [],
    overall_status: isIDCard && hasValidID ? "valid" : "needs_review",
    rawResponse: text,
  };
};

const analyzeConsentTextResponse = (text, formType) => {
  const lowerText = text.toLowerCase();
  const isConsentForm =
    lowerText.includes("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°") ||
    lowerText.includes("‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•") ||
    lowerText.includes("consent");

  const hasSignature =
    lowerText.includes("‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô") ||
    lowerText.includes("‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠") ||
    lowerText.includes("signature");

  return {
    isConsentForm,
    formType,
    confidence: isConsentForm ? 75 : 25,
    hasConsent: isConsentForm,
    consentType: isConsentForm ? "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" : "",
    hasSignature,
    signatureQuality: hasSignature ? "unclear" : "none",
    extractedData: {},
    consentDetails: isConsentForm ? ["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"] : [],
    recommendations: !isConsentForm ? ["‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°"] : [],
    overall_status: isConsentForm && hasSignature ? "valid" : "needs_review",
    rawResponse: text,
  };
};

const analyzeVolunteerTextResponse = (text, docType) => {
  const lowerText = text.toLowerCase();
  const isVolunteerDoc =
    lowerText.includes("‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏™‡∏≤") ||
    lowerText.includes("volunteer") ||
    lowerText.includes("‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á") ||
    lowerText.includes("‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£");

  const hasHours =
    lowerText.includes("‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á") ||
    lowerText.includes("hour") ||
    /\d+\s*(‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á|hour)/i.test(text);

  // Extract hours from text
  const hourMatches = text.match(/(\d+(?:\.\d+)?)\s*(?:‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á|hour)/gi);
  let totalHours = 0;
  if (hourMatches) {
    totalHours = hourMatches.reduce((sum, match) => {
      const number = parseFloat(match.match(/\d+(?:\.\d+)?/)[0]);
      return sum + number;
    }, 0);
  }

  const baseResult = {
    confidence: isVolunteerDoc ? 75 : 25,
    hasHours,
    totalHours,
    extractedData: {},
    validation: {
      isValid: isVolunteerDoc,
      issues: !isVolunteerDoc ? ["‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ"] : [],
      recommendations: !isVolunteerDoc
        ? ["‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏™‡∏≤"]
        : [],
    },
    overall_status: isVolunteerDoc && hasHours ? "valid" : "needs_review",
    rawResponse: text,
  };

  if (docType === "certificate") {
    return {
      ...baseResult,
      isVolunteerCertificate: isVolunteerDoc,
      documentType: "certificate",
      hasQRCode: lowerText.includes("qr") || lowerText.includes("‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≤‡∏£‡πå"),
      hours: totalHours,
    };
  } else {
    return {
      ...baseResult,
      isVolunteerForm: isVolunteerDoc,
      documentType: "form",
      hasHourRecords: hasHours,
      hourRecords: [],
      hoursSummary: {
        totalRecords: 0,
        totalHours,
        averageHours: 0,
        dateRange: { start: null, end: null },
      },
    };
  }
};

// Check AI status
export const checkAIStatus = async () => {
  try {
    console.log("ü§ñ Checking AI status...");

    if (
      !GEMINI_API_KEY ||
      GEMINI_API_KEY === "AIzaSyCB5CXsuKesDyB4564AHcv1z8RogeyDUOY"
    ) {
      console.error("‚ùå Gemini API key not configured");
      return false;
    }

    const initialized = initializeGemini();
    if (!initialized) {
      console.error("‚ùå Failed to initialize Gemini AI");
      return false;
    }

    // Test with a simple request
    try {
      console.log("üî¨ Testing AI connection...");
      const testResult = await model.generateContent(
        "Test connection - respond with OK"
      );
      const testResponse = await testResult.response;
      const text = testResponse.text();

      console.log("‚úÖ AI is available and working");
      return true;
    } catch (testError) {
      console.error("‚ùå AI test failed:", testError.message);
      return false;
    }
  } catch (error) {
    console.error("‚ùå AI status check failed:", error);
    return false;
  }
};

// Show validation alerts
export const showValidationAlert = (
  result,
  documentType,
  onAccept,
  onReject
) => {
  try {
    let title, message;

    const docTypeNames = {
      form_101: "‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101",
      volunteer_doc: "‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏™‡∏≤",
      volunteer_form: "‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤",
      volunteer_certificate: "‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤",
      id_copies_student: "‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
      id_copies_father: "‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ö‡∏¥‡∏î‡∏≤",
      id_copies_mother: "‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏°‡∏≤‡∏£‡∏î‡∏≤",
      guardian_id_copies: "‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á",
      consent_student_form: "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
      consent_father_form: "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏î‡∏≤",
      consent_mother_form: "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏£‡∏î‡∏≤",
      guardian_consent: "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á",
      consent_form: "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°",
    };

    const docName = docTypeNames[documentType] || "‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£";

    title =
      result.overall_status === "valid"
        ? `‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö${docName}‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
        : `‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤`;

    let statusText = "";

    // Status for different document types
    if (documentType === "form_101") {
      statusText += result.isForm101
        ? "‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101\n"
        : "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101\n";
    } else if (documentType.includes("id_copies")) {
      statusText += result.isIDCard
        ? "‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô\n"
        : "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô\n";
      if (result.isValidIDNumber) {
        statusText += "‚úÖ ‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n";
      } else {
        statusText += "‚ùå ‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô\n";
      }
    } else if (documentType.includes("consent")) {
      statusText += result.isConsentForm
        ? "‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°\n"
        : "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°\n";
    } else if (documentType.includes("volunteer")) {
      const isVolunteer =
        result.isVolunteerForm || result.isVolunteerCertificate;
      statusText += isVolunteer
        ? "‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏™‡∏≤\n"
        : "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏™‡∏≤\n";

      const hours = result.totalHours || result.hours || 0;
      if (hours > 0) {
        statusText += `‚è∞ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ß‡∏°: ${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\n`;
      }
    }

    if (result.hasSignature) {
      statusText += `‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô (${result.signatureQuality})\n`;
    } else if (result.hasSignature === false) {
      statusText += "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô\n";
    }

    statusText += `\nüéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${result.confidence}%`;

    if (result.extractedData && Object.keys(result.extractedData).length > 0) {
      statusText += "\n\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö:";
      Object.entries(result.extractedData).forEach(([key, value]) => {
        if (value) statusText += `\n‚Ä¢ ${key}: ${value}`;
      });
    }

    if (result.recommendations && result.recommendations.length > 0) {
      statusText += "\n\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n‚Ä¢ " + result.recommendations.join("\n‚Ä¢ ");
    }

    message = statusText;
    const isValid = result.overall_status === "valid";

    const buttons = [
      {
        text: "‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
        style: "cancel",
        onPress: onReject,
      },
    ];

    if (isValid || result.overall_status === "needs_review") {
      buttons.push({
        text:
          result.overall_status === "valid"
            ? "‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ"
            : "‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)",
        onPress: onAccept,
      });
    }

    Alert.alert(title, message, buttons);
  } catch (error) {
    console.error("‚ùå Error showing validation alert:", error);
    Alert.alert(
      "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
      `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ: ${error.message}`,
      [
        { text: "‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", style: "cancel", onPress: onReject },
        { text: "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠", onPress: onAccept },
      ]
    );
  }
};

// Validate multiple documents
export const validateMultipleDocuments = async (documents) => {
  const results = [];

  for (let i = 0; i < documents.length; i++) {
    const doc = documents[i];
    try {
      const result = await validateDocument(
        doc.fileUri,
        doc.documentType,
        doc.formType,
        doc.mimeType
      );

      results.push({
        index: i,
        fileName: doc.fileName,
        documentType: doc.documentType,
        formType: doc.formType,
        validation: result,
        success: true,
      });
    } catch (error) {
      results.push({
        index: i,
        fileName: doc.fileName,
        documentType: doc.documentType,
        formType: doc.formType,
        error: error.message,
        success: false,
      });
    }
  }

  return results;
};
