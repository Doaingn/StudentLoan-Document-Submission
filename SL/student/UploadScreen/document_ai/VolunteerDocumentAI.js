// documents_ai/VolunteerDocumentAI.js - AI validation for Volunteer Work documents
import { GoogleGenerativeAI } from "@google/generative-ai";
import * as FileSystem from "expo-file-system/legacy";
import { Alert } from "react-native";
import { doc, getDoc } from "firebase/firestore";
import { db, auth } from "../../../database/firebase";
import jsQR from "jsqr"; // For QR code reading

// Configuration
const GEMINI_API_KEY = process.env.EXPO_PUBLIC_GEMINI_API_KEY;

let genAI = null;
let model = null;

console.log("üîß VolunteerDocumentAI Configuration:");
console.log("- API Key configured:", !!GEMINI_API_KEY);

/**
 * ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Firestore
 * @param {string} userId - User ID
 * @returns {Promise<string|null>} - ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠ null
 */
export const getUserNameFromFirestore = async (userId) => {
  try {
    console.log(`üë§ Fetching user name for ID: ${userId}`);

    const userDocRef = doc(db, "users", userId);
    const userDoc = await getDoc(userDocRef);

    if (userDoc.exists()) {
      const userData = userDoc.data();
      const userName = userData.name;
      console.log(`‚úÖ Found user name: ${userName}`);
      return userName;
    } else {
      console.warn(`‚ö†Ô∏è User document not found for ID: ${userId}`);
      return null;
    }
  } catch (error) {
    console.error("‚ùå Error fetching user name:", error);
    return null;
  }
};

/**
 * ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô 2 ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (‡∏≠‡∏ô‡∏∏‡πÇ‡∏•‡∏°)
 * @param {string} name1 - ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà 1
 * @param {string} name2 - ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà 2
 * @returns {object} - ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
 */
export const compareNames = (name1, name2) => {
  if (!name1 || !name2) {
    return {
      isMatch: false,
      similarity: 0,
      reason: "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
    };
  }

  // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î whitespace
  const cleanName1 = name1.toLowerCase().trim().replace(/\s+/g, " ");
  const cleanName2 = name2.toLowerCase().trim().replace(/\s+/g, " ");

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô exact match
  if (cleanName1 === cleanName2) {
    return {
      isMatch: true,
      similarity: 100,
      reason: "‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£",
    };
  }

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á (‡πÄ‡∏ä‡πà‡∏ô "‡∏™‡∏°‡∏ä‡∏≤‡∏¢" ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ")
  if (cleanName1.includes(cleanName2) || cleanName2.includes(cleanName1)) {
    return {
      isMatch: true,
      similarity: 85,
      reason: "‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô",
    };
  }

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ" vs "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ")
  const words1 = cleanName1.split(" ");
  const words2 = cleanName2.split(" ");

  const firstName1 = words1[0];
  const lastName1 = words1[words1.length - 1];
  const firstName2 = words2[0];
  const lastName2 = words2[words2.length - 1];

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
  if (words1.length >= 2 && words2.length >= 2) {
    const firstNameMatch = words1.some((w) => words2.includes(w));
    const lastNameMatch = lastName1 === lastName2;

    if (firstNameMatch && lastNameMatch) {
      return {
        isMatch: true,
        similarity: 90,
        reason: "‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô",
      };
    }

    if (lastNameMatch) {
      return {
        isMatch: true,
        similarity: 70,
        reason: "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô",
      };
    }
  }

  // Calculate similarity percentage using Levenshtein distance
  const similarity = calculateSimilarity(cleanName1, cleanName2);

  if (similarity >= 70) {
    return {
      isMatch: true,
      similarity,
      reason: "‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏™‡∏∞‡∏Å‡∏î‡∏ú‡∏¥‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)",
    };
  }

  return {
    isMatch: false,
    similarity,
    reason: "‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô",
  };
};

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 2 string (0-100%)
 */
const calculateSimilarity = (str1, str2) => {
  const longer = str1.length > str2.length ? str1 : str2;
  const shorter = str1.length > str2.length ? str2 : str1;

  if (longer.length === 0) return 100;

  const editDistance = getEditDistance(longer, shorter);
  return ((longer.length - editDistance) / longer.length) * 100;
};

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Levenshtein distance
 */
const getEditDistance = (str1, str2) => {
  const matrix = [];

  for (let i = 0; i <= str2.length; i++) {
    matrix[i] = [i];
  }

  for (let j = 0; j <= str1.length; j++) {
    matrix[0][j] = j;
  }

  for (let i = 1; i <= str2.length; i++) {
    for (let j = 1; j <= str1.length; j++) {
      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1,
          matrix[i][j - 1] + 1,
          matrix[i - 1][j] + 1
        );
      }
    }
  }

  return matrix[str2.length][str1.length];
};

// Initialize Gemini AI for client-side processing
const initializeGemini = () => {
  if (!genAI && GEMINI_API_KEY && "AIzaSyCB5CXsuKesDyB4564AHcv1z8RogeyDUOY") {
    try {
      genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
      model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });
      console.log(
        "‚úÖ Gemini AI initialized successfully for VolunteerDocument"
      );
      return true;
    } catch (error) {
      console.error(
        "Failed to initialize Gemini AI for VolunteerDocument:",
        error
      );
      return false;
    }
  }
  return !!genAI;
};

export const createNoVolunteerHoursDocument = () => {
  return {
    isVolunteerCertificate: false,
    documentType: "no_volunteer",
    confidence: 100,
    hasHours: false,
    hours: -36, // ‡πÉ‡∏ä‡πâ -36 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤
    hasQRCode: false,
    extractedData: {
      activityName: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤",
      organizationName: "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤",
      participantName: "",
      date: new Date().toISOString().split("T")[0],
      location: "",
      hours: -36,
      certificateNumber: "NO_VOLUNTEER",
    },
    validation: {
      isValid: true,
      issues: ["‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤"],
      recommendations: ["‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"],
    },
    overall_status: "valid",
    accumulatedHours: -36,
    noVolunteerHours: true, // ‡πÄ‡∏û‡∏¥‡πà‡∏° flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  };
};

// QR Code reader function
const readQRCode = async (imageUri) => {
  try {
    console.log("üì± Reading QR code from image...");

    // Convert image to canvas data for QR reading
    const base64Data = await FileSystem.readAsStringAsync(imageUri, {
      encoding: FileSystem.EncodingType.Base64,
    });

    // Create image data from base64 (this would need platform-specific implementation)
    // For now, we'll use AI to detect and read QR codes
    return null; // Placeholder - actual QR reading would be implemented here
  } catch (error) {
    console.error("Error reading QR code:", error);
    return null;
  }
};

// Server-side validation for Volunteer Documents
const validateVolunteerDocViaServer = async (fileUri, docType, mimeType) => {
  try {
    console.log(
      `üì§ Uploading to server for ${docType} volunteer validation...`
    );

    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) {
      throw new Error("File does not exist");
    }

    const formData = new FormData();
    const file = {
      uri: fileUri,
      type: mimeType || "image/jpeg",
      name: `volunteer_${docType}_${Date.now()}.${
        mimeType ? mimeType.split("/")[1] : "jpg"
      }`,
    };

    formData.append("document", file);

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Server validation error:", errorText);
      throw new Error(`Server returned ${response.status}: ${errorText}`);
    }

    const result = await response.json();
    console.log("‚úÖ Server VolunteerDocument validation completed");
    return result.validation;
  } catch (error) {
    console.error("‚ùå Server VolunteerDocument validation error:", error);
    throw error;
  }
};

// Convert file to format suitable for Gemini (client-side)
const prepareFileForGemini = async (fileUri, mimeType) => {
  try {
    console.log("üîç Preparing VolunteerDocument file for Gemini AI...");

    const base64Data = await FileSystem.readAsStringAsync(fileUri, {
      encoding: FileSystem.EncodingType.Base64,
    });

    let actualMimeType = mimeType;
    if (!actualMimeType) {
      const fileExtension = fileUri.split(".").pop()?.toLowerCase();
      switch (fileExtension) {
        case "jpg":
        case "jpeg":
          actualMimeType = "image/jpeg";
          break;
        case "png":
          actualMimeType = "image/png";
          break;
        case "pdf":
          actualMimeType = "application/pdf";
          break;
        default:
          actualMimeType = "image/jpeg";
      }
    }

    console.log("‚úÖ VolunteerDocument file prepared for Gemini");
    return {
      inlineData: {
        data: base64Data,
        mimeType: actualMimeType,
      },
    };
  } catch (error) {
    console.error(
      "‚ùå Error preparing VolunteerDocument file for Gemini:",
      error
    );
    throw new Error(
      `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ: ${error.message}`
    );
  }
};

// Client-side Volunteer Document validation
const validateVolunteerDocClientSide = async (fileUri, docType, mimeType) => {
  console.log(`ü§ñ Starting client-side ${docType} volunteer validation...`);

  if (!model) {
    const initialized = initializeGemini();
    if (!initialized) {
      throw new Error("‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key");
    }
  }

  const filePart = await prepareFileForGemini(fileUri, mimeType);

  const docTypeText = {
    form: "‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
    certificate: "‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£",
    summary: "‡∏™‡∏£‡∏∏‡∏õ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
    participation: "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á",
  };

  let prompt;

  if (docType === "certificate") {
    // Certificate-specific validation with QR code detection
    prompt = `
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏™‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isVolunteerCertificate": true/false,
  "documentType": "certificate",
  "confidence": 0-100,
  "hasHours": true/false,
  "hours": ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á,
  "hasQRCode": true/false,
  "qrCodeData": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô QR Code ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ",
  "extractedData": {
    "activityName": "‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
    "organizationName": "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î",
    "participantName": "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°",
    "date": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
    "location": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
    "hours": ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á,
    "certificateNumber": "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£"
  },
  "qrCodeInfo": {
    "detected": true/false,
    "readable": true/false,
    "data": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô QR Code",
    "hoursFromQR": ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏≤‡∏Å QR,
    "verificationUrl": "URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
  },
  "validation": {
    "isValid": true/false,
    "issues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"],
    "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"]
  },
  "overall_status": "valid/invalid/needs_review"
}

‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö:
1. ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£‡∏à‡∏£‡∏¥‡∏á
2. ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
3. ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö QR Code ‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
4. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ ‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
5. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
6. ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á

‡∏´‡∏≤‡∏Å QR Code ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å QR Code ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
`;
  } else {
    // General form validation for hour tracking
    prompt = `
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏™‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ß‡∏°

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isVolunteerForm": true/false,
  "documentType": "form",
  "confidence": 0-100,
  "hasHourRecords": true/false,
  "totalHours": ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î,
  "extractedData": {
    "studentName": "‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
    "studentId": "‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
    "academicYear": "‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
    "term": "‡πÄ‡∏ó‡∏≠‡∏°"
  },
  "hourRecords": [
    {
      "date": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
      "activity": "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
      "hours": ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á,
      "location": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
      "supervisor": "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"
    }
  ],
  "hoursSummary": {
    "totalRecords": ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£,
    "totalHours": ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ß‡∏°,
    "averageHours": ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢,
    "dateRange": {
      "start": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
      "end": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"
    }
  },
  "validation": {
    "isValid": true/false,
    "calculationCorrect": true/false,
    "issues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"],
    "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"]
  },
  "overall_status": "valid/invalid/needs_review"
}

‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö:
1. ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
2. ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ß‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
3. ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
4. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
5. ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
`;
  }

  try {
    const result = await model.generateContent([prompt, filePart]);
    const response = await result.response;
    const responseText = response.text();

    console.log("ü§ñ VolunteerDocument AI Response received");

    // Try to parse JSON response
    try {
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);

        // Additional QR code processing if detected
        if (parsed.hasQRCode && parsed.qrCodeInfo?.detected) {
          try {
            const qrData = await readQRCode(fileUri);
            if (qrData) {
              parsed.qrCodeInfo.data = qrData;
              parsed.qrCodeInfo.readable = true;
            }
          } catch (qrError) {
            console.warn("Could not read QR code:", qrError);
          }
        }

        console.log("‚úÖ Client-side VolunteerDocument validation completed");
        return parsed;
      } else {
        throw new Error("No JSON found in response");
      }
    } catch (parseError) {
      console.warn(
        "‚ö†Ô∏è Failed to parse VolunteerDocument AI response as JSON, using text analysis"
      );
      return analyzeVolunteerTextResponse(responseText, docType);
    }
  } catch (error) {
    console.error("‚ùå Client-side VolunteerDocument validation failed:", error);
    throw error;
  }
};

// Fallback text analysis for Volunteer Documents
const analyzeVolunteerTextResponse = (text, docType) => {
  const lowerText = text.toLowerCase();

  const isVolunteerDoc =
    lowerText.includes("‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏™‡∏≤") ||
    lowerText.includes("volunteer") ||
    lowerText.includes("‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á") ||
    lowerText.includes("‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£") ||
    lowerText.includes("certificate");

  const hasHours =
    lowerText.includes("‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á") ||
    lowerText.includes("hour") ||
    /\d+\s*(‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á|hour)/i.test(text);

  // Try to extract hours from text
  const hourMatches = text.match(/(\d+(?:\.\d+)?)\s*(?:‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á|hour)/gi);
  let totalHours = 0;
  if (hourMatches) {
    totalHours = hourMatches.reduce((sum, match) => {
      const number = parseFloat(match.match(/\d+(?:\.\d+)?/)[0]);
      return sum + number;
    }, 0);
  }

  const baseResult = {
    confidence: isVolunteerDoc ? 75 : 25,
    hasHours,
    totalHours,
    extractedData: {},
    validation: {
      isValid: isVolunteerDoc,
      issues: !isVolunteerDoc ? ["‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ"] : [],
      recommendations: !isVolunteerDoc
        ? ["‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏™‡∏≤"]
        : [],
    },
    overall_status: isVolunteerDoc && hasHours ? "valid" : "needs_review",
    rawResponse: text,
  };

  if (docType === "certificate") {
    return {
      ...baseResult,
      isVolunteerCertificate: isVolunteerDoc,
      documentType: "certificate",
      hasQRCode: lowerText.includes("qr") || lowerText.includes("‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≤‡∏£‡πå"),
      qrCodeInfo: {
        detected: false,
        readable: false,
        data: null,
        hoursFromQR: null,
        verificationUrl: null,
      },
      hours: totalHours,
    };
  } else {
    return {
      ...baseResult,
      isVolunteerForm: isVolunteerDoc,
      documentType: "form",
      hasHourRecords: hasHours,
      hourRecords: [],
      hoursSummary: {
        totalRecords: 0,
        totalHours,
        averageHours: 0,
        dateRange: { start: null, end: null },
      },
    };
  }
};

export const extractVolunteerHours = (result) => {
  if (!result) return 0;

  console.log("üîç Extracting hours from result:", result);

  // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  let hours = 0;

  if (result.documentType === "certificate") {
    hours =
      result.hours ||
      result.qrCodeInfo?.hoursFromQR ||
      result.extractedData?.hours ||
      result.accumulatedHours ||
      0;
  } else if (result.documentType === "form") {
    hours =
      result.totalHours ||
      result.hoursSummary?.totalHours ||
      result.accumulatedHours ||
      0;
  }

  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏áÔºå‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô
  if (hours === 0) {
    // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const hourMatch = JSON.stringify(result).match(/"hours?":\s*(\d+)/);
    if (hourMatch) {
      hours = parseInt(hourMatch[1]);
    }
  }

  console.log(`‚úÖ Extracted hours: ${hours}`);
  return hours;
};

// Main validation function for Volunteer Documents
export const validateVolunteerDocument = async (
  fileUri,
  docType = "certificate",
  mimeType = null,
  isNoVolunteerHours = false,
  userId = null
) => {
  try {
    console.log(`üöÄ Starting ${docType} volunteer document validation...`);

    // ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤
    if (isNoVolunteerHours) {
      console.log("üìù Creating no volunteer hours document");
      const result = createNoVolunteerHoursDocument();
      return result;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ server-side ‡∏´‡∏£‡∏∑‡∏≠ client-side validation
    console.log("File URI:", fileUri);
    console.log("MIME Type:", mimeType);

    let useServer = false;
    let result;

    if (useServer) {
      result = await validateVolunteerDocViaServer(fileUri, docType, mimeType);
    } else {
      console.log("‚úÖ Using client-side VolunteerDocument validation");
      result = await validateVolunteerDocClientSide(fileUri, docType, mimeType);
    }

    console.log("üìä Raw AI result for volunteer document:", result);
    result.accumulatedHours = extractVolunteerHours(result);
    console.log("üìä Extracted hours:", result.accumulatedHours);

    // ============================================
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠
    // ============================================
    if (userId && result.extractedData?.participantName) {
      console.log("üë§ Verifying participant name...");

      const userNameFromDB = await getUserNameFromFirestore(userId);
      const nameFromDocument = result.extractedData.participantName;

      if (userNameFromDB) {
        const nameComparison = compareNames(userNameFromDB, nameFromDocument);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô result
        result.nameVerification = {
          userNameFromDB,
          nameFromDocument,
          isMatch: nameComparison.isMatch,
          similarity: nameComparison.similarity,
          reason: nameComparison.reason,
        };

        console.log(`üìù Name verification result:`, nameComparison);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° warning ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        if (!nameComparison.isMatch) {
          if (!result.validation.issues) {
            result.validation.issues = [];
          }
          result.validation.issues.push(
            `‚ö†Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ "${nameFromDocument}" ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö "${userNameFromDB}"`
          );

          if (!result.validation.recommendations) {
            result.validation.recommendations = [];
          }
          result.validation.recommendations.push(
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏£‡∏¥‡∏á"
          );

          // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
          result.confidence = Math.max(0, (result.confidence || 0) - 20);

          // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô needs_review
          if (result.overall_status === "valid") {
            result.overall_status = "needs_review";
          }
        } else {
          console.log(
            `‚úÖ Name verification passed (${nameComparison.similarity}% similarity)`
          );

          if (!result.validation.recommendations) {
            result.validation.recommendations = [];
          }
          result.validation.recommendations.push(
            `‚úì ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (${nameComparison.reason})`
          );
        }
      } else {
        console.warn("‚ö†Ô∏è Could not fetch user name from database");
        result.nameVerification = {
          userNameFromDB: null,
          nameFromDocument,
          isMatch: null,
          similarity: 0,
          reason: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ",
        };
      }
    } else {
      console.log(
        "‚ö†Ô∏è Skipping name verification (missing userId or participantName)"
      );
    }

    return result;
  } catch (error) {
    console.error("‚ùå VolunteerDocument validation error:", error);
    throw new Error(`‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏™‡∏≤ ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
  }
};

// Show Volunteer Document validation alert
export const showVolunteerDocValidationAlert = (result, onAccept, onReject) => {
  let title, message, isValid;

  const docTypeName = {
    form: "‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
    certificate: "‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£",
    summary: "‡∏™‡∏£‡∏∏‡∏õ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
    participation: "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á",
  };

  title =
    result.overall_status === "valid"
      ? "‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
      : "‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤";

  let statusText = "";

  if (result.isVolunteerForm || result.isVolunteerCertificate) {
    statusText += `‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö${docTypeName[result.documentType] || "‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"}\n`;
  } else {
    statusText += "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏™‡∏≤\n";
  }

  const totalHours = result.totalHours || result.hours || 0;
  if (totalHours > 0) {
    statusText += `‚è∞ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ß‡∏°: ${totalHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\n`;
  }

  // ============================================
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠
  // ============================================
  if (result.nameVerification) {
    statusText += "\nüë§ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠:\n";
    statusText += `  ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: ${
      result.nameVerification.userNameFromDB || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    }\n`;
    statusText += `  ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${result.nameVerification.nameFromDocument}\n`;

    if (result.nameVerification.isMatch === true) {
      statusText += `  ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô (${result.nameVerification.similarity.toFixed(
        0
      )}%)\n`;
      statusText += `  ${result.nameVerification.reason}\n`;
    } else if (result.nameVerification.isMatch === false) {
      statusText += `  ‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (${result.nameVerification.similarity.toFixed(
        0
      )}%)\n`;
      statusText += `  ${result.nameVerification.reason}\n`;
    } else {
      statusText += `  ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ\n`;
    }
  }

  if (result.hasQRCode) {
    statusText += "\nüì± ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö QR Code\n";
    if (result.qrCodeInfo?.readable) {
      statusText += `  ‚îî‚îÄ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${result.qrCodeInfo.data || "‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"}\n`;
      if (result.qrCodeInfo.hoursFromQR) {
        statusText += `  ‚îî‚îÄ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏≤‡∏Å QR: ${result.qrCodeInfo.hoursFromQR}\n`;
      }
    }
  }

  statusText += `\nüéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${result.confidence}%`;

  if (result.extractedData && Object.keys(result.extractedData).length > 0) {
    statusText += "\n\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö:";
    Object.entries(result.extractedData).forEach(([key, value]) => {
      if (value) statusText += `\n‚Ä¢ ${key}: ${value}`;
    });
  }

  if (result.hourRecords && result.hourRecords.length > 0) {
    statusText += `\n\nüìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (${result.hourRecords.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):`;
    result.hourRecords.slice(0, 3).forEach((record, index) => {
      statusText += `\n${index + 1}. ${record.activity} - ${
        record.hours
      } ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
    });
    if (result.hourRecords.length > 3) {
      statusText += `\n... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${result.hourRecords.length - 3} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
    }
  }

  if (result.validation?.issues && result.validation.issues.length > 0) {
    statusText +=
      "\n\n‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:\n‚Ä¢ " + result.validation.issues.join("\n‚Ä¢ ");
  }

  if (
    result.validation?.recommendations &&
    result.validation.recommendations.length > 0
  ) {
    statusText +=
      "\n\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n‚Ä¢ " + result.validation.recommendations.join("\n‚Ä¢ ");
  }

  message = statusText;
  isValid =
    result.overall_status === "valid" &&
    (result.isVolunteerForm || result.isVolunteerCertificate);

  const buttons = [
    {
      text: "‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
      style: "cancel",
      onPress: onReject,
    },
  ];

  if (isValid || result.overall_status === "needs_review") {
    buttons.push({
      text:
        result.overall_status === "valid"
          ? "‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ"
          : "‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)",
      onPress: onAccept,
    });
  }

  Alert.alert(title, message, buttons);
};

// Calculate total hours from multiple documents
export const calculateTotalVolunteerHours = (documents) => {
  let totalHours = 0;
  let validDocuments = 0;

  documents.forEach((doc) => {
    if (doc.validation && doc.validation.isValid) {
      const hours = doc.totalHours || doc.hours || 0;
      totalHours += hours;
      validDocuments++;
    }
  });

  return {
    totalHours,
    validDocuments,
    averageHours: validDocuments > 0 ? totalHours / validDocuments : 0,
  };
};

// Validate multiple volunteer documents
export const validateMultipleVolunteerDocuments = async (files) => {
  const results = [];

  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    try {
      const result = await validateVolunteerDocument(
        file.uri,
        file.docType || "form",
        file.mimeType
      );
      results.push({
        fileIndex: i,
        fileName: file.name || file.filename,
        docType: file.docType || "form",
        validation: result,
        success: true,
      });
    } catch (error) {
      results.push({
        fileIndex: i,
        fileName: file.name || file.filename,
        docType: file.docType || "form",
        error: error.message,
        success: false,
      });
    }
  }

  return results;
};

// Check Volunteer Document AI backend status
export const checkVolunteerDocumentAIStatus = async () => {
  try {
    console.log("ü§ñ Checking VolunteerDocument AI backend status...");

    // If configured to use backend server, check server firs
    // Fall back to client-side AI
    if (!GEMINI_API_KEY || GEMINI_API_KEY === "YOUR_GEMINI_API_KEY_HERE") {
      console.error("‚ùå Gemini API key not configured for VolunteerDocument");
      return false;
    }

    const initialized = initializeGemini();
    if (!initialized) {
      console.error("‚ùå Failed to initialize Gemini AI for VolunteerDocument");
      return false;
    }

    // Test with a simple request
    try {
      console.log("üî¨ Testing client-side VolunteerDocument AI connection...");
      const testResult = await model.generateContent(
        "Test connection - respond with OK"
      );
      const testResponse = await testResult.response;
      const text = testResponse.text();

      console.log("‚úÖ Client-side VolunteerDocument AI is available");
      return true;
    } catch (testError) {
      console.error(
        "‚ùå Client-side VolunteerDocument AI test failed:",
        testError.message
      );
      return false;
    }
  } catch (error) {
    console.error("‚ùå VolunteerDocument AI backend check failed:", error);
    return false;
  }
};