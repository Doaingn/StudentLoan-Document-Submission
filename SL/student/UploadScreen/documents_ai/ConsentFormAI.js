// documents_ai/ConsentFormAI.js - Fixed AI validation with proper error handling
import { GoogleGenerativeAI } from "@google/generative-ai";
import * as FileSystem from 'expo-file-system';
import { Alert } from 'react-native';

// Configuration - Fixed environment variable access
const GEMINI_API_KEY = process.env.EXPO_PUBLIC_GEMINI_API_KEY;
const AI_BACKEND_URL = process.env.EXPO_PUBLIC_AI_BACKEND_URL || 'http://192.168.1.102:3001';
const USE_BACKEND_SERVER = process.env.EXPO_PUBLIC_USE_AI_BACKEND === 'true';

let genAI = null;
let model = null;

console.log('üîß AI Configuration:');
console.log('- Backend URL:', AI_BACKEND_URL);
console.log('- Use Backend:', USE_BACKEND_SERVER);
console.log('- API Key configured:', !!GEMINI_API_KEY);

// Initialize Gemini AI for client-side processing
const initializeGemini = () => {
  if (!genAI && GEMINI_API_KEY && GEMINI_API_KEY !== 'AIzaSyB0IPMGQrR08mWLThXDALeaQqwpI1y9Wgw') {
    try {
      genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
      model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" }); // Updated model name
      console.log('‚úì Gemini AI initialized successfully');
      return true;
    } catch (error) {
      console.error('Failed to initialize Gemini AI:', error);
      return false;
    }
  }
  return !!genAI;
};

// Check if AI backend server is available with better error handling
const checkBackendServer = async () => {
  try {
    console.log('üîç Checking backend server at:', AI_BACKEND_URL);
    
    const response = await fetch(`${AI_BACKEND_URL}/health`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      timeout: 10000, // Increased timeout
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úì AI Backend Server is available:', data.status);
      return true;
    } else {
      console.log('‚ùå Backend server responded with error:', response.status);
      return false;
    }
  } catch (error) {
    console.log('‚ùå AI Backend Server not available:', error.message);
    return false;
  }
};

// Enhanced AI backend status check
export const checkAIBackendStatus = async () => {
  try {
    console.log('ü§ñ Checking AI backend status...');
    console.log('Configuration:');
    console.log('- USE_BACKEND_SERVER:', USE_BACKEND_SERVER);
    console.log('- AI_BACKEND_URL:', AI_BACKEND_URL);
    console.log('- GEMINI_API_KEY configured:', !!GEMINI_API_KEY);

    // If configured to use backend server, check server first
    if (USE_BACKEND_SERVER) {
      const serverAvailable = await checkBackendServer();
      if (serverAvailable) {
        // Test AI connection through server
        try {
          console.log('üî¨ Testing AI connection through server...');
          const response = await fetch(`${AI_BACKEND_URL}/ai/test`);
          if (response.ok) {
            const data = await response.json();
            console.log('‚úì AI backend server is available and working');
            console.log('Server response:', data.response);
            return true;
          }
        } catch (error) {
          console.log('‚ùå Server AI test failed:', error.message);
          console.log('‚ö†Ô∏è Falling back to client-side AI');
        }
      }
    }

    // Fall back to client-side AI
    if (!GEMINI_API_KEY) {
      console.error('‚ùå Gemini API key not configured');
      console.log('Please set EXPO_PUBLIC_GEMINI_API_KEY in your .env file');
      return false;
    }

    if (GEMINI_API_KEY === 'YOUR_GEMINI_API_KEY_HERE') {
      console.error('‚ùå Gemini API key is placeholder value');
      console.log('Please replace with your actual API key');
      return false;
    }

    const initialized = initializeGemini();
    if (!initialized) {
      console.error('‚ùå Failed to initialize Gemini AI');
      return false;
    }

    // Test with a simple request
    try {
      console.log('üî¨ Testing client-side AI connection...');
      const testResult = await model.generateContent("Test connection - respond with OK");
      const testResponse = await testResult.response;
      const text = testResponse.text();
      
      console.log('‚úì Client-side AI is available');
      console.log('AI response:', text);
      return true;
    } catch (testError) {
      console.error('‚ùå Client-side AI test failed:', testError.message);
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå AI backend check failed:', error);
    return false;
  }
};

// Server-side validation for Form 101
const validateForm101ViaServer = async (fileUri, mimeType) => {
  try {
    console.log('üì§ Uploading to server for Form 101 validation...');
    
    // Get file info
    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) {
      throw new Error('File does not exist');
    }

    // Create FormData
    const formData = new FormData();
    const file = {
      uri: fileUri,
      type: mimeType || 'image/jpeg',
      name: `form101_${Date.now()}.${mimeType ? mimeType.split('/')[1] : 'jpg'}`,
    };
    
    formData.append('document', file);

    const response = await fetch(`${AI_BACKEND_URL}/ai/validate/form101`, {
      method: 'POST',
      body: formData,
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Server validation error:', errorText);
      throw new Error(`Server returned ${response.status}: ${errorText}`);
    }

    const result = await response.json();
    console.log('‚úÖ Server validation completed');
    return result.validation;

  } catch (error) {
    console.error('‚ùå Server validation error:', error);
    throw error;
  }
};

// Server-side validation for Consent Form
const validateConsentFormViaServer = async (fileUri, formType, mimeType) => {
  try {
    console.log(`üì§ Uploading to server for ${formType} consent validation...`);
    
    // Get file info
    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) {
      throw new Error('File does not exist');
    }

    const formData = new FormData();
    const file = {
      uri: fileUri,
      type: mimeType || 'image/jpeg',
      name: `consent_${formType}_${Date.now()}.${mimeType ? mimeType.split('/')[1] : 'jpg'}`,
    };
    
    formData.append('document', file);

    const response = await fetch(`${AI_BACKEND_URL}/ai/validate/consent/${formType}`, {
      method: 'POST',
      body: formData,
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Server validation error:', errorText);
      throw new Error(`Server returned ${response.status}: ${errorText}`);
    }

    const result = await response.json();
    console.log('‚úÖ Server validation completed');
    return result.validation;

  } catch (error) {
    console.error('‚ùå Server validation error:', error);
    throw error;
  }
};

// Convert file to format suitable for Gemini (client-side)
const prepareFileForGemini = async (fileUri, mimeType) => {
  try {
    console.log('üìÅ Preparing file for Gemini AI...');
    
    const base64Data = await FileSystem.readAsStringAsync(fileUri, {
      encoding: FileSystem.EncodingType.Base64,
    });

    let actualMimeType = mimeType;
    if (!actualMimeType) {
      const fileExtension = fileUri.split('.').pop()?.toLowerCase();
      switch (fileExtension) {
        case 'jpg':
        case 'jpeg':
          actualMimeType = 'image/jpeg';
          break;
        case 'png':
          actualMimeType = 'image/png';
          break;
        case 'pdf':
          actualMimeType = 'application/pdf';
          break;
        default:
          actualMimeType = 'image/jpeg';
      }
    }

    console.log('‚úÖ File prepared for Gemini');
    return {
      inlineData: {
        data: base64Data,
        mimeType: actualMimeType,
      },
    };
  } catch (error) {
    console.error('‚ùå Error preparing file for Gemini:', error);
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ: ${error.message}`);
  }
};

// Client-side Form 101 validation
const validateForm101ClientSide = async (fileUri, mimeType) => {
  console.log('ü§ñ Starting client-side Form 101 validation...');
  
  if (!model) {
    const initialized = initializeGemini();
    if (!initialized) {
      throw new Error('‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key');
    }
  }

  const filePart = await prepareFileForGemini(fileUri, mimeType);

  const prompt = `
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101 (‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isForm101": true/false,
  "confidence": 0-100,
  "foundElements": ["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"],
  "missingElements": ["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ"],
  "hasSignature": true/false,
  "signatureQuality": "genuine/suspicious/unclear/none",
  "extractedData": {
    "studentName": "‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
    "studentId": "‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
    "idCard": "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô",
    "address": "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
    "phone": "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå",
    "email": "‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
  },
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"],
  "overall_status": "valid/invalid/needs_review"
}

‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö:
1. ‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ "‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤"
2. ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
3. ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠
4. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
`;

  try {
    const result = await model.generateContent([prompt, filePart]);
    const response = await result.response;
    const responseText = response.text();

    console.log('ü§ñ AI Response received');

    // Try to parse JSON response
    try {
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        console.log('‚úÖ Client-side validation completed');
        return parsed;
      } else {
        throw new Error('No JSON found in response');
      }
    } catch (parseError) {
      console.warn('‚ö†Ô∏è Failed to parse AI response as JSON, using text analysis');
      return analyzeTextResponse(responseText);
    }
  } catch (error) {
    console.error('‚ùå Client-side validation failed:', error);
    throw error;
  }
};

// Client-side Consent Form validation
const validateConsentFormClientSide = async (fileUri, formType, mimeType) => {
  console.log(`ü§ñ Starting client-side ${formType} consent validation...`);
  
  if (!model) {
    const initialized = initializeGemini();
    if (!initialized) {
      throw new Error('‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key');
    }
  }

  const filePart = await prepareFileForGemini(fileUri, mimeType);

  const formTypeText = {
    'student': '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
    'father': '‡∏ö‡∏¥‡∏î‡∏≤',
    'mother': '‡∏°‡∏≤‡∏£‡∏î‡∏≤',
    'guardian': '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á'
  };

  const prompt = `
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á${formTypeText[formType] || '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "isConsentForm": true/false,
  "formType": "${formType}",
  "confidence": 0-100,
  "hasConsent": true/false,
  "consentType": "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  "hasSignature": true/false,
  "signatureQuality": "genuine/suspicious/unclear/none",
  "extractedData": {
    "name": "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•",
    "idCard": "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô",
    "address": "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
    "phone": "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå",
    "email": "‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
    "relationship": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
  },
  "consentDetails": ["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°"],
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"],
  "overall_status": "valid/invalid/needs_review"
}

‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö:
1. ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°
2. ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏° (‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
3. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
4. ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
5. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
`;

  try {
    const result = await model.generateContent([prompt, filePart]);
    const response = await result.response;
    const responseText = response.text();

    console.log('ü§ñ AI Response received');

    // Try to parse JSON response
    try {
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        console.log('‚úÖ Client-side validation completed');
        return parsed;
      } else {
        throw new Error('No JSON found in response');
      }
    } catch (parseError) {
      console.warn('‚ö†Ô∏è Failed to parse AI response as JSON, using text analysis');
      return analyzeConsentTextResponse(responseText, formType);
    }
  } catch (error) {
    console.error('‚ùå Client-side validation failed:', error);
    throw error;
  }
};

// Main validation functions with better error handling
export const validateForm101Document = async (fileUri, mimeType = null) => {
  try {
    console.log('üöÄ Starting Form 101 validation...');
    console.log('File URI:', fileUri);
    console.log('MIME Type:', mimeType);

    // Check if file exists
    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) {
      throw new Error('‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà');
    }

    // Try server-side validation first if enabled
    if (USE_BACKEND_SERVER) {
      try {
        const serverAvailable = await checkBackendServer();
        if (serverAvailable) {
          console.log('‚úÖ Using server-side validation');
          return await validateForm101ViaServer(fileUri, mimeType);
        }
      } catch (serverError) {
        console.log('‚ö†Ô∏è Server validation failed, falling back to client-side:', serverError.message);
      }
    }

    // Fall back to client-side validation
    console.log('‚úÖ Using client-side validation');
    return await validateForm101ClientSide(fileUri, mimeType);

  } catch (error) {
    console.error('‚ùå Form 101 validation error:', error);
    throw new Error(`‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101 ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
  }
};

export const validateConsentForm = async (fileUri, formType = 'student', mimeType = null) => {
  try {
    console.log(`üöÄ Starting ${formType} consent form validation...`);
    console.log('File URI:', fileUri);
    console.log('MIME Type:', mimeType);

    // Check if file exists
    const fileInfo = await FileSystem.getInfoAsync(fileUri);
    if (!fileInfo.exists) {
      throw new Error('‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà');
    }

    // Try server-side validation first if enabled
    if (USE_BACKEND_SERVER) {
      try {
        const serverAvailable = await checkBackendServer();
        if (serverAvailable) {
          console.log('‚úÖ Using server-side validation');
          return await validateConsentFormViaServer(fileUri, formType, mimeType);
        }
      } catch (serverError) {
        console.log('‚ö†Ô∏è Server validation failed, falling back to client-side:', serverError.message);
      }
    }

    // Fall back to client-side validation
    console.log('‚úÖ Using client-side validation');
    return await validateConsentFormClientSide(fileUri, formType, mimeType);

  } catch (error) {
    console.error('‚ùå Consent form validation error:', error);
    throw new Error(`‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏° ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
  }
};

// Batch validation (server-side only)
export const validateMultipleDocuments = async (files) => {
  try {
    if (!USE_BACKEND_SERVER) {
      throw new Error('‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ backend server');
    }

    const serverAvailable = await checkBackendServer();
    if (!serverAvailable) {
      throw new Error('Backend server ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    }

    console.log(`üì¶ Starting batch validation for ${files.length} files...`);

    const formData = new FormData();
    
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const fileObj = {
        uri: file.uri,
        type: file.mimeType,
        name: file.filename || `document_${i}.${file.mimeType.split('/')[1]}`,
      };
      formData.append('documents', fileObj);
    }

    const response = await fetch(`${AI_BACKEND_URL}/ai/validate/batch`, {
      method: 'POST',
      body: formData,
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    }

    const result = await response.json();
    console.log('‚úÖ Batch validation completed');
    return result.results;

  } catch (error) {
    console.error('‚ùå Batch validation error:', error);
    throw error;
  }
};

// Fallback text analysis functions
const analyzeTextResponse = (text) => {
  const lowerText = text.toLowerCase();
  
  const isForm101 = lowerText.includes('‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101') || 
                   lowerText.includes('‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠') ||
                   lowerText.includes('‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤');
  
  const hasSignature = lowerText.includes('‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô') || 
                      lowerText.includes('‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠') ||
                      lowerText.includes('signature');

  return {
    isForm101,
    confidence: isForm101 ? 75 : 25,
    foundElements: isForm101 ? ['‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤'] : [],
    missingElements: !isForm101 ? ['‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101'] : [],
    hasSignature,
    signatureQuality: hasSignature ? 'unclear' : 'none',
    extractedData: {},
    recommendations: !isForm101 ? ['‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101'] : [],
    overall_status: isForm101 && hasSignature ? 'valid' : 'needs_review',
    rawResponse: text
  };
};

const analyzeConsentTextResponse = (text, formType) => {
  const lowerText = text.toLowerCase();
  
  const isConsentForm = lowerText.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°') || 
                       lowerText.includes('‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•') ||
                       lowerText.includes('consent');
  
  const hasSignature = lowerText.includes('‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô') || 
                      lowerText.includes('‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠') ||
                      lowerText.includes('signature');

  return {
    isConsentForm,
    formType,
    confidence: isConsentForm ? 75 : 25,
    hasConsent: isConsentForm,
    consentType: isConsentForm ? '‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' : '',
    hasSignature,
    signatureQuality: hasSignature ? 'unclear' : 'none',
    extractedData: {},
    consentDetails: isConsentForm ? ['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'] : [],
    recommendations: !isConsentForm ? ['‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°'] : [],
    overall_status: isConsentForm && hasSignature ? 'valid' : 'needs_review',
    rawResponse: text
  };
};

// Enhanced validation result display
export const showValidationAlert = (result, onAccept, onReject) => {
  let title, message, isValid;

  if (result.isForm101 !== undefined) {
    // Form 101 validation
    title = result.overall_status === 'valid' ? '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤';
    
    let statusText = '';
    if (result.isForm101) {
      statusText += '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101\n';
    } else {
      statusText += '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 101\n';
    }

    if (result.hasSignature) {
      statusText += `‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô (${result.signatureQuality})\n`;
    } else {
      statusText += '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô\n';
    }

    statusText += `\nüéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${result.confidence}%`;

    if (result.extractedData && Object.keys(result.extractedData).length > 0) {
      statusText += '\n\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö:';
      Object.entries(result.extractedData).forEach(([key, value]) => {
        if (value) statusText += `\n‚Ä¢ ${key}: ${value}`;
      });
    }

    if (result.recommendations && result.recommendations.length > 0) {
      statusText += '\n\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n‚Ä¢ ' + result.recommendations.join('\n‚Ä¢ ');
    }

    message = statusText;
    isValid = result.overall_status === 'valid' && result.isForm101;

  } else if (result.isConsentForm !== undefined) {
    // Consent form validation
    title = result.overall_status === 'valid' ? '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤';
    
    let statusText = '';
    if (result.isConsentForm) {
      statusText += '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°\n';
    } else {
      statusText += '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°\n';
    }

    if (result.hasSignature) {
      statusText += `‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô (${result.signatureQuality})\n`;
    } else {
      statusText += '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô\n';
    }

    statusText += `\nüéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: ${result.confidence}%`;
    statusText += `\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${result.formType}`;

    if (result.extractedData && Object.keys(result.extractedData).length > 0) {
      statusText += '\n\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö:';
      Object.entries(result.extractedData).forEach(([key, value]) => {
        if (value) statusText += `\n‚Ä¢ ${key}: ${value}`;
      });
    }

    message = statusText;
    isValid = result.overall_status === 'valid' && result.isConsentForm;
  } else {
    title = '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
    message = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ';
    isValid = false;
  }

  const buttons = [
    {
      text: '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
      style: 'cancel',
      onPress: onReject,
    },
  ];

  if (isValid || result.overall_status === 'needs_review') {
    buttons.push({
      text: result.overall_status === 'valid' ? '‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ' : '‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)',
      onPress: onAccept,
    });
  }

  Alert.alert(title, message, buttons);
};
